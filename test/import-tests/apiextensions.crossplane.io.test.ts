// generated by cdk8s
import { Testing } from 'cdk8s';
import * as group from '../../src/crossplane/imports/apiextensions.crossplane.io';

test('composition/compositeclusters.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.Composition(chart, 'composition',
    {
      metadata: {
        name: 'compositeclusters.aws.platformref.crossplane.io',
      },
      spec: {
        writeConnectionSecretsToNamespace: 'crossplane-system',
        compositeTypeRef: {
          apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
          kind: 'CompositeCluster',
        },
        resources: [
          {
            base: {
              apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
              kind: 'EKS',
            },
            connectionDetails: [
              {
                fromConnectionSecretKey: 'kubeconfig',
              },
            ],
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'spec.id',
              },
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.annotations[crossplane.io/external-name]',
              },
              {
                fromFieldPath: 'metadata.uid',
                toFieldPath: 'spec.writeConnectionSecretToRef.name',
                transforms: [
                  {
                    type: 'string',
                    string: {
                      fmt: '%s-eks',
                    },
                  },
                ],
              },
              {
                fromFieldPath: 'spec.writeConnectionSecretToRef.namespace',
                toFieldPath: 'spec.writeConnectionSecretToRef.namespace',
              },
              {
                fromFieldPath: 'spec.parameters.nodes.count',
                toFieldPath: 'spec.parameters.nodes.count',
              },
              {
                fromFieldPath: 'spec.parameters.nodes.size',
                toFieldPath: 'spec.parameters.nodes.size',
              },
              {
                fromFieldPath: 'spec.parameters.networkRef.id',
                toFieldPath: 'spec.parameters.networkRef.id',
              },
            ],
          },
          {
            base: {
              apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
              kind: 'Services',
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'spec.providerConfigRef.name',
              },
              {
                fromFieldPath: 'spec.parameters.services.operators.prometheus.version',
                toFieldPath: 'spec.operators.prometheus.version',
              },
            ],
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('compositeresourcedefinition/compositeclusters.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.CompositeResourceDefinition(chart, 'compositeresourcedefinition',
    {
      metadata: {
        name: 'compositeclusters.aws.platformref.crossplane.io',
        annotations: {
          'upbound.io/ui-schema': '---\nconfigSections:\n- title: Cluster Info\n  description: Information about this cluster\n  items:\n  - name: id\n    controlType: singleInput\n    type: string\n    path: ".spec.id"\n    title: Cluster ID\n    description: Cluster ID that other objects will use to refer to this cluster\n    default: platform-ref-aws-cluster\n    validation:\n    - required: true\n      customError: Cluster ID is required.\n  - name: writeSecretRef\n    controlType: singleInput\n    type: string\n    path: ".spec.writeConnectionSecretToRef.name"\n    title: Connection Secret Ref\n    description: name of the secret to write to this namespace\n    default: cluster-conn\n    validation:\n    - required: true\n- title: Cluster Nodes\n  description: Enter information to size your cluster\n  items:\n  - name: clusterNodeCount\n    controlType: singleInput\n    type: integer\n    path: ".spec.parameters.nodes.count"\n    title: Node Count\n    description: Number of nodes in the cluster\n    default: 1\n    validation:\n    - minimum: 1\n    - maximum: 100\n    - required: true\n      customError: Node count is required.\n  - name: clusterNodeSize\n    controlType: singleSelect\n    path: ".spec.parameters.nodes.size"\n    title: Node Size\n    description: Desired node count, from 1 to 100.\n    default: small\n    enum:\n    - small\n    - medium\n    - large\n    validation:\n    - required: true\n      customError: Node size is required.\n- title: Cluster Networking\n  description: Select a network fabric for your cluster\n  items:\n  - name: networkRef\n    controlType: singleInput\n    type: string\n    path: ".spec.parameters.networkRef.id"\n    title: Network Ref\n    description: Network fabric to connect the database to\n    default: platform-ref-aws-network\n    validation:\n    - required: true\n      customError: Network ref is required.\n- title: Cluster Services\n  description: Configure cluster services and operators\n  items:\n  - name: promVersion\n    controlType: singleInput\n    type: string\n    path: ".spec.parameters.services.operators.prometheus.version"\n    title: Prometheus Chart Version\n    description: The version of kube-prometheus-stack chart to install\n    default: 10.1.0\n    validation:\n    - required: false',
        },
      },
      spec: {
        claimNames: {
          kind: 'Cluster',
          plural: 'clusters',
        },
        connectionSecretKeys: [
          'kubeconfig',
        ],
        group: 'aws.platformref.crossplane.io',
        names: {
          kind: 'CompositeCluster',
          plural: 'compositeclusters',
        },
        versions: [
          {
            name: 'v1alpha1',
            served: true,
            referenceable: true,
            schema: {
              openAPIV3Schema: {
                type: 'object',
                properties: {
                  spec: {
                    type: 'object',
                    properties: {
                      id: {
                        type: 'string',
                        description: 'ID of this Cluster that other objects will use to refer to it.',
                      },
                      parameters: {
                        type: 'object',
                        description: 'Cluster configuration parameters.',
                        properties: {
                          nodes: {
                            type: 'object',
                            description: 'Cluster node configuration parameters.',
                            properties: {
                              count: {
                                type: 'integer',
                                description: 'Desired node count, from 1 to 100.',
                              },
                              size: {
                                type: 'string',
                                description: 'Size of node.',
                                enum: [
                                  'small',
                                  'medium',
                                  'large',
                                ],
                              },
                            },
                            required: [
                              'count',
                              'size',
                            ],
                          },
                          services: {
                            type: 'object',
                            description: 'Services configuration parameters.',
                            properties: {
                              operators: {
                                type: 'object',
                                description: 'Configuration for operators.',
                                properties: {
                                  prometheus: {
                                    type: 'object',
                                    description: 'Configuration for the Prometheus operator.',
                                    properties: {
                                      version: {
                                        type: 'string',
                                        description: 'Prometheus operator version to run.',
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                          networkRef: {
                            type: 'object',
                            description: 'A reference to the Network object that this cluster should be connected to.',
                            properties: {
                              id: {
                                type: 'string',
                                description: 'ID of the Network object this ref points to.',
                              },
                            },
                            required: [
                              'id',
                            ],
                          },
                        },
                        required: [
                          'nodes',
                          'networkRef',
                        ],
                      },
                    },
                    required: [
                      'name',
                      'parameters',
                    ],
                  },
                },
              },
            },
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('composition/eks.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.Composition(chart, 'composition',
    {
      metadata: {
        name: 'eks.aws.platformref.crossplane.io',
        labels: {
          provider: 'aws',
        },
      },
      spec: {
        writeConnectionSecretsToNamespace: 'crossplane-system',
        compositeTypeRef: {
          apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
          kind: 'EKS',
        },
        resources: [
          {
            base: {
              apiVersion: 'identity.aws.crossplane.io/v1beta1',
              kind: 'IAMRole',
              metadata: {
                labels: {
                  role: 'controlplane',
                },
              },
              spec: {
                forProvider: {
                  assumeRolePolicyDocument: '{\n  "Version": "2012-10-17",\n  "Statement": [\n      {\n          "Effect": "Allow",\n          "Principal": {\n              "Service": [\n                  "eks.amazonaws.com"\n              ]\n          },\n          "Action": [\n              "sts:AssumeRole"\n          ]\n      }\n  ]\n}\n',
                },
              },
            },
          },
          {
            base: {
              apiVersion: 'identity.aws.crossplane.io/v1beta1',
              kind: 'IAMRolePolicyAttachment',
              spec: {
                forProvider: {
                  policyArn: 'arn:aws:iam::aws:policy/AmazonEKSClusterPolicy',
                  roleNameSelector: {
                    matchControllerRef: true,
                    matchLabels: {
                      role: 'controlplane',
                    },
                  },
                },
              },
            },
          },
          {
            base: {
              apiVersion: 'eks.aws.crossplane.io/v1beta1',
              kind: 'Cluster',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  roleArnSelector: {
                    matchControllerRef: true,
                    matchLabels: {
                      role: 'controlplane',
                    },
                  },
                  resourcesVpcConfig: {
                    endpointPrivateAccess: true,
                    endpointPublicAccess: true,
                  },
                  version: '1.16',
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'metadata.annotations[crossplane.io/external-name]',
                toFieldPath: 'metadata.annotations[crossplane.io/external-name]',
              },
              {
                fromFieldPath: 'metadata.uid',
                toFieldPath: 'spec.writeConnectionSecretToRef.name',
                transforms: [
                  {
                    type: 'string',
                    string: {
                      fmt: '%s-ekscluster',
                    },
                  },
                ],
              },
              {
                fromFieldPath: 'spec.writeConnectionSecretToRef.namespace',
                toFieldPath: 'spec.writeConnectionSecretToRef.namespace',
              },
              {
                fromFieldPath: 'spec.parameters.networkRef.id',
                toFieldPath: 'spec.forProvider.resourcesVpcConfig.securityGroupIdSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]',
              },
              {
                fromFieldPath: 'spec.parameters.networkRef.id',
                toFieldPath: 'spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
            connectionDetails: [
              {
                fromConnectionSecretKey: 'kubeconfig',
              },
            ],
          },
          {
            base: {
              apiVersion: 'identity.aws.crossplane.io/v1beta1',
              kind: 'IAMRole',
              metadata: {
                labels: {
                  role: 'nodegroup',
                },
              },
              spec: {
                forProvider: {
                  assumeRolePolicyDocument: '{\n  "Version": "2012-10-17",\n  "Statement": [\n      {\n          "Effect": "Allow",\n          "Principal": {\n              "Service": [\n                  "ec2.amazonaws.com"\n              ]\n          },\n          "Action": [\n              "sts:AssumeRole"\n          ]\n      }\n  ]\n}\n',
                },
              },
            },
          },
          {
            base: {
              apiVersion: 'identity.aws.crossplane.io/v1beta1',
              kind: 'IAMRolePolicyAttachment',
              spec: {
                forProvider: {
                  policyArn: 'arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy',
                  roleNameSelector: {
                    matchControllerRef: true,
                    matchLabels: {
                      role: 'nodegroup',
                    },
                  },
                },
              },
            },
          },
          {
            base: {
              apiVersion: 'identity.aws.crossplane.io/v1beta1',
              kind: 'IAMRolePolicyAttachment',
              spec: {
                forProvider: {
                  policyArn: 'arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy',
                  roleNameSelector: {
                    matchControllerRef: true,
                    matchLabels: {
                      role: 'nodegroup',
                    },
                  },
                },
              },
            },
          },
          {
            base: {
              apiVersion: 'identity.aws.crossplane.io/v1beta1',
              kind: 'IAMRolePolicyAttachment',
              spec: {
                forProvider: {
                  policyArn: 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly',
                  roleNameSelector: {
                    matchControllerRef: true,
                    matchLabels: {
                      role: 'nodegroup',
                    },
                  },
                },
              },
            },
          },
          {
            base: {
              apiVersion: 'eks.aws.crossplane.io/v1alpha1',
              kind: 'NodeGroup',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  clusterNameSelector: {
                    matchControllerRef: true,
                  },
                  nodeRoleSelector: {
                    matchControllerRef: true,
                    matchLabels: {
                      role: 'nodegroup',
                    },
                  },
                  subnetSelector: {
                    matchLabels: {
                      access: 'public',
                    },
                  },
                  scalingConfig: {
                    minSize: 1,
                    maxSize: 100,
                    desiredSize: 1,
                  },
                  instanceTypes: [
                    't3.medium',
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'metadata.annotations[crossplane.io/external-name]',
                toFieldPath: 'metadata.annotations[crossplane.io/external-name]',
              },
              {
                fromFieldPath: 'spec.parameters.nodes.count',
                toFieldPath: 'spec.forProvider.scalingConfig.desiredSize',
              },
              {
                fromFieldPath: 'spec.parameters.nodes.size',
                toFieldPath: 'spec.forProvider.instanceTypes[0]',
                transforms: [
                  {
                    type: 'map',
                    map: {
                      small: 't3.small',
                      medium: 't3.medium',
                      large: 't3.large',
                    },
                  },
                ],
              },
              {
                fromFieldPath: 'spec.parameters.networkRef.id',
                toFieldPath: 'spec.forProvider.subnetSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'helm.crossplane.io/v1alpha1',
              kind: 'ProviderConfig',
              spec: {
                credentials: {
                  source: 'Secret',
                  secretRef: {
                    namespace: 'crossplane-system',
                    key: 'kubeconfig',
                  },
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.name',
              },
              {
                fromFieldPath: 'metadata.uid',
                toFieldPath: 'spec.credentials.secretRef.name',
                transforms: [
                  {
                    type: 'string',
                    string: {
                      fmt: '%s-ekscluster',
                    },
                  },
                ],
              },
            ],
            readinessChecks: [
              {
                type: group.CompositionSpecResourcesReadinessChecksType.NONE,
              },
            ],
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('compositeresourcedefinition/eks.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.CompositeResourceDefinition(chart, 'compositeresourcedefinition',
    {
      metadata: {
        name: 'eks.aws.platformref.crossplane.io',
      },
      spec: {
        connectionSecretKeys: [
          'kubeconfig',
        ],
        group: 'aws.platformref.crossplane.io',
        names: {
          kind: 'EKS',
          plural: 'eks',
        },
        versions: [
          {
            name: 'v1alpha1',
            served: true,
            referenceable: true,
            schema: {
              openAPIV3Schema: {
                type: 'object',
                properties: {
                  spec: {
                    type: 'object',
                    properties: {
                      id: {
                        type: 'string',
                        description: 'ID of this Cluster that other objects will use to refer to it.',
                      },
                      parameters: {
                        type: 'object',
                        description: 'EKS configuration parameters.',
                        properties: {
                          nodes: {
                            type: 'object',
                            description: 'EKS node configuration parameters.',
                            properties: {
                              count: {
                                type: 'integer',
                                description: 'Desired node count, from 1 to 100.',
                              },
                              size: {
                                type: 'string',
                                description: 'Size of node.',
                                enum: [
                                  'small',
                                  'medium',
                                  'large',
                                ],
                              },
                            },
                            required: [
                              'count',
                              'size',
                            ],
                          },
                          networkRef: {
                            type: 'object',
                            description: 'A reference to the Network object that this postgres should be connected to.',
                            properties: {
                              id: {
                                type: 'string',
                                description: 'ID of the Network object this ref points to.',
                              },
                            },
                            required: [
                              'id',
                            ],
                          },
                        },
                        required: [
                          'nodes',
                          'networkRef',
                        ],
                      },
                    },
                    required: [
                      'parameters',
                    ],
                  },
                },
              },
            },
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('composition/services.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.Composition(chart, 'composition',
    {
      metadata: {
        name: 'services.aws.platformref.crossplane.io',
        labels: {
          plan: 'full',
          provider: 'helm',
        },
      },
      spec: {
        writeConnectionSecretsToNamespace: 'crossplane-system',
        compositeTypeRef: {
          apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
          kind: 'Services',
        },
        resources: [
          {
            base: {
              apiVersion: 'helm.crossplane.io/v1alpha1',
              kind: 'Release',
              spec: {
                rollbackLimit: 3,
                forProvider: {
                  namespace: 'operators',
                  chart: {
                    name: 'kube-prometheus-stack',
                    repository: 'https://prometheus-community.github.io/helm-charts',
                    version: '10.1.0',
                  },
                  values: {},
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'metadata.labels',
                toFieldPath: 'metadata.labels',
              },
              {
                fromFieldPath: 'metadata.annotations',
                toFieldPath: 'metadata.annotations',
              },
              {
                fromFieldPath: 'spec.providerConfigRef.name',
                toFieldPath: 'spec.providerConfigRef.name',
              },
              {
                fromFieldPath: 'spec.operators.prometheus.version',
                toFieldPath: 'spec.forProvider.chart.version',
              },
            ],
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('compositeresourcedefinition/services.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.CompositeResourceDefinition(chart, 'compositeresourcedefinition',
    {
      metadata: {
        name: 'services.aws.platformref.crossplane.io',
      },
      spec: {
        group: 'aws.platformref.crossplane.io',
        names: {
          kind: 'Services',
          plural: 'services',
        },
        versions: [
          {
            name: 'v1alpha1',
            served: true,
            referenceable: true,
            schema: {
              openAPIV3Schema: {
                type: 'object',
                properties: {
                  spec: {
                    type: 'object',
                    properties: {
                      operators: {
                        type: 'object',
                        description: 'Configuration for operators.',
                        properties: {
                          prometheus: {
                            type: 'object',
                            description: 'Configuration for the Prometheus operator.',
                            properties: {
                              version: {
                                type: 'string',
                                description: 'Prometheus operator version to run.',
                              },
                            },
                          },
                        },
                      },
                      providerConfigRef: {
                        type: 'object',
                        description: 'A reference to the ProviderConfig of the cluster that services should be deployed to.',
                        properties: {
                          name: {
                            type: 'string',
                            description: 'Name of the Kubernetes provider configuration. This will typically be the name of the cluster with a five character suffix appended.',
                          },
                        },
                        required: [
                          'name',
                        ],
                      },
                    },
                    required: [
                      'providerConfigRef',
                    ],
                  },
                },
              },
            },
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('composition/compositepostgresqlinstances.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.Composition(chart, 'composition',
    {
      metadata: {
        name: 'compositepostgresqlinstances.aws.platformref.crossplane.io',
        labels: {
          provider: 'aws',
        },
      },
      spec: {
        writeConnectionSecretsToNamespace: 'crossplane-system',
        compositeTypeRef: {
          apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
          kind: 'CompositePostgreSQLInstance',
        },
        resources: [
          {
            base: {
              apiVersion: 'database.aws.crossplane.io/v1beta1',
              kind: 'DBSubnetGroup',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  description: 'An excellent formation of subnetworks.',
                },
                reclaimPolicy: 'Delete',
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.parameters.networkRef.id',
                toFieldPath: 'spec.forProvider.subnetIdSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'database.aws.crossplane.io/v1beta1',
              kind: 'RDSInstance',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  dbSubnetGroupNameSelector: {
                    matchControllerRef: true,
                  },
                  dbInstanceClass: 'db.t2.small',
                  masterUsername: 'masteruser',
                  engine: 'postgres',
                  engineVersion: '9.6',
                  skipFinalSnapshotBeforeDeletion: true,
                  publiclyAccessible: false,
                },
                writeConnectionSecretToRef: {
                  namespace: 'crossplane-system',
                },
                reclaimPolicy: 'Delete',
              },
            },
            patches: [
              {
                fromFieldPath: 'metadata.uid',
                toFieldPath: 'spec.writeConnectionSecretToRef.name',
                transforms: [
                  {
                    type: 'string',
                    string: {
                      fmt: '%s-postgresql',
                    },
                  },
                ],
              },
              {
                fromFieldPath: 'spec.parameters.storageGB',
                toFieldPath: 'spec.forProvider.allocatedStorage',
              },
              {
                fromFieldPath: 'spec.parameters.networkRef.id',
                toFieldPath: 'spec.forProvider.vpcSecurityGroupIDSelector.matchLabels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
            connectionDetails: [
              {
                fromConnectionSecretKey: 'username',
              },
              {
                fromConnectionSecretKey: 'password',
              },
              {
                fromConnectionSecretKey: 'endpoint',
              },
              {
                fromConnectionSecretKey: 'port',
              },
            ],
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('compositeresourcedefinition/compositepostgresqlinstances.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.CompositeResourceDefinition(chart, 'compositeresourcedefinition',
    {
      metadata: {
        name: 'compositepostgresqlinstances.aws.platformref.crossplane.io',
        annotations: {
          'upbound.io/ui-schema': '---\nconfigSections:\n- title: Database Size\n  description: Enter information to size your database\n  items:\n  - name: storageGB\n    controlType: singleInput\n    type: integer\n    path: ".spec.parameters.storageGB"\n    title: Storage (GB)\n    description: The size in GB for database storage\n    default: 5\n    validation:\n    - minimum: 1\n    - maximum: 500\n    - required: true\n  - name: networkRef\n    controlType: singleInput\n    type: string\n    path: ".spec.parameters.networkRef.id"\n    title: Network Ref\n    description: Network fabric to connect the database to\n    default: platform-ref-aws-network\n    validation:\n    - required: true\n      customError: Network ref is required and should match the network ref of the app cluster.\n  - name: writeSecretRef\n    controlType: singleInput\n    type: string\n    path: ".spec.writeConnectionSecretToRef.name"\n    title: Connection Secret Ref\n    description: name of the secret to write to this namespace\n    default: db-conn\n    validation:\n    - required: true',
        },
      },
      spec: {
        claimNames: {
          kind: 'PostgreSQLInstance',
          plural: 'postgresqlinstances',
        },
        connectionSecretKeys: [
          'username',
          'password',
          'endpoint',
          'port',
        ],
        group: 'aws.platformref.crossplane.io',
        names: {
          kind: 'CompositePostgreSQLInstance',
          plural: 'compositepostgresqlinstances',
        },
        versions: [
          {
            name: 'v1alpha1',
            served: true,
            referenceable: true,
            schema: {
              openAPIV3Schema: {
                type: 'object',
                properties: {
                  spec: {
                    type: 'object',
                    properties: {
                      parameters: {
                        type: 'object',
                        properties: {
                          storageGB: {
                            type: 'integer',
                          },
                          networkRef: {
                            type: 'object',
                            description: 'A reference to the Network object that this postgres should be connected to.',
                            properties: {
                              id: {
                                type: 'string',
                                description: 'ID of the Network object this ref points to.',
                              },
                            },
                            required: [
                              'id',
                            ],
                          },
                        },
                        required: [
                          'storageGB',
                          'networkRef',
                        ],
                      },
                    },
                    required: [
                      'parameters',
                    ],
                  },
                },
              },
            },
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('composition/compositenetworks.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.Composition(chart, 'composition',
    {
      metadata: {
        name: 'compositenetworks.aws.platformref.crossplane.io',
        labels: {
          provider: 'aws',
        },
      },
      spec: {
        writeConnectionSecretsToNamespace: 'crossplane-system',
        compositeTypeRef: {
          apiVersion: 'aws.platformref.crossplane.io/v1alpha1',
          kind: 'CompositeNetwork',
        },
        resources: [
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'VPC',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  cidrBlock: '192.168.0.0/16',
                  enableDnsSupport: true,
                  enableDnsHostNames: true,
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'InternetGateway',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'Subnet',
              metadata: {
                labels: {
                  zone: 'us-west-2a',
                  access: 'public',
                },
              },
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  mapPublicIPOnLaunch: true,
                  cidrBlock: '192.168.0.0/18',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                  availabilityZone: 'us-west-2a',
                  tags: [
                    {
                      key: 'kubernetes.io/role/elb',
                      value: '1',
                    },
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'Subnet',
              metadata: {
                labels: {
                  zone: 'us-west-2b',
                  access: 'public',
                },
              },
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  mapPublicIPOnLaunch: true,
                  cidrBlock: '192.168.64.0/18',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                  availabilityZone: 'us-west-2b',
                  tags: [
                    {
                      key: 'kubernetes.io/role/elb',
                      value: '1',
                    },
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'Subnet',
              metadata: {
                labels: {
                  zone: 'us-west-2a',
                  access: 'private',
                },
              },
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  cidrBlock: '192.168.128.0/18',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                  availabilityZone: 'us-west-2a',
                  tags: [
                    {
                      value: 'shared',
                      key: '',
                    },
                    {
                      key: 'kubernetes.io/role/internal-elb',
                      value: '1',
                    },
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
              {
                fromFieldPath: 'spec.clusterRef.id',
                toFieldPath: 'spec.forProvider.tags[0].key',
                transforms: [
                  {
                    type: 'string',
                    string: {
                      fmt: 'kubernetes.io/cluster/%s',
                    },
                  },
                ],
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'Subnet',
              metadata: {
                labels: {
                  zone: 'us-west-2b',
                  access: 'private',
                },
              },
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  cidrBlock: '192.168.192.0/18',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                  availabilityZone: 'us-west-2b',
                  tags: [
                    {
                      value: 'shared',
                      key: '',
                    },
                    {
                      key: 'kubernetes.io/role/internal-elb',
                      value: '1',
                    },
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
              {
                fromFieldPath: 'spec.clusterRef.id',
                toFieldPath: 'spec.forProvider.tags[0].key',
                transforms: [
                  {
                    type: 'string',
                    string: {
                      fmt: 'kubernetes.io/cluster/%s',
                    },
                  },
                ],
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1alpha4',
              kind: 'RouteTable',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                  routes: [
                    {
                      destinationCidrBlock: '0.0.0.0/0',
                      gatewayIdSelector: {
                        matchControllerRef: true,
                      },
                    },
                  ],
                  associations: [
                    {
                      subnetIdSelector: {
                        matchControllerRef: true,
                        matchLabels: {
                          zone: 'us-west-2a',
                          access: 'public',
                        },
                      },
                    },
                    {
                      subnetIdSelector: {
                        matchControllerRef: true,
                        matchLabels: {
                          zone: 'us-west-2b',
                          access: 'public',
                        },
                      },
                    },
                    {
                      subnetIdSelector: {
                        matchControllerRef: true,
                        matchLabels: {
                          zone: 'us-west-2a',
                          access: 'private',
                        },
                      },
                    },
                    {
                      subnetIdSelector: {
                        matchControllerRef: true,
                        matchLabels: {
                          zone: 'us-west-2b',
                          access: 'private',
                        },
                      },
                    },
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
          {
            base: {
              apiVersion: 'ec2.aws.crossplane.io/v1beta1',
              kind: 'SecurityGroup',
              spec: {
                forProvider: {
                  region: 'us-west-2',
                  vpcIdSelector: {
                    matchControllerRef: true,
                  },
                  groupName: 'platform-ref-aws-cluster',
                  description: 'Allow access to PostgreSQL',
                  ingress: [
                    {
                      fromPort: 5432,
                      toPort: 5432,
                      ipProtocol: 'tcp',
                      ipRanges: [
                        {
                          cidrIp: '0.0.0.0/0',
                          description: 'Everywhere',
                        },
                      ],
                    },
                  ],
                },
              },
            },
            patches: [
              {
                fromFieldPath: 'spec.id',
                toFieldPath: 'metadata.labels[networks.aws.platformref.crossplane.io/network-id]',
              },
            ],
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

test('compositeresourcedefinition/compositenetworks.aws.platformref.crossplane.io', () => {
  const chart = Testing.chart();

  new group.CompositeResourceDefinition(chart, 'compositeresourcedefinition',
    {
      metadata: {
        name: 'compositenetworks.aws.platformref.crossplane.io',
        annotations: {
          'upbound.io/ui-schema': '---\nconfigSections:\n- title: Network Info\n  description: Information about this network fabric\n  items:\n  - name: id\n    controlType: singleInput\n    type: string\n    path: ".spec.id"\n    title: Network ID\n    description: Network ID that other objects will use to refer (and connect) to this network fabric\n    default: platform-ref-aws-network\n    validation:\n    - required: true\n      customError: Network ID is required.\n- title: Cluster Info\n  description: The cluster used with this network fabric\n  items:\n  - name: clusterRef\n    controlType: singleInput\n    type: string\n    path: ".spec.clusterRef.id"\n    title: Cluster Ref\n    description: ID of the Cluster object that will use this network fabric\n    default: platform-ref-aws-cluster\n    validation:\n    - required: true\n      customError: Cluster ref is required.',
        },
      },
      spec: {
        claimNames: {
          kind: 'Network',
          plural: 'networks',
        },
        group: 'aws.platformref.crossplane.io',
        names: {
          kind: 'CompositeNetwork',
          plural: 'compositenetworks',
        },
        versions: [
          {
            name: 'v1alpha1',
            served: true,
            referenceable: true,
            schema: {
              openAPIV3Schema: {
                type: 'object',
                properties: {
                  spec: {
                    type: 'object',
                    properties: {
                      id: {
                        type: 'string',
                        description: 'ID of this Network that other objects will use to refer to it.',
                      },
                      clusterRef: {
                        type: 'object',
                        description: 'A reference to the Cluster object that this network will be used for.',
                        properties: {
                          id: {
                            type: 'string',
                            description: 'ID of the Cluster object this ref points to.',
                          },
                        },
                        required: [
                          'id',
                        ],
                      },
                    },
                    required: [
                      'id',
                      'clusterRef',
                    ],
                  },
                },
              },
            },
          },
        ],
      },
    },
  );

  expect(Testing.synth(chart)).toMatchSnapshot();
});

