// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * Provider is the CRD type for a request to add a provider to Crossplane.
 *
 * @schema Provider
 */
export class Provider extends ApiObject {
  /**
   * Defines a "Provider" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ProviderOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'Provider',
      apiVersion: 'pkg.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Provider is the CRD type for a request to add a provider to Crossplane.
 *
 * @schema Provider
 */
export interface ProviderOptions {
  /**
   * @schema Provider#metadata
   */
  readonly metadata?: any;

  /**
   * ProviderSpec specifies details about a request to install a provider to Crossplane.
   *
   * @schema Provider#spec
   */
  readonly spec?: ProviderSpec;

}

/**
 * ProviderSpec specifies details about a request to install a provider to Crossplane.
 *
 * @schema ProviderSpec
 */
export interface ProviderSpec {
  /**
   * ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.
   *
   * @schema ProviderSpec#controllerConfigRef
   */
  readonly controllerConfigRef?: ProviderSpecControllerConfigRef;

  /**
   * IgnoreCrossplaneConstraints indicates to the package manager whether to honor Crossplane version constrains specified by the package. Default is false.
   *
   * @default false.
   * @schema ProviderSpec#ignoreCrossplaneConstraints
   */
  readonly ignoreCrossplaneConstraints?: boolean;

  /**
   * Package is the name of the package that is being requested.
   *
   * @schema ProviderSpec#package
   */
  readonly package: string;

  /**
   * PackagePullPolicy defines the pull policy for the package. Default is IfNotPresent.
   *
   * @default IfNotPresent.
   * @schema ProviderSpec#packagePullPolicy
   */
  readonly packagePullPolicy?: string;

  /**
   * PackagePullSecrets are named secrets in the same namespace that can be used to fetch packages from private registries.
   *
   * @schema ProviderSpec#packagePullSecrets
   */
  readonly packagePullSecrets?: ProviderSpecPackagePullSecrets[];

  /**
   * RevisionActivationPolicy specifies how the package controller should update from one revision to the next. Options are Automatic or Manual. Default is Automatic.
   *
   * @default Automatic.
   * @schema ProviderSpec#revisionActivationPolicy
   */
  readonly revisionActivationPolicy?: string;

  /**
   * RevisionHistoryLimit dictates how the package controller cleans up old inactive package revisions. Defaults to 1. Can be disabled by explicitly setting to 0.
   *
   * @default 1. Can be disabled by explicitly setting to 0.
   * @schema ProviderSpec#revisionHistoryLimit
   */
  readonly revisionHistoryLimit?: number;

}

/**
 * ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.
 *
 * @schema ProviderSpecControllerConfigRef
 */
export interface ProviderSpecControllerConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProviderSpecControllerConfigRef#name
   */
  readonly name: string;

}

/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 *
 * @schema ProviderSpecPackagePullSecrets
 */
export interface ProviderSpecPackagePullSecrets {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema ProviderSpecPackagePullSecrets#name
   */
  readonly name?: string;

}

