// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A ConfigurationRevision that has been added to Crossplane.
 *
 * @schema ConfigurationRevision
 */
export class ConfigurationRevision extends ApiObject {
  /**
   * Defines a "ConfigurationRevision" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ConfigurationRevisionOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'ConfigurationRevision',
      apiVersion: 'pkg.crossplane.io/v1alpha1',
    });
  }
}

/**
 * A ConfigurationRevision that has been added to Crossplane.
 *
 * @schema ConfigurationRevision
 */
export interface ConfigurationRevisionOptions {
  /**
   * @schema ConfigurationRevision#metadata
   */
  readonly metadata?: any;

  /**
   * PackageRevisionSpec specifies the desired state of a PackageRevision.
   *
   * @schema ConfigurationRevision#spec
   */
  readonly spec?: ConfigurationRevisionSpec;

}

/**
 * PackageRevisionSpec specifies the desired state of a PackageRevision.
 *
 * @schema ConfigurationRevisionSpec
 */
export interface ConfigurationRevisionSpec {
  /**
   * ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.
   *
   * @schema ConfigurationRevisionSpec#controllerConfigRef
   */
  readonly controllerConfigRef?: ConfigurationRevisionSpecControllerConfigRef;

  /**
   * DesiredState of the PackageRevision. Can be either Active or Inactive.
   *
   * @schema ConfigurationRevisionSpec#desiredState
   */
  readonly desiredState: string;

  /**
   * IgnoreCrossplaneConstraints indicates to the package manager whether to honor Crossplane version constrains specified by the package. Default is false.
   *
   * @default false.
   * @schema ConfigurationRevisionSpec#ignoreCrossplaneConstraints
   */
  readonly ignoreCrossplaneConstraints?: boolean;

  /**
   * Package image used by install Pod to extract package contents.
   *
   * @schema ConfigurationRevisionSpec#image
   */
  readonly image: string;

  /**
   * PackagePullPolicy defines the pull policy for the package. It is also applied to any images pulled for the package, such as a provider's controller image. Default is IfNotPresent.
   *
   * @default IfNotPresent.
   * @schema ConfigurationRevisionSpec#packagePullPolicy
   */
  readonly packagePullPolicy?: string;

  /**
   * PackagePullSecrets are named secrets in the same namespace that can be used to fetch packages from private registries. They are also applied to any images pulled for the package, such as a provider's controller image.
   *
   * @schema ConfigurationRevisionSpec#packagePullSecrets
   */
  readonly packagePullSecrets?: ConfigurationRevisionSpecPackagePullSecrets[];

  /**
   * Revision number. Indicates when the revision will be garbage collected based on the parent's RevisionHistoryLimit.
   *
   * @schema ConfigurationRevisionSpec#revision
   */
  readonly revision: number;

}

/**
 * ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.
 *
 * @schema ConfigurationRevisionSpecControllerConfigRef
 */
export interface ConfigurationRevisionSpecControllerConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ConfigurationRevisionSpecControllerConfigRef#name
   */
  readonly name: string;

}

/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 *
 * @schema ConfigurationRevisionSpecPackagePullSecrets
 */
export interface ConfigurationRevisionSpecPackagePullSecrets {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema ConfigurationRevisionSpecPackagePullSecrets#name
   */
  readonly name?: string;

}

