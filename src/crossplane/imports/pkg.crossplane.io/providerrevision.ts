// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A ProviderRevision that has been added to Crossplane.
 *
 * @schema ProviderRevision
 */
export class ProviderRevision extends ApiObject {
  /**
   * Defines a "ProviderRevision" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ProviderRevisionOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'ProviderRevision',
      apiVersion: 'pkg.crossplane.io/v1alpha1',
    });
  }
}

/**
 * A ProviderRevision that has been added to Crossplane.
 *
 * @schema ProviderRevision
 */
export interface ProviderRevisionOptions {
  /**
   * @schema ProviderRevision#metadata
   */
  readonly metadata?: any;

  /**
   * PackageRevisionSpec specifies the desired state of a PackageRevision.
   *
   * @schema ProviderRevision#spec
   */
  readonly spec?: ProviderRevisionSpec;

}

/**
 * PackageRevisionSpec specifies the desired state of a PackageRevision.
 *
 * @schema ProviderRevisionSpec
 */
export interface ProviderRevisionSpec {
  /**
   * ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.
   *
   * @schema ProviderRevisionSpec#controllerConfigRef
   */
  readonly controllerConfigRef?: ProviderRevisionSpecControllerConfigRef;

  /**
   * DesiredState of the PackageRevision. Can be either Active or Inactive.
   *
   * @schema ProviderRevisionSpec#desiredState
   */
  readonly desiredState: string;

  /**
   * IgnoreCrossplaneConstraints indicates to the package manager whether to honor Crossplane version constrains specified by the package. Default is false.
   *
   * @default false.
   * @schema ProviderRevisionSpec#ignoreCrossplaneConstraints
   */
  readonly ignoreCrossplaneConstraints?: boolean;

  /**
   * Package image used by install Pod to extract package contents.
   *
   * @schema ProviderRevisionSpec#image
   */
  readonly image: string;

  /**
   * PackagePullPolicy defines the pull policy for the package. It is also applied to any images pulled for the package, such as a provider's controller image. Default is IfNotPresent.
   *
   * @default IfNotPresent.
   * @schema ProviderRevisionSpec#packagePullPolicy
   */
  readonly packagePullPolicy?: string;

  /**
   * PackagePullSecrets are named secrets in the same namespace that can be used to fetch packages from private registries. They are also applied to any images pulled for the package, such as a provider's controller image.
   *
   * @schema ProviderRevisionSpec#packagePullSecrets
   */
  readonly packagePullSecrets?: ProviderRevisionSpecPackagePullSecrets[];

  /**
   * Revision number. Indicates when the revision will be garbage collected based on the parent's RevisionHistoryLimit.
   *
   * @schema ProviderRevisionSpec#revision
   */
  readonly revision: number;

}

/**
 * ControllerConfigRef references a ControllerConfig resource that will be used to configure the packaged controller Deployment.
 *
 * @schema ProviderRevisionSpecControllerConfigRef
 */
export interface ProviderRevisionSpecControllerConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProviderRevisionSpecControllerConfigRef#name
   */
  readonly name: string;

}

/**
 * LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
 *
 * @schema ProviderRevisionSpecPackagePullSecrets
 */
export interface ProviderRevisionSpecPackagePullSecrets {
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
   *
   * @schema ProviderRevisionSpecPackagePullSecrets#name
   */
  readonly name?: string;

}

