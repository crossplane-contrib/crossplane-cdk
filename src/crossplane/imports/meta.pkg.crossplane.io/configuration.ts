// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A Configuration is the description of a Crossplane Configuration package.
 *
 * @schema Configuration
 */
export class Configuration extends ApiObject {
  /**
   * Defines a "Configuration" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: ConfigurationOptions) {
    super(scope, name, {
      ...options,
      kind: 'Configuration',
      apiVersion: 'meta.pkg.crossplane.io/v1alpha1',
    });
  }
}

/**
 * A Configuration is the description of a Crossplane Configuration package.
 *
 * @schema Configuration
 */
export interface ConfigurationOptions {
  /**
   * @schema Configuration#metadata
   */
  readonly metadata?: any;

  /**
   * ConfigurationSpec specifies the configuration of a Configuration.
   *
   * @schema Configuration#spec
   */
  readonly spec: ConfigurationSpec;

}

/**
 * ConfigurationSpec specifies the configuration of a Configuration.
 *
 * @schema ConfigurationSpec
 */
export interface ConfigurationSpec {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ConfigurationSpec#crossplane
   */
  readonly crossplane?: ConfigurationSpecCrossplane;

  /**
   * Dependencies on other packages.
   *
   * @schema ConfigurationSpec#dependsOn
   */
  readonly dependsOn?: ConfigurationSpecDependsOn[];

}

/**
 * Semantic version constraints of Crossplane that package is compatible with.
 *
 * @schema ConfigurationSpecCrossplane
 */
export interface ConfigurationSpecCrossplane {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ConfigurationSpecCrossplane#version
   */
  readonly version: string;

}

/**
 * Dependency is a dependency on another package. One of Provider or Configuration may be supplied.
 *
 * @schema ConfigurationSpecDependsOn
 */
export interface ConfigurationSpecDependsOn {
  /**
   * Configuration is the name of a Configuration package image.
   *
   * @schema ConfigurationSpecDependsOn#configuration
   */
  readonly configuration?: string;

  /**
   * Provider is the name of a Provider package image.
   *
   * @schema ConfigurationSpecDependsOn#provider
   */
  readonly provider?: string;

  /**
   * Version is the semantic version constraints of the dependency image.
   *
   * @schema ConfigurationSpecDependsOn#version
   */
  readonly version: string;

}

