// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * An IAMRole is a managed resource that represents an AWS IAM Role.
 *
 * @schema IAMRole
 */
export class IamRole extends ApiObject {
  /**
   * Defines a "IAMRole" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamRoleProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMRole',
      apiVersion: 'identity.aws.crossplane.io/v1beta1',
    });
  }
}

/**
 * An IAMAccessKey is a managed resource that represents an the Access Key for an AWS IAM User.
 *
 * @schema IAMAccessKey
 */
export class IamAccessKey extends ApiObject {
  /**
   * Defines a "IAMAccessKey" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamAccessKeyProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMAccessKey',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMGroup is a managed resource that represents an AWS IAM IAMGroup. An IAMUser is a managed resource that represents an AWS IAM IAMUser.
 *
 * @schema IAMGroup
 */
export class IamGroup extends ApiObject {
  /**
   * Defines a "IAMGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamGroupProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMGroup',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMGroupPolicyAttachment is a managed resource that represents an AWS IAM Group policy attachment.
 *
 * @schema IAMGroupPolicyAttachment
 */
export class IamGroupPolicyAttachment extends ApiObject {
  /**
   * Defines a "IAMGroupPolicyAttachment" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamGroupPolicyAttachmentProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMGroupPolicyAttachment',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMUserPolicyAttachment is a managed resource that represents an AWS IAM User policy attachment.
 *
 * @schema IAMUserPolicyAttachment
 */
export class IamUserPolicyAttachment extends ApiObject {
  /**
   * Defines a "IAMUserPolicyAttachment" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamUserPolicyAttachmentProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMUserPolicyAttachment',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMUser is a managed resource that represents an AWS IAM IAMUser.
 *
 * @schema IAMUser
 */
export class IamUser extends ApiObject {
  /**
   * Defines a "IAMUser" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamUserProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMUser',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMGroupUserMembership is a managed resource that represents an AWS IAM User group membership.
 *
 * @schema IAMGroupUserMembership
 */
export class IamGroupUserMembership extends ApiObject {
  /**
   * Defines a "IAMGroupUserMembership" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamGroupUserMembershipProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMGroupUserMembership',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMPolicy is a managed resource that represents an AWS IAM IAMPolicy.
 *
 * @schema IAMPolicy
 */
export class IamPolicy extends ApiObject {
  /**
   * Defines a "IAMPolicy" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamPolicyProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMPolicy',
      apiVersion: 'identity.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An IAMRolePolicyAttachment is a managed resource that represents an AWS IAM Role policy attachment.
 *
 * @schema IAMRolePolicyAttachment
 */
export class IamRolePolicyAttachment extends ApiObject {
  /**
   * Defines a "IAMRolePolicyAttachment" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IamRolePolicyAttachmentProps) {
    super(scope, id, {
      ...props,
      kind: 'IAMRolePolicyAttachment',
      apiVersion: 'identity.aws.crossplane.io/v1beta1',
    });
  }
}

/**
 * An IAMRole is a managed resource that represents an AWS IAM Role.
 *
 * @schema IAMRole
 */
export interface IamRoleProps {
  /**
   * @schema IAMRole#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMRoleSpec defines the desired state of an IAMRole.
   *
   * @schema IAMRole#spec
   */
  readonly spec: IamRoleSpec;

}

/**
 * An IAMAccessKey is a managed resource that represents an the Access Key for an AWS IAM User.
 *
 * @schema IAMAccessKey
 */
export interface IamAccessKeyProps {
  /**
   * @schema IAMAccessKey#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMAccessKeySpec defines the desired state of an IAM Access Key.
   *
   * @schema IAMAccessKey#spec
   */
  readonly spec: IamAccessKeySpec;

}

/**
 * An IAMGroup is a managed resource that represents an AWS IAM IAMGroup. An IAMUser is a managed resource that represents an AWS IAM IAMUser.
 *
 * @schema IAMGroup
 */
export interface IamGroupProps {
  /**
   * @schema IAMGroup#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMGroupSpec defines the desired state of an IAM Group.
   *
   * @schema IAMGroup#spec
   */
  readonly spec: IamGroupSpec;

}

/**
 * An IAMGroupPolicyAttachment is a managed resource that represents an AWS IAM Group policy attachment.
 *
 * @schema IAMGroupPolicyAttachment
 */
export interface IamGroupPolicyAttachmentProps {
  /**
   * @schema IAMGroupPolicyAttachment#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMGroupPolicyAttachmentSpec defines the desired state of an IAMGroupPolicyAttachment.
   *
   * @schema IAMGroupPolicyAttachment#spec
   */
  readonly spec: IamGroupPolicyAttachmentSpec;

}

/**
 * An IAMUserPolicyAttachment is a managed resource that represents an AWS IAM User policy attachment.
 *
 * @schema IAMUserPolicyAttachment
 */
export interface IamUserPolicyAttachmentProps {
  /**
   * @schema IAMUserPolicyAttachment#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMUserPolicyAttachmentSpec defines the desired state of an IAMUserPolicyAttachment.
   *
   * @schema IAMUserPolicyAttachment#spec
   */
  readonly spec: IamUserPolicyAttachmentSpec;

}

/**
 * An IAMUser is a managed resource that represents an AWS IAM IAMUser.
 *
 * @schema IAMUser
 */
export interface IamUserProps {
  /**
   * @schema IAMUser#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMUserSpec defines the desired state of an IAM User.
   *
   * @schema IAMUser#spec
   */
  readonly spec: IamUserSpec;

}

/**
 * An IAMGroupUserMembership is a managed resource that represents an AWS IAM User group membership.
 *
 * @schema IAMGroupUserMembership
 */
export interface IamGroupUserMembershipProps {
  /**
   * @schema IAMGroupUserMembership#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMGroupUserMembershipSpec defines the desired state of an IAMGroupUserMembership.
   *
   * @schema IAMGroupUserMembership#spec
   */
  readonly spec: IamGroupUserMembershipSpec;

}

/**
 * An IAMPolicy is a managed resource that represents an AWS IAM IAMPolicy.
 *
 * @schema IAMPolicy
 */
export interface IamPolicyProps {
  /**
   * @schema IAMPolicy#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMPolicySpec defines the desired state of an IAMPolicy.
   *
   * @schema IAMPolicy#spec
   */
  readonly spec: IamPolicySpec;

}

/**
 * An IAMRolePolicyAttachment is a managed resource that represents an AWS IAM Role policy attachment.
 *
 * @schema IAMRolePolicyAttachment
 */
export interface IamRolePolicyAttachmentProps {
  /**
   * @schema IAMRolePolicyAttachment#metadata
   */
  readonly metadata?: any;

  /**
   * An IAMRolePolicyAttachmentSpec defines the desired state of an IAMRolePolicyAttachment.
   *
   * @schema IAMRolePolicyAttachment#spec
   */
  readonly spec: IamRolePolicyAttachmentSpec;

}

/**
 * An IAMRoleSpec defines the desired state of an IAMRole.
 *
 * @schema IamRoleSpec
 */
export interface IamRoleSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamRoleSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamRoleSpecDeletionPolicy;

  /**
   * IAMRoleParameters define the desired state of an AWS IAM Role.
   *
   * @schema IamRoleSpec#forProvider
   */
  readonly forProvider: IamRoleSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamRoleSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamRoleSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamRoleSpec#providerRef
   */
  readonly providerRef?: IamRoleSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamRoleSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamRoleSpecWriteConnectionSecretToRef;

}

/**
 * An IAMAccessKeySpec defines the desired state of an IAM Access Key.
 *
 * @schema IamAccessKeySpec
 */
export interface IamAccessKeySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamAccessKeySpec#deletionPolicy
   */
  readonly deletionPolicy?: IamAccessKeySpecDeletionPolicy;

  /**
   * IAMAccessKeyParameters define the desired state of an AWS IAM Access Key.
   *
   * @schema IamAccessKeySpec#forProvider
   */
  readonly forProvider: IamAccessKeySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamAccessKeySpec#providerConfigRef
   */
  readonly providerConfigRef?: IamAccessKeySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamAccessKeySpec#providerRef
   */
  readonly providerRef?: IamAccessKeySpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamAccessKeySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamAccessKeySpecWriteConnectionSecretToRef;

}

/**
 * An IAMGroupSpec defines the desired state of an IAM Group.
 *
 * @schema IamGroupSpec
 */
export interface IamGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamGroupSpecDeletionPolicy;

  /**
   * IAMGroupParameters define the desired state of an AWS IAM Group.
   *
   * @schema IamGroupSpec#forProvider
   */
  readonly forProvider?: IamGroupSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamGroupSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamGroupSpec#providerRef
   */
  readonly providerRef?: IamGroupSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamGroupSpecWriteConnectionSecretToRef;

}

/**
 * An IAMGroupPolicyAttachmentSpec defines the desired state of an IAMGroupPolicyAttachment.
 *
 * @schema IamGroupPolicyAttachmentSpec
 */
export interface IamGroupPolicyAttachmentSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamGroupPolicyAttachmentSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamGroupPolicyAttachmentSpecDeletionPolicy;

  /**
   * IAMGroupPolicyAttachmentParameters define the desired state of an AWS IAMGroupPolicyAttachment.
   *
   * @schema IamGroupPolicyAttachmentSpec#forProvider
   */
  readonly forProvider: IamGroupPolicyAttachmentSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamGroupPolicyAttachmentSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamGroupPolicyAttachmentSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamGroupPolicyAttachmentSpec#providerRef
   */
  readonly providerRef?: IamGroupPolicyAttachmentSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamGroupPolicyAttachmentSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamGroupPolicyAttachmentSpecWriteConnectionSecretToRef;

}

/**
 * An IAMUserPolicyAttachmentSpec defines the desired state of an IAMUserPolicyAttachment.
 *
 * @schema IamUserPolicyAttachmentSpec
 */
export interface IamUserPolicyAttachmentSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamUserPolicyAttachmentSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamUserPolicyAttachmentSpecDeletionPolicy;

  /**
   * IAMUserPolicyAttachmentParameters define the desired state of an AWS IAMUserPolicyAttachment.
   *
   * @schema IamUserPolicyAttachmentSpec#forProvider
   */
  readonly forProvider: IamUserPolicyAttachmentSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamUserPolicyAttachmentSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamUserPolicyAttachmentSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamUserPolicyAttachmentSpec#providerRef
   */
  readonly providerRef?: IamUserPolicyAttachmentSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamUserPolicyAttachmentSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamUserPolicyAttachmentSpecWriteConnectionSecretToRef;

}

/**
 * An IAMUserSpec defines the desired state of an IAM User.
 *
 * @schema IamUserSpec
 */
export interface IamUserSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamUserSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamUserSpecDeletionPolicy;

  /**
   * IAMUserParameters define the desired state of an AWS IAM User.
   *
   * @schema IamUserSpec#forProvider
   */
  readonly forProvider: IamUserSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamUserSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamUserSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamUserSpec#providerRef
   */
  readonly providerRef?: IamUserSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamUserSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamUserSpecWriteConnectionSecretToRef;

}

/**
 * An IAMGroupUserMembershipSpec defines the desired state of an IAMGroupUserMembership.
 *
 * @schema IamGroupUserMembershipSpec
 */
export interface IamGroupUserMembershipSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamGroupUserMembershipSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamGroupUserMembershipSpecDeletionPolicy;

  /**
   * IAMGroupUserMembershipParameters define the desired state of an AWS IAMGroupUserMembership.
   *
   * @schema IamGroupUserMembershipSpec#forProvider
   */
  readonly forProvider: IamGroupUserMembershipSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamGroupUserMembershipSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamGroupUserMembershipSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamGroupUserMembershipSpec#providerRef
   */
  readonly providerRef?: IamGroupUserMembershipSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamGroupUserMembershipSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamGroupUserMembershipSpecWriteConnectionSecretToRef;

}

/**
 * An IAMPolicySpec defines the desired state of an IAMPolicy.
 *
 * @schema IamPolicySpec
 */
export interface IamPolicySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamPolicySpec#deletionPolicy
   */
  readonly deletionPolicy?: IamPolicySpecDeletionPolicy;

  /**
   * IAMPolicyParameters define the desired state of an AWS IAM Policy.
   *
   * @schema IamPolicySpec#forProvider
   */
  readonly forProvider: IamPolicySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamPolicySpec#providerConfigRef
   */
  readonly providerConfigRef?: IamPolicySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamPolicySpec#providerRef
   */
  readonly providerRef?: IamPolicySpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamPolicySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamPolicySpecWriteConnectionSecretToRef;

}

/**
 * An IAMRolePolicyAttachmentSpec defines the desired state of an IAMRolePolicyAttachment.
 *
 * @schema IamRolePolicyAttachmentSpec
 */
export interface IamRolePolicyAttachmentSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IamRolePolicyAttachmentSpec#deletionPolicy
   */
  readonly deletionPolicy?: IamRolePolicyAttachmentSpecDeletionPolicy;

  /**
   * IAMRolePolicyAttachmentParameters define the desired state of an AWS IAM Role policy attachment.
   *
   * @schema IamRolePolicyAttachmentSpec#forProvider
   */
  readonly forProvider: IamRolePolicyAttachmentSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IamRolePolicyAttachmentSpec#providerConfigRef
   */
  readonly providerConfigRef?: IamRolePolicyAttachmentSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IamRolePolicyAttachmentSpec#providerRef
   */
  readonly providerRef?: IamRolePolicyAttachmentSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IamRolePolicyAttachmentSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IamRolePolicyAttachmentSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamRoleSpecDeletionPolicy
 */
export enum IamRoleSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMRoleParameters define the desired state of an AWS IAM Role.
 *
 * @schema IamRoleSpecForProvider
 */
export interface IamRoleSpecForProvider {
  /**
   * AssumeRolePolicyDocument is the the trust relationship policy document that grants an entity permission to assume the role.
   *
   * @schema IamRoleSpecForProvider#assumeRolePolicyDocument
   */
  readonly assumeRolePolicyDocument: string;

  /**
   * Description is a description of the role.
   *
   * @schema IamRoleSpecForProvider#description
   */
  readonly description?: string;

  /**
   * MaxSessionDuration is the duration (in seconds) that you want to set for the specified role. The default maximum of one hour is applied. This setting can have a value from 1 hour to 12 hours. Default: 3600
   *
   * @schema IamRoleSpecForProvider#maxSessionDuration
   */
  readonly maxSessionDuration?: number;

  /**
   * Path is the path to the role. Default: /
   *
   * @schema IamRoleSpecForProvider#path
   */
  readonly path?: string;

  /**
   * PermissionsBoundary is the ARN of the policy that is used to set the permissions boundary for the role.
   *
   * @schema IamRoleSpecForProvider#permissionsBoundary
   */
  readonly permissionsBoundary?: string;

  /**
   * Tags. For more information about tagging, see Tagging IAM Identities (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
   *
   * @schema IamRoleSpecForProvider#tags
   */
  readonly tags?: IamRoleSpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamRoleSpecProviderConfigRef
 */
export interface IamRoleSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamRoleSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamRoleSpecProviderRef
 */
export interface IamRoleSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamRoleSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamRoleSpecWriteConnectionSecretToRef
 */
export interface IamRoleSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamRoleSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamRoleSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamAccessKeySpecDeletionPolicy
 */
export enum IamAccessKeySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMAccessKeyParameters define the desired state of an AWS IAM Access Key.
 *
 * @schema IamAccessKeySpecForProvider
 */
export interface IamAccessKeySpecForProvider {
  /**
   * The current status of this IAMAccessKey on the AWS Must be either Active or Inactive.
   *
   * @schema IamAccessKeySpecForProvider#accessKeyStatus
   */
  readonly accessKeyStatus?: IamAccessKeySpecForProviderAccessKeyStatus;

  /**
   * IAMUsername contains the name of the IAMUser.
   *
   * @schema IamAccessKeySpecForProvider#userName
   */
  readonly userName?: string;

  /**
   * IAMUsernameRef references to an IAMUser to retrieve its userName
   *
   * @schema IamAccessKeySpecForProvider#userNameRef
   */
  readonly userNameRef?: IamAccessKeySpecForProviderUserNameRef;

  /**
   * IAMUsernameSelector selects a reference to an IAMUser to retrieve its userName
   *
   * @schema IamAccessKeySpecForProvider#userNameSelector
   */
  readonly userNameSelector?: IamAccessKeySpecForProviderUserNameSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamAccessKeySpecProviderConfigRef
 */
export interface IamAccessKeySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamAccessKeySpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamAccessKeySpecProviderRef
 */
export interface IamAccessKeySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamAccessKeySpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamAccessKeySpecWriteConnectionSecretToRef
 */
export interface IamAccessKeySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamAccessKeySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamAccessKeySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamGroupSpecDeletionPolicy
 */
export enum IamGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMGroupParameters define the desired state of an AWS IAM Group.
 *
 * @schema IamGroupSpecForProvider
 */
export interface IamGroupSpecForProvider {
  /**
   * The path for the group name.
   *
   * @schema IamGroupSpecForProvider#path
   */
  readonly path?: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamGroupSpecProviderConfigRef
 */
export interface IamGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamGroupSpecProviderRef
 */
export interface IamGroupSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamGroupSpecWriteConnectionSecretToRef
 */
export interface IamGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamGroupPolicyAttachmentSpecDeletionPolicy
 */
export enum IamGroupPolicyAttachmentSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMGroupPolicyAttachmentParameters define the desired state of an AWS IAMGroupPolicyAttachment.
 *
 * @schema IamGroupPolicyAttachmentSpecForProvider
 */
export interface IamGroupPolicyAttachmentSpecForProvider {
  /**
   * GroupName presents the name of the IAMGroup.
   *
   * @schema IamGroupPolicyAttachmentSpecForProvider#groupName
   */
  readonly groupName?: string;

  /**
   * GroupNameRef references to an IAMGroup to retrieve its groupName
   *
   * @schema IamGroupPolicyAttachmentSpecForProvider#groupNameRef
   */
  readonly groupNameRef?: IamGroupPolicyAttachmentSpecForProviderGroupNameRef;

  /**
   * GroupNameSelector selects a reference to an IAMGroup to retrieve its groupName
   *
   * @schema IamGroupPolicyAttachmentSpecForProvider#groupNameSelector
   */
  readonly groupNameSelector?: IamGroupPolicyAttachmentSpecForProviderGroupNameSelector;

  /**
   * PolicyARN is the Amazon Resource Name (ARN) of the IAM policy you want to attach.
   *
   * @schema IamGroupPolicyAttachmentSpecForProvider#policyArn
   */
  readonly policyArn?: string;

  /**
   * PolicyARNRef references an IAMPolicy to retrieve its Policy ARN.
   *
   * @schema IamGroupPolicyAttachmentSpecForProvider#policyArnRef
   */
  readonly policyArnRef?: IamGroupPolicyAttachmentSpecForProviderPolicyArnRef;

  /**
   * PolicyARNSelector selects a reference to an IAMPolicy to retrieve its Policy ARN
   *
   * @schema IamGroupPolicyAttachmentSpecForProvider#policyArnSelector
   */
  readonly policyArnSelector?: IamGroupPolicyAttachmentSpecForProviderPolicyArnSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamGroupPolicyAttachmentSpecProviderConfigRef
 */
export interface IamGroupPolicyAttachmentSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupPolicyAttachmentSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamGroupPolicyAttachmentSpecProviderRef
 */
export interface IamGroupPolicyAttachmentSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupPolicyAttachmentSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamGroupPolicyAttachmentSpecWriteConnectionSecretToRef
 */
export interface IamGroupPolicyAttachmentSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamGroupPolicyAttachmentSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamGroupPolicyAttachmentSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamUserPolicyAttachmentSpecDeletionPolicy
 */
export enum IamUserPolicyAttachmentSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMUserPolicyAttachmentParameters define the desired state of an AWS IAMUserPolicyAttachment.
 *
 * @schema IamUserPolicyAttachmentSpecForProvider
 */
export interface IamUserPolicyAttachmentSpecForProvider {
  /**
   * PolicyARN is the Amazon Resource Name (ARN) of the IAM policy you want to attach.
   *
   * @schema IamUserPolicyAttachmentSpecForProvider#policyArn
   */
  readonly policyArn?: string;

  /**
   * PolicyARNRef references an IAMPolicy to retrieve its Policy ARN.
   *
   * @schema IamUserPolicyAttachmentSpecForProvider#policyArnRef
   */
  readonly policyArnRef?: IamUserPolicyAttachmentSpecForProviderPolicyArnRef;

  /**
   * PolicyARNSelector selects a reference to an IAMPolicy to retrieve its Policy ARN
   *
   * @schema IamUserPolicyAttachmentSpecForProvider#policyArnSelector
   */
  readonly policyArnSelector?: IamUserPolicyAttachmentSpecForProviderPolicyArnSelector;

  /**
   * UserName presents the name of the IAMUser.
   *
   * @schema IamUserPolicyAttachmentSpecForProvider#userName
   */
  readonly userName?: string;

  /**
   * UserNameRef references to an IAMUser to retrieve its userName
   *
   * @schema IamUserPolicyAttachmentSpecForProvider#userNameRef
   */
  readonly userNameRef?: IamUserPolicyAttachmentSpecForProviderUserNameRef;

  /**
   * UserNameSelector selects a reference to an IAMUser to retrieve its userName
   *
   * @schema IamUserPolicyAttachmentSpecForProvider#userNameSelector
   */
  readonly userNameSelector?: IamUserPolicyAttachmentSpecForProviderUserNameSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamUserPolicyAttachmentSpecProviderConfigRef
 */
export interface IamUserPolicyAttachmentSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamUserPolicyAttachmentSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamUserPolicyAttachmentSpecProviderRef
 */
export interface IamUserPolicyAttachmentSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamUserPolicyAttachmentSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamUserPolicyAttachmentSpecWriteConnectionSecretToRef
 */
export interface IamUserPolicyAttachmentSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamUserPolicyAttachmentSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamUserPolicyAttachmentSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamUserSpecDeletionPolicy
 */
export enum IamUserSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMUserParameters define the desired state of an AWS IAM User.
 *
 * @schema IamUserSpecForProvider
 */
export interface IamUserSpecForProvider {
  /**
   * The path for the user name.
   *
   * @schema IamUserSpecForProvider#path
   */
  readonly path?: string;

  /**
   * The ARN of the policy that is used to set the permissions boundary for the user.
   *
   * @schema IamUserSpecForProvider#permissionsBoundary
   */
  readonly permissionsBoundary?: string;

  /**
   * A list of tags that you want to attach to the newly created user.
   *
   * @schema IamUserSpecForProvider#tags
   */
  readonly tags?: IamUserSpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamUserSpecProviderConfigRef
 */
export interface IamUserSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamUserSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamUserSpecProviderRef
 */
export interface IamUserSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamUserSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamUserSpecWriteConnectionSecretToRef
 */
export interface IamUserSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamUserSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamUserSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamGroupUserMembershipSpecDeletionPolicy
 */
export enum IamGroupUserMembershipSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMGroupUserMembershipParameters define the desired state of an AWS IAMGroupUserMembership.
 *
 * @schema IamGroupUserMembershipSpecForProvider
 */
export interface IamGroupUserMembershipSpecForProvider {
  /**
   * GroupName is the Amazon IAM Group Name (IAMGroup) of the IAM group you want to add User to.
   *
   * @schema IamGroupUserMembershipSpecForProvider#groupName
   */
  readonly groupName?: string;

  /**
   * GroupNameRef references to an IAMGroup to retrieve its groupName
   *
   * @schema IamGroupUserMembershipSpecForProvider#groupNameRef
   */
  readonly groupNameRef?: IamGroupUserMembershipSpecForProviderGroupNameRef;

  /**
   * GroupNameSelector selects a reference to an IAMGroup to retrieve its groupName
   *
   * @schema IamGroupUserMembershipSpecForProvider#groupNameSelector
   */
  readonly groupNameSelector?: IamGroupUserMembershipSpecForProviderGroupNameSelector;

  /**
   * UserName presents the name of the IAMUser.
   *
   * @schema IamGroupUserMembershipSpecForProvider#userName
   */
  readonly userName?: string;

  /**
   * UserNameRef references to an IAMUser to retrieve its userName
   *
   * @schema IamGroupUserMembershipSpecForProvider#userNameRef
   */
  readonly userNameRef?: IamGroupUserMembershipSpecForProviderUserNameRef;

  /**
   * UserNameSelector selects a reference to an IAMUser to retrieve its userName
   *
   * @schema IamGroupUserMembershipSpecForProvider#userNameSelector
   */
  readonly userNameSelector?: IamGroupUserMembershipSpecForProviderUserNameSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamGroupUserMembershipSpecProviderConfigRef
 */
export interface IamGroupUserMembershipSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupUserMembershipSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamGroupUserMembershipSpecProviderRef
 */
export interface IamGroupUserMembershipSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupUserMembershipSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamGroupUserMembershipSpecWriteConnectionSecretToRef
 */
export interface IamGroupUserMembershipSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamGroupUserMembershipSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamGroupUserMembershipSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamPolicySpecDeletionPolicy
 */
export enum IamPolicySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMPolicyParameters define the desired state of an AWS IAM Policy.
 *
 * @schema IamPolicySpecForProvider
 */
export interface IamPolicySpecForProvider {
  /**
   * A description of the policy.
   *
   * @schema IamPolicySpecForProvider#description
   */
  readonly description?: string;

  /**
   * The JSON policy document that is the content for the policy.
   *
   * @schema IamPolicySpecForProvider#document
   */
  readonly document: string;

  /**
   * The name of the policy.
   *
   * @schema IamPolicySpecForProvider#name
   */
  readonly name: string;

  /**
   * The path to the policy.
   *
   * @schema IamPolicySpecForProvider#path
   */
  readonly path?: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamPolicySpecProviderConfigRef
 */
export interface IamPolicySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamPolicySpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamPolicySpecProviderRef
 */
export interface IamPolicySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamPolicySpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamPolicySpecWriteConnectionSecretToRef
 */
export interface IamPolicySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamPolicySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamPolicySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IamRolePolicyAttachmentSpecDeletionPolicy
 */
export enum IamRolePolicyAttachmentSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IAMRolePolicyAttachmentParameters define the desired state of an AWS IAM Role policy attachment.
 *
 * @schema IamRolePolicyAttachmentSpecForProvider
 */
export interface IamRolePolicyAttachmentSpecForProvider {
  /**
   * PolicyARN is the Amazon Resource Name (ARN) of the IAM policy you want to attach.
   *
   * @schema IamRolePolicyAttachmentSpecForProvider#policyArn
   */
  readonly policyArn?: string;

  /**
   * PolicyARNRef references an IAMPolicy to retrieve its Policy ARN.
   *
   * @schema IamRolePolicyAttachmentSpecForProvider#policyArnRef
   */
  readonly policyArnRef?: IamRolePolicyAttachmentSpecForProviderPolicyArnRef;

  /**
   * PolicyARNSelector selects a reference to an IAMPolicy to retrieve its Policy ARN
   *
   * @schema IamRolePolicyAttachmentSpecForProvider#policyArnSelector
   */
  readonly policyArnSelector?: IamRolePolicyAttachmentSpecForProviderPolicyArnSelector;

  /**
   * RoleName presents the name of the IAM role.
   *
   * @schema IamRolePolicyAttachmentSpecForProvider#roleName
   */
  readonly roleName?: string;

  /**
   * RoleNameRef references an IAMRole to retrieve its Name
   *
   * @schema IamRolePolicyAttachmentSpecForProvider#roleNameRef
   */
  readonly roleNameRef?: IamRolePolicyAttachmentSpecForProviderRoleNameRef;

  /**
   * RoleNameSelector selects a reference to an IAMRole to retrieve its Name
   *
   * @schema IamRolePolicyAttachmentSpecForProvider#roleNameSelector
   */
  readonly roleNameSelector?: IamRolePolicyAttachmentSpecForProviderRoleNameSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IamRolePolicyAttachmentSpecProviderConfigRef
 */
export interface IamRolePolicyAttachmentSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamRolePolicyAttachmentSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IamRolePolicyAttachmentSpecProviderRef
 */
export interface IamRolePolicyAttachmentSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamRolePolicyAttachmentSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IamRolePolicyAttachmentSpecWriteConnectionSecretToRef
 */
export interface IamRolePolicyAttachmentSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IamRolePolicyAttachmentSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IamRolePolicyAttachmentSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Tag represents user-provided metadata that can be associated with a IAM role. For more information about tagging, see Tagging IAM Identities (https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html) in the IAM User Guide.
 *
 * @schema IamRoleSpecForProviderTags
 */
export interface IamRoleSpecForProviderTags {
  /**
   * The key name that can be used to look up or retrieve the associated value. For example, Department or Cost Center are common choices.
   *
   * @schema IamRoleSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * The value associated with this tag. For example, tags with a key name of Department could have values such as Human Resources, Accounting, and Support. Tags with a key name of Cost Center might have values that consist of the number associated with the different cost centers in your company. Typically, many resources have tags with the same key name but with different values. 
 AWS always interprets the tag Value as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.
   *
   * @schema IamRoleSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * The current status of this IAMAccessKey on the AWS Must be either Active or Inactive.
 *
 * @schema IamAccessKeySpecForProviderAccessKeyStatus
 */
export enum IamAccessKeySpecForProviderAccessKeyStatus {
  /** Active */
  ACTIVE = "Active",
  /** Inactive */
  INACTIVE = "Inactive",
}

/**
 * IAMUsernameRef references to an IAMUser to retrieve its userName
 *
 * @schema IamAccessKeySpecForProviderUserNameRef
 */
export interface IamAccessKeySpecForProviderUserNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamAccessKeySpecForProviderUserNameRef#name
   */
  readonly name: string;

}

/**
 * IAMUsernameSelector selects a reference to an IAMUser to retrieve its userName
 *
 * @schema IamAccessKeySpecForProviderUserNameSelector
 */
export interface IamAccessKeySpecForProviderUserNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamAccessKeySpecForProviderUserNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamAccessKeySpecForProviderUserNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * GroupNameRef references to an IAMGroup to retrieve its groupName
 *
 * @schema IamGroupPolicyAttachmentSpecForProviderGroupNameRef
 */
export interface IamGroupPolicyAttachmentSpecForProviderGroupNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupPolicyAttachmentSpecForProviderGroupNameRef#name
   */
  readonly name: string;

}

/**
 * GroupNameSelector selects a reference to an IAMGroup to retrieve its groupName
 *
 * @schema IamGroupPolicyAttachmentSpecForProviderGroupNameSelector
 */
export interface IamGroupPolicyAttachmentSpecForProviderGroupNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamGroupPolicyAttachmentSpecForProviderGroupNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamGroupPolicyAttachmentSpecForProviderGroupNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * PolicyARNRef references an IAMPolicy to retrieve its Policy ARN.
 *
 * @schema IamGroupPolicyAttachmentSpecForProviderPolicyArnRef
 */
export interface IamGroupPolicyAttachmentSpecForProviderPolicyArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupPolicyAttachmentSpecForProviderPolicyArnRef#name
   */
  readonly name: string;

}

/**
 * PolicyARNSelector selects a reference to an IAMPolicy to retrieve its Policy ARN
 *
 * @schema IamGroupPolicyAttachmentSpecForProviderPolicyArnSelector
 */
export interface IamGroupPolicyAttachmentSpecForProviderPolicyArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamGroupPolicyAttachmentSpecForProviderPolicyArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamGroupPolicyAttachmentSpecForProviderPolicyArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * PolicyARNRef references an IAMPolicy to retrieve its Policy ARN.
 *
 * @schema IamUserPolicyAttachmentSpecForProviderPolicyArnRef
 */
export interface IamUserPolicyAttachmentSpecForProviderPolicyArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamUserPolicyAttachmentSpecForProviderPolicyArnRef#name
   */
  readonly name: string;

}

/**
 * PolicyARNSelector selects a reference to an IAMPolicy to retrieve its Policy ARN
 *
 * @schema IamUserPolicyAttachmentSpecForProviderPolicyArnSelector
 */
export interface IamUserPolicyAttachmentSpecForProviderPolicyArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamUserPolicyAttachmentSpecForProviderPolicyArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamUserPolicyAttachmentSpecForProviderPolicyArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * UserNameRef references to an IAMUser to retrieve its userName
 *
 * @schema IamUserPolicyAttachmentSpecForProviderUserNameRef
 */
export interface IamUserPolicyAttachmentSpecForProviderUserNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamUserPolicyAttachmentSpecForProviderUserNameRef#name
   */
  readonly name: string;

}

/**
 * UserNameSelector selects a reference to an IAMUser to retrieve its userName
 *
 * @schema IamUserPolicyAttachmentSpecForProviderUserNameSelector
 */
export interface IamUserPolicyAttachmentSpecForProviderUserNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamUserPolicyAttachmentSpecForProviderUserNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamUserPolicyAttachmentSpecForProviderUserNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Tag represents a tag attached to a v1alpha1.User
 *
 * @schema IamUserSpecForProviderTags
 */
export interface IamUserSpecForProviderTags {
  /**
   * The key name that can be used to look up or retrieve the associated value.
   *
   * @schema IamUserSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * The value associated with this tag.
   *
   * @schema IamUserSpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * GroupNameRef references to an IAMGroup to retrieve its groupName
 *
 * @schema IamGroupUserMembershipSpecForProviderGroupNameRef
 */
export interface IamGroupUserMembershipSpecForProviderGroupNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupUserMembershipSpecForProviderGroupNameRef#name
   */
  readonly name: string;

}

/**
 * GroupNameSelector selects a reference to an IAMGroup to retrieve its groupName
 *
 * @schema IamGroupUserMembershipSpecForProviderGroupNameSelector
 */
export interface IamGroupUserMembershipSpecForProviderGroupNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamGroupUserMembershipSpecForProviderGroupNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamGroupUserMembershipSpecForProviderGroupNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * UserNameRef references to an IAMUser to retrieve its userName
 *
 * @schema IamGroupUserMembershipSpecForProviderUserNameRef
 */
export interface IamGroupUserMembershipSpecForProviderUserNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamGroupUserMembershipSpecForProviderUserNameRef#name
   */
  readonly name: string;

}

/**
 * UserNameSelector selects a reference to an IAMUser to retrieve its userName
 *
 * @schema IamGroupUserMembershipSpecForProviderUserNameSelector
 */
export interface IamGroupUserMembershipSpecForProviderUserNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamGroupUserMembershipSpecForProviderUserNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamGroupUserMembershipSpecForProviderUserNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * PolicyARNRef references an IAMPolicy to retrieve its Policy ARN.
 *
 * @schema IamRolePolicyAttachmentSpecForProviderPolicyArnRef
 */
export interface IamRolePolicyAttachmentSpecForProviderPolicyArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamRolePolicyAttachmentSpecForProviderPolicyArnRef#name
   */
  readonly name: string;

}

/**
 * PolicyARNSelector selects a reference to an IAMPolicy to retrieve its Policy ARN
 *
 * @schema IamRolePolicyAttachmentSpecForProviderPolicyArnSelector
 */
export interface IamRolePolicyAttachmentSpecForProviderPolicyArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamRolePolicyAttachmentSpecForProviderPolicyArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamRolePolicyAttachmentSpecForProviderPolicyArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * RoleNameRef references an IAMRole to retrieve its Name
 *
 * @schema IamRolePolicyAttachmentSpecForProviderRoleNameRef
 */
export interface IamRolePolicyAttachmentSpecForProviderRoleNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema IamRolePolicyAttachmentSpecForProviderRoleNameRef#name
   */
  readonly name: string;

}

/**
 * RoleNameSelector selects a reference to an IAMRole to retrieve its Name
 *
 * @schema IamRolePolicyAttachmentSpecForProviderRoleNameSelector
 */
export interface IamRolePolicyAttachmentSpecForProviderRoleNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IamRolePolicyAttachmentSpecForProviderRoleNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IamRolePolicyAttachmentSpecForProviderRoleNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

