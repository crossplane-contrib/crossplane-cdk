// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * An BucketPolicy is a managed resource that represents an AWS Bucket policy.
 *
 * @schema BucketPolicy
 */
export class BucketPolicy extends ApiObject {
  /**
   * Defines a "BucketPolicy" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: BucketPolicyOptions) {
    super(scope, name, {
      ...options,
      kind: 'BucketPolicy',
      apiVersion: 's3.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * An BucketPolicy is a managed resource that represents an AWS Bucket policy.
 *
 * @schema BucketPolicy
 */
export interface BucketPolicyOptions {
  /**
   * @schema BucketPolicy#metadata
   */
  readonly metadata?: any;

  /**
   * An BucketPolicySpec defines the desired state of an BucketPolicy.
   *
   * @schema BucketPolicy#spec
   */
  readonly spec: BucketPolicySpec;

}

/**
 * An BucketPolicySpec defines the desired state of an BucketPolicy.
 *
 * @schema BucketPolicySpec
 */
export interface BucketPolicySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema BucketPolicySpec#deletionPolicy
   */
  readonly deletionPolicy?: BucketPolicySpecDeletionPolicy;

  /**
   * BucketPolicyParameters define the desired state of an AWS BucketPolicy.
   *
   * @schema BucketPolicySpec#forProvider
   */
  readonly forProvider: BucketPolicySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema BucketPolicySpec#providerConfigRef
   */
  readonly providerConfigRef?: BucketPolicySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema BucketPolicySpec#providerRef
   */
  readonly providerRef?: BucketPolicySpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema BucketPolicySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: BucketPolicySpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema BucketPolicySpecDeletionPolicy
 */
export enum BucketPolicySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = 'Orphan',
  /** Delete */
  DELETE = 'Delete',
}

/**
 * BucketPolicyParameters define the desired state of an AWS BucketPolicy.
 *
 * @schema BucketPolicySpecForProvider
 */
export interface BucketPolicySpecForProvider {
  /**
   * BucketName presents the name of the bucket.
   *
   * @schema BucketPolicySpecForProvider#bucketName
   */
  readonly bucketName?: string;

  /**
   * BucketNameRef references to an S3Bucket to retrieve its bucketName
   *
   * @schema BucketPolicySpecForProvider#bucketNameRef
   */
  readonly bucketNameRef?: BucketPolicySpecForProviderBucketNameRef;

  /**
   * BucketNameSelector selects a reference to an S3Bucket to retrieve its bucketName
   *
   * @schema BucketPolicySpecForProvider#bucketNameSelector
   */
  readonly bucketNameSelector?: BucketPolicySpecForProviderBucketNameSelector;

  /**
   * This is the policy's optional identifier
   *
   * @schema BucketPolicySpecForProvider#id
   */
  readonly id?: string;

  /**
   * Region is where the Bucket referenced by this BucketPolicy resides.
   *
   * @schema BucketPolicySpecForProvider#region
   */
  readonly region: string;

  /**
   * This is the list of statement this policy applies
   *
   * @schema BucketPolicySpecForProvider#statement
   */
  readonly statement: BucketPolicySpecForProviderStatement[];

  /**
   * UserName presents the name of the IAM user this BucketPolicy is concerned with.
   *
   * @schema BucketPolicySpecForProvider#userName
   */
  readonly userName?: string;

  /**
   * UserNameRef references to an S3Bucket to retrieve its userName
   *
   * @schema BucketPolicySpecForProvider#userNameRef
   */
  readonly userNameRef?: BucketPolicySpecForProviderUserNameRef;

  /**
   * UserNameSelector selects a reference to an S3Bucket to retrieve its userName
   *
   * @schema BucketPolicySpecForProvider#userNameSelector
   */
  readonly userNameSelector?: BucketPolicySpecForProviderUserNameSelector;

  /**
   * This is the current IAM policy version
   *
   * @schema BucketPolicySpecForProvider#version
   */
  readonly version: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema BucketPolicySpecProviderConfigRef
 */
export interface BucketPolicySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema BucketPolicySpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema BucketPolicySpecProviderRef
 */
export interface BucketPolicySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema BucketPolicySpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema BucketPolicySpecWriteConnectionSecretToRef
 */
export interface BucketPolicySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema BucketPolicySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema BucketPolicySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * BucketNameRef references to an S3Bucket to retrieve its bucketName
 *
 * @schema BucketPolicySpecForProviderBucketNameRef
 */
export interface BucketPolicySpecForProviderBucketNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema BucketPolicySpecForProviderBucketNameRef#name
   */
  readonly name: string;

}

/**
 * BucketNameSelector selects a reference to an S3Bucket to retrieve its bucketName
 *
 * @schema BucketPolicySpecForProviderBucketNameSelector
 */
export interface BucketPolicySpecForProviderBucketNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema BucketPolicySpecForProviderBucketNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema BucketPolicySpecForProviderBucketNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * BucketPolicyStatement defines an individual statement within the BucketPolicyBody
 *
 * @schema BucketPolicySpecForProviderStatement
 */
export interface BucketPolicySpecForProviderStatement {
  /**
   * Each element of the PolicyAction array describes the specific action or actions that will be allowed or denied with this PolicyStatement.
   *
   * @schema BucketPolicySpecForProviderStatement#action
   */
  readonly action?: string[];

  /**
   * The effect is required and specifies whether the statement results in an allow or an explicit deny. Valid values for Effect are Allow and Deny.
   *
   * @schema BucketPolicySpecForProviderStatement#effect
   */
  readonly effect: string;

  /**
   * This flag indicates that this policy should apply to the IAMUsername that was either passed in or created for this bucket, this user will added to the action array
   *
   * @schema BucketPolicySpecForProviderStatement#effectIAMUser
   */
  readonly effectIAMUser?: boolean;

  /**
   * Each element of the NotPolicyAction array will allow the property to match all but the listed actions.
   *
   * @schema BucketPolicySpecForProviderStatement#notAction
   */
  readonly notAction?: string[];

  /**
   * Used with the S3 policy to specify the users which are not included in this policy
   *
   * @schema BucketPolicySpecForProviderStatement#notPrincipal
   */
  readonly notPrincipal?: BucketPolicySpecForProviderStatementNotPrincipal;

  /**
   * This will explicitly match all resource paths except the ones specified in this array
   *
   * @schema BucketPolicySpecForProviderStatement#notResource
   */
  readonly notResource?: string[];

  /**
   * Used with the S3 policy to specify the principal that is allowed or denied access to a resource.
   *
   * @schema BucketPolicySpecForProviderStatement#principal
   */
  readonly principal?: BucketPolicySpecForProviderStatementPrincipal;

  /**
   * The paths on which this resource will apply
   *
   * @schema BucketPolicySpecForProviderStatement#resource
   */
  readonly resource?: string[];

  /**
   * Optional identifier for this statement, must be unique within the policy if provided.
   *
   * @schema BucketPolicySpecForProviderStatement#sid
   */
  readonly sid?: string;

}

/**
 * UserNameRef references to an S3Bucket to retrieve its userName
 *
 * @schema BucketPolicySpecForProviderUserNameRef
 */
export interface BucketPolicySpecForProviderUserNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema BucketPolicySpecForProviderUserNameRef#name
   */
  readonly name: string;

}

/**
 * UserNameSelector selects a reference to an S3Bucket to retrieve its userName
 *
 * @schema BucketPolicySpecForProviderUserNameSelector
 */
export interface BucketPolicySpecForProviderUserNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema BucketPolicySpecForProviderUserNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema BucketPolicySpecForProviderUserNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Used with the S3 policy to specify the users which are not included in this policy
 *
 * @schema BucketPolicySpecForProviderStatementNotPrincipal
 */
export interface BucketPolicySpecForProviderStatementNotPrincipal {
  /**
   * This flag indicates if the policy should be made available to all anonymous users.
   *
   * @schema BucketPolicySpecForProviderStatementNotPrincipal#allowAnon
   */
  readonly allowAnon?: boolean;

  /**
   * This list contains the all of the AWS IAM users which are affected by the policy statement
   *
   * @schema BucketPolicySpecForProviderStatementNotPrincipal#aws
   */
  readonly aws?: string[];

}

/**
 * Used with the S3 policy to specify the principal that is allowed or denied access to a resource.
 *
 * @schema BucketPolicySpecForProviderStatementPrincipal
 */
export interface BucketPolicySpecForProviderStatementPrincipal {
  /**
   * This flag indicates if the policy should be made available to all anonymous users.
   *
   * @schema BucketPolicySpecForProviderStatementPrincipal#allowAnon
   */
  readonly allowAnon?: boolean;

  /**
   * This list contains the all of the AWS IAM users which are affected by the policy statement
   *
   * @schema BucketPolicySpecForProviderStatementPrincipal#aws
   */
  readonly aws?: string[];

}

