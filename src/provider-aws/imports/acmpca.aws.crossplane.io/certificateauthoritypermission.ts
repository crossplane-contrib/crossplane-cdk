// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * CertificateAuthorityPermission is a managed resource that represents an AWS CertificateAuthorityPermission Manager.
 *
 * @schema CertificateAuthorityPermission
 */
export class CertificateAuthorityPermission extends ApiObject {
  /**
   * Defines a "CertificateAuthorityPermission" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: CertificateAuthorityPermissionOptions = {}) {
    super(scope, name, {
      ...options,
      kind: 'CertificateAuthorityPermission',
      apiVersion: 'acmpca.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * CertificateAuthorityPermission is a managed resource that represents an AWS CertificateAuthorityPermission Manager.
 *
 * @schema CertificateAuthorityPermission
 */
export interface CertificateAuthorityPermissionOptions {
  /**
   * @schema CertificateAuthorityPermission#metadata
   */
  readonly metadata?: any;

  /**
   * CertificateAuthorityPermissionSpec defines the desired state of CertificateAuthorityPermission
   *
   * @schema CertificateAuthorityPermission#spec
   */
  readonly spec?: CertificateAuthorityPermissionSpec;

}

/**
 * CertificateAuthorityPermissionSpec defines the desired state of CertificateAuthorityPermission
 *
 * @schema CertificateAuthorityPermissionSpec
 */
export interface CertificateAuthorityPermissionSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema CertificateAuthorityPermissionSpec#deletionPolicy
   */
  readonly deletionPolicy?: CertificateAuthorityPermissionSpecDeletionPolicy;

  /**
   * CertificateAuthorityPermissionParameters defines the desired state of an AWS CertificateAuthority.
   *
   * @schema CertificateAuthorityPermissionSpec#forProvider
   */
  readonly forProvider: CertificateAuthorityPermissionSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema CertificateAuthorityPermissionSpec#providerConfigRef
   */
  readonly providerConfigRef?: CertificateAuthorityPermissionSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema CertificateAuthorityPermissionSpec#providerRef
   */
  readonly providerRef?: CertificateAuthorityPermissionSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema CertificateAuthorityPermissionSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: CertificateAuthorityPermissionSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema CertificateAuthorityPermissionSpecDeletionPolicy
 */
export enum CertificateAuthorityPermissionSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = 'Orphan',
  /** Delete */
  DELETE = 'Delete',
}

/**
 * CertificateAuthorityPermissionParameters defines the desired state of an AWS CertificateAuthority.
 *
 * @schema CertificateAuthorityPermissionSpecForProvider
 */
export interface CertificateAuthorityPermissionSpecForProvider {
  /**
   * The actions that the specified AWS service principal can use.
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#actions
   */
  readonly actions?: string[];

  /**
   * The Amazon Resource Name (ARN) of the private certificate authority (CA)that will be used to issue the certificate.
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#certificateAuthorityARN
   */
  readonly certificateAuthorityARN?: string;

  /**
   * CertificateAuthorityARNRef references an CertificateAuthority to retrieve its Arn
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#certificateAuthorityARNRef
   */
  readonly certificateAuthorityARNRef?: CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnRef;

  /**
   * CertificateAuthorityARNSelector selects a reference to an CertificateAuthority to retrieve its Arn
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#certificateAuthorityARNSelector
   */
  readonly certificateAuthorityARNSelector?: CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnSelector;

  /**
   * The AWS Service or identity
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#principal
   */
  readonly principal?: string;

  /**
   * Region is the region of CertificateAuthorityPermission.
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#region
   */
  readonly region: string;

  /**
   * Calling Account ID
   *
   * @schema CertificateAuthorityPermissionSpecForProvider#sourceAccount
   */
  readonly sourceAccount?: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema CertificateAuthorityPermissionSpecProviderConfigRef
 */
export interface CertificateAuthorityPermissionSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema CertificateAuthorityPermissionSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema CertificateAuthorityPermissionSpecProviderRef
 */
export interface CertificateAuthorityPermissionSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema CertificateAuthorityPermissionSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema CertificateAuthorityPermissionSpecWriteConnectionSecretToRef
 */
export interface CertificateAuthorityPermissionSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema CertificateAuthorityPermissionSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema CertificateAuthorityPermissionSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * CertificateAuthorityARNRef references an CertificateAuthority to retrieve its Arn
 *
 * @schema CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnRef
 */
export interface CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnRef#name
   */
  readonly name: string;

}

/**
 * CertificateAuthorityARNSelector selects a reference to an CertificateAuthority to retrieve its Arn
 *
 * @schema CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnSelector
 */
export interface CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema CertificateAuthorityPermissionSpecForProviderCertificateAuthorityArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

