// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * APIMapping is the Schema for the APIMappings API
 *
 * @schema APIMapping
 */
export class ApiMapping extends ApiObject {
  /**
   * Defines a "APIMapping" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: ApiMappingProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'APIMapping',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Integration is the Schema for the Integrations API
 *
 * @schema Integration
 */
export class Integration extends ApiObject {
  /**
   * Defines a "Integration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IntegrationProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'Integration',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Model is the Schema for the Models API
 *
 * @schema Model
 */
export class Model extends ApiObject {
  /**
   * Defines a "Model" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: ModelProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'Model',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * API is the Schema for the APIS API
 *
 * @schema API
 */
export class Api extends ApiObject {
  /**
   * Defines a "API" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: ApiProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'API',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * RouteResponse is the Schema for the RouteResponses API
 *
 * @schema RouteResponse
 */
export class RouteResponse extends ApiObject {
  /**
   * Defines a "RouteResponse" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: RouteResponseProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'RouteResponse',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * DomainName is the Schema for the DomainNames API
 *
 * @schema DomainName
 */
export class DomainName extends ApiObject {
  /**
   * Defines a "DomainName" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: DomainNameProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'DomainName',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Route is the Schema for the Routes API
 *
 * @schema Route
 */
export class Route extends ApiObject {
  /**
   * Defines a "Route" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: RouteProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'Route',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Authorizer is the Schema for the Authorizers API
 *
 * @schema Authorizer
 */
export class Authorizer extends ApiObject {
  /**
   * Defines a "Authorizer" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: AuthorizerProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'Authorizer',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * VPCLink is the Schema for the VPCLinks API
 *
 * @schema VPCLink
 */
export class VpcLink extends ApiObject {
  /**
   * Defines a "VPCLink" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: VpcLinkProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'VPCLink',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * IntegrationResponse is the Schema for the IntegrationResponses API
 *
 * @schema IntegrationResponse
 */
export class IntegrationResponse extends ApiObject {
  /**
   * Defines a "IntegrationResponse" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: IntegrationResponseProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'IntegrationResponse',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Stage is the Schema for the Stages API
 *
 * @schema Stage
 */
export class Stage extends ApiObject {
  /**
   * Defines a "Stage" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: StageProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'Stage',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * Deployment is the Schema for the Deployments API
 *
 * @schema Deployment
 */
export class Deployment extends ApiObject {
  /**
   * Defines a "Deployment" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialiation props
   */
  public constructor(scope: Construct, id: string, props: DeploymentProps = {}) {
    super(scope, id, {
      ...props,
      kind: 'Deployment',
      apiVersion: 'apigatewayv2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * APIMapping is the Schema for the APIMappings API
 *
 * @schema APIMapping
 */
export interface ApiMappingProps {
  /**
   * @schema APIMapping#metadata
   */
  readonly metadata?: any;

  /**
   * APIMappingSpec defines the desired state of APIMapping
   *
   * @schema APIMapping#spec
   */
  readonly spec?: ApiMappingSpec;

}

/**
 * Integration is the Schema for the Integrations API
 *
 * @schema Integration
 */
export interface IntegrationProps {
  /**
   * @schema Integration#metadata
   */
  readonly metadata?: any;

  /**
   * IntegrationSpec defines the desired state of Integration
   *
   * @schema Integration#spec
   */
  readonly spec?: IntegrationSpec;

}

/**
 * Model is the Schema for the Models API
 *
 * @schema Model
 */
export interface ModelProps {
  /**
   * @schema Model#metadata
   */
  readonly metadata?: any;

  /**
   * ModelSpec defines the desired state of Model
   *
   * @schema Model#spec
   */
  readonly spec?: ModelSpec;

}

/**
 * API is the Schema for the APIS API
 *
 * @schema API
 */
export interface ApiProps {
  /**
   * @schema API#metadata
   */
  readonly metadata?: any;

  /**
   * APISpec defines the desired state of API
   *
   * @schema API#spec
   */
  readonly spec?: ApiSpec;

}

/**
 * RouteResponse is the Schema for the RouteResponses API
 *
 * @schema RouteResponse
 */
export interface RouteResponseProps {
  /**
   * @schema RouteResponse#metadata
   */
  readonly metadata?: any;

  /**
   * RouteResponseSpec defines the desired state of RouteResponse
   *
   * @schema RouteResponse#spec
   */
  readonly spec?: RouteResponseSpec;

}

/**
 * DomainName is the Schema for the DomainNames API
 *
 * @schema DomainName
 */
export interface DomainNameProps {
  /**
   * @schema DomainName#metadata
   */
  readonly metadata?: any;

  /**
   * DomainNameSpec defines the desired state of DomainName
   *
   * @schema DomainName#spec
   */
  readonly spec?: DomainNameSpec;

}

/**
 * Route is the Schema for the Routes API
 *
 * @schema Route
 */
export interface RouteProps {
  /**
   * @schema Route#metadata
   */
  readonly metadata?: any;

  /**
   * RouteSpec defines the desired state of Route
   *
   * @schema Route#spec
   */
  readonly spec?: RouteSpec;

}

/**
 * Authorizer is the Schema for the Authorizers API
 *
 * @schema Authorizer
 */
export interface AuthorizerProps {
  /**
   * @schema Authorizer#metadata
   */
  readonly metadata?: any;

  /**
   * AuthorizerSpec defines the desired state of Authorizer
   *
   * @schema Authorizer#spec
   */
  readonly spec?: AuthorizerSpec;

}

/**
 * VPCLink is the Schema for the VPCLinks API
 *
 * @schema VPCLink
 */
export interface VpcLinkProps {
  /**
   * @schema VPCLink#metadata
   */
  readonly metadata?: any;

  /**
   * VPCLinkSpec defines the desired state of VPCLink
   *
   * @schema VPCLink#spec
   */
  readonly spec?: VpcLinkSpec;

}

/**
 * IntegrationResponse is the Schema for the IntegrationResponses API
 *
 * @schema IntegrationResponse
 */
export interface IntegrationResponseProps {
  /**
   * @schema IntegrationResponse#metadata
   */
  readonly metadata?: any;

  /**
   * IntegrationResponseSpec defines the desired state of IntegrationResponse
   *
   * @schema IntegrationResponse#spec
   */
  readonly spec?: IntegrationResponseSpec;

}

/**
 * Stage is the Schema for the Stages API
 *
 * @schema Stage
 */
export interface StageProps {
  /**
   * @schema Stage#metadata
   */
  readonly metadata?: any;

  /**
   * StageSpec defines the desired state of Stage
   *
   * @schema Stage#spec
   */
  readonly spec?: StageSpec;

}

/**
 * Deployment is the Schema for the Deployments API
 *
 * @schema Deployment
 */
export interface DeploymentProps {
  /**
   * @schema Deployment#metadata
   */
  readonly metadata?: any;

  /**
   * DeploymentSpec defines the desired state of Deployment
   *
   * @schema Deployment#spec
   */
  readonly spec?: DeploymentSpec;

}

/**
 * APIMappingSpec defines the desired state of APIMapping
 *
 * @schema ApiMappingSpec
 */
export interface ApiMappingSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema ApiMappingSpec#deletionPolicy
   */
  readonly deletionPolicy?: ApiMappingSpecDeletionPolicy;

  /**
   * APIMappingParameters defines the desired state of APIMapping
   *
   * @schema ApiMappingSpec#forProvider
   */
  readonly forProvider: ApiMappingSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ApiMappingSpec#providerConfigRef
   */
  readonly providerConfigRef?: ApiMappingSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema ApiMappingSpec#providerRef
   */
  readonly providerRef?: ApiMappingSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApiMappingSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApiMappingSpecWriteConnectionSecretToRef;

}

/**
 * IntegrationSpec defines the desired state of Integration
 *
 * @schema IntegrationSpec
 */
export interface IntegrationSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IntegrationSpec#deletionPolicy
   */
  readonly deletionPolicy?: IntegrationSpecDeletionPolicy;

  /**
   * IntegrationParameters defines the desired state of Integration
   *
   * @schema IntegrationSpec#forProvider
   */
  readonly forProvider: IntegrationSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IntegrationSpec#providerConfigRef
   */
  readonly providerConfigRef?: IntegrationSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IntegrationSpec#providerRef
   */
  readonly providerRef?: IntegrationSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IntegrationSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IntegrationSpecWriteConnectionSecretToRef;

}

/**
 * ModelSpec defines the desired state of Model
 *
 * @schema ModelSpec
 */
export interface ModelSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema ModelSpec#deletionPolicy
   */
  readonly deletionPolicy?: ModelSpecDeletionPolicy;

  /**
   * ModelParameters defines the desired state of Model
   *
   * @schema ModelSpec#forProvider
   */
  readonly forProvider: ModelSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ModelSpec#providerConfigRef
   */
  readonly providerConfigRef?: ModelSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema ModelSpec#providerRef
   */
  readonly providerRef?: ModelSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ModelSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ModelSpecWriteConnectionSecretToRef;

}

/**
 * APISpec defines the desired state of API
 *
 * @schema ApiSpec
 */
export interface ApiSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema ApiSpec#deletionPolicy
   */
  readonly deletionPolicy?: ApiSpecDeletionPolicy;

  /**
   * APIParameters defines the desired state of API
   *
   * @schema ApiSpec#forProvider
   */
  readonly forProvider: ApiSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ApiSpec#providerConfigRef
   */
  readonly providerConfigRef?: ApiSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema ApiSpec#providerRef
   */
  readonly providerRef?: ApiSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ApiSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ApiSpecWriteConnectionSecretToRef;

}

/**
 * RouteResponseSpec defines the desired state of RouteResponse
 *
 * @schema RouteResponseSpec
 */
export interface RouteResponseSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema RouteResponseSpec#deletionPolicy
   */
  readonly deletionPolicy?: RouteResponseSpecDeletionPolicy;

  /**
   * RouteResponseParameters defines the desired state of RouteResponse
   *
   * @schema RouteResponseSpec#forProvider
   */
  readonly forProvider: RouteResponseSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RouteResponseSpec#providerConfigRef
   */
  readonly providerConfigRef?: RouteResponseSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema RouteResponseSpec#providerRef
   */
  readonly providerRef?: RouteResponseSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RouteResponseSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RouteResponseSpecWriteConnectionSecretToRef;

}

/**
 * DomainNameSpec defines the desired state of DomainName
 *
 * @schema DomainNameSpec
 */
export interface DomainNameSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema DomainNameSpec#deletionPolicy
   */
  readonly deletionPolicy?: DomainNameSpecDeletionPolicy;

  /**
   * DomainNameParameters defines the desired state of DomainName
   *
   * @schema DomainNameSpec#forProvider
   */
  readonly forProvider: DomainNameSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema DomainNameSpec#providerConfigRef
   */
  readonly providerConfigRef?: DomainNameSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema DomainNameSpec#providerRef
   */
  readonly providerRef?: DomainNameSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DomainNameSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DomainNameSpecWriteConnectionSecretToRef;

}

/**
 * RouteSpec defines the desired state of Route
 *
 * @schema RouteSpec
 */
export interface RouteSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema RouteSpec#deletionPolicy
   */
  readonly deletionPolicy?: RouteSpecDeletionPolicy;

  /**
   * RouteParameters defines the desired state of Route
   *
   * @schema RouteSpec#forProvider
   */
  readonly forProvider: RouteSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RouteSpec#providerConfigRef
   */
  readonly providerConfigRef?: RouteSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema RouteSpec#providerRef
   */
  readonly providerRef?: RouteSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RouteSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RouteSpecWriteConnectionSecretToRef;

}

/**
 * AuthorizerSpec defines the desired state of Authorizer
 *
 * @schema AuthorizerSpec
 */
export interface AuthorizerSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema AuthorizerSpec#deletionPolicy
   */
  readonly deletionPolicy?: AuthorizerSpecDeletionPolicy;

  /**
   * AuthorizerParameters defines the desired state of Authorizer
   *
   * @schema AuthorizerSpec#forProvider
   */
  readonly forProvider: AuthorizerSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema AuthorizerSpec#providerConfigRef
   */
  readonly providerConfigRef?: AuthorizerSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema AuthorizerSpec#providerRef
   */
  readonly providerRef?: AuthorizerSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema AuthorizerSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: AuthorizerSpecWriteConnectionSecretToRef;

}

/**
 * VPCLinkSpec defines the desired state of VPCLink
 *
 * @schema VpcLinkSpec
 */
export interface VpcLinkSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema VpcLinkSpec#deletionPolicy
   */
  readonly deletionPolicy?: VpcLinkSpecDeletionPolicy;

  /**
   * VPCLinkParameters defines the desired state of VPCLink
   *
   * @schema VpcLinkSpec#forProvider
   */
  readonly forProvider: VpcLinkSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VpcLinkSpec#providerConfigRef
   */
  readonly providerConfigRef?: VpcLinkSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VpcLinkSpec#providerRef
   */
  readonly providerRef?: VpcLinkSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VpcLinkSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VpcLinkSpecWriteConnectionSecretToRef;

}

/**
 * IntegrationResponseSpec defines the desired state of IntegrationResponse
 *
 * @schema IntegrationResponseSpec
 */
export interface IntegrationResponseSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema IntegrationResponseSpec#deletionPolicy
   */
  readonly deletionPolicy?: IntegrationResponseSpecDeletionPolicy;

  /**
   * IntegrationResponseParameters defines the desired state of IntegrationResponse
   *
   * @schema IntegrationResponseSpec#forProvider
   */
  readonly forProvider: IntegrationResponseSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema IntegrationResponseSpec#providerConfigRef
   */
  readonly providerConfigRef?: IntegrationResponseSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema IntegrationResponseSpec#providerRef
   */
  readonly providerRef?: IntegrationResponseSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema IntegrationResponseSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: IntegrationResponseSpecWriteConnectionSecretToRef;

}

/**
 * StageSpec defines the desired state of Stage
 *
 * @schema StageSpec
 */
export interface StageSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema StageSpec#deletionPolicy
   */
  readonly deletionPolicy?: StageSpecDeletionPolicy;

  /**
   * StageParameters defines the desired state of Stage
   *
   * @schema StageSpec#forProvider
   */
  readonly forProvider: StageSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema StageSpec#providerConfigRef
   */
  readonly providerConfigRef?: StageSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema StageSpec#providerRef
   */
  readonly providerRef?: StageSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema StageSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: StageSpecWriteConnectionSecretToRef;

}

/**
 * DeploymentSpec defines the desired state of Deployment
 *
 * @schema DeploymentSpec
 */
export interface DeploymentSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema DeploymentSpec#deletionPolicy
   */
  readonly deletionPolicy?: DeploymentSpecDeletionPolicy;

  /**
   * DeploymentParameters defines the desired state of Deployment
   *
   * @schema DeploymentSpec#forProvider
   */
  readonly forProvider: DeploymentSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema DeploymentSpec#providerConfigRef
   */
  readonly providerConfigRef?: DeploymentSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema DeploymentSpec#providerRef
   */
  readonly providerRef?: DeploymentSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DeploymentSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DeploymentSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema ApiMappingSpecDeletionPolicy
 */
export enum ApiMappingSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * APIMappingParameters defines the desired state of APIMapping
 *
 * @schema ApiMappingSpecForProvider
 */
export interface ApiMappingSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema ApiMappingSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema ApiMappingSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: ApiMappingSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema ApiMappingSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: ApiMappingSpecForProviderApiIdSelector;

  /**
   * @schema ApiMappingSpecForProvider#apiMappingKey
   */
  readonly apiMappingKey?: string;

  /**
   * DomainName is the DomainName for the DomainName.
   *
   * @schema ApiMappingSpecForProvider#domainName
   */
  readonly domainName?: string;

  /**
   * DomainNameRef is a reference to a DomainName used to set the DomainName.
   *
   * @schema ApiMappingSpecForProvider#domainNameRef
   */
  readonly domainNameRef?: ApiMappingSpecForProviderDomainNameRef;

  /**
   * DomainNameSelector selects references to DomainName used to set the DomainName.
   *
   * @schema ApiMappingSpecForProvider#domainNameSelector
   */
  readonly domainNameSelector?: ApiMappingSpecForProviderDomainNameSelector;

  /**
   * Region is which region the APIMapping will be created.
   *
   * @schema ApiMappingSpecForProvider#region
   */
  readonly region: string;

  /**
   * Stage is the name for the Stage.
   *
   * @schema ApiMappingSpecForProvider#stage
   */
  readonly stage?: string;

  /**
   * StageDRef is a reference to an Stage used to set the Stage.
   *
   * @schema ApiMappingSpecForProvider#stageRef
   */
  readonly stageRef?: ApiMappingSpecForProviderStageRef;

  /**
   * StageSelector selects references to Stage used to set the Stage.
   *
   * @schema ApiMappingSpecForProvider#stageSelector
   */
  readonly stageSelector?: ApiMappingSpecForProviderStageSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ApiMappingSpecProviderConfigRef
 */
export interface ApiMappingSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiMappingSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema ApiMappingSpecProviderRef
 */
export interface ApiMappingSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiMappingSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApiMappingSpecWriteConnectionSecretToRef
 */
export interface ApiMappingSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApiMappingSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApiMappingSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IntegrationSpecDeletionPolicy
 */
export enum IntegrationSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IntegrationParameters defines the desired state of Integration
 *
 * @schema IntegrationSpecForProvider
 */
export interface IntegrationSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema IntegrationSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema IntegrationSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: IntegrationSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema IntegrationSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: IntegrationSpecForProviderApiIdSelector;

  /**
   * @schema IntegrationSpecForProvider#connectionID
   */
  readonly connectionID?: string;

  /**
   * @schema IntegrationSpecForProvider#connectionType
   */
  readonly connectionType?: string;

  /**
   * @schema IntegrationSpecForProvider#contentHandlingStrategy
   */
  readonly contentHandlingStrategy?: string;

  /**
   * @schema IntegrationSpecForProvider#credentialsARN
   */
  readonly credentialsARN?: string;

  /**
   * @schema IntegrationSpecForProvider#description
   */
  readonly description?: string;

  /**
   * @schema IntegrationSpecForProvider#integrationMethod
   */
  readonly integrationMethod?: string;

  /**
   * @schema IntegrationSpecForProvider#integrationSubtype
   */
  readonly integrationSubtype?: string;

  /**
   * @schema IntegrationSpecForProvider#integrationType
   */
  readonly integrationType: string;

  /**
   * @schema IntegrationSpecForProvider#integrationURI
   */
  readonly integrationURI?: string;

  /**
   * @schema IntegrationSpecForProvider#passthroughBehavior
   */
  readonly passthroughBehavior?: string;

  /**
   * @schema IntegrationSpecForProvider#payloadFormatVersion
   */
  readonly payloadFormatVersion?: string;

  /**
   * Region is which region the Integration will be created.
   *
   * @schema IntegrationSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema IntegrationSpecForProvider#requestParameters
   */
  readonly requestParameters?: { [key: string]: string };

  /**
   * @schema IntegrationSpecForProvider#requestTemplates
   */
  readonly requestTemplates?: { [key: string]: string };

  /**
   * @schema IntegrationSpecForProvider#templateSelectionExpression
   */
  readonly templateSelectionExpression?: string;

  /**
   * @schema IntegrationSpecForProvider#timeoutInMillis
   */
  readonly timeoutInMillis?: number;

  /**
   * @schema IntegrationSpecForProvider#tlsConfig
   */
  readonly tlsConfig?: IntegrationSpecForProviderTlsConfig;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IntegrationSpecProviderConfigRef
 */
export interface IntegrationSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IntegrationSpecProviderRef
 */
export interface IntegrationSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IntegrationSpecWriteConnectionSecretToRef
 */
export interface IntegrationSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IntegrationSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IntegrationSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema ModelSpecDeletionPolicy
 */
export enum ModelSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ModelParameters defines the desired state of Model
 *
 * @schema ModelSpecForProvider
 */
export interface ModelSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema ModelSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema ModelSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: ModelSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema ModelSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: ModelSpecForProviderApiIdSelector;

  /**
   * @schema ModelSpecForProvider#contentType
   */
  readonly contentType?: string;

  /**
   * @schema ModelSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Region is which region the Model will be created.
   *
   * @schema ModelSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema ModelSpecForProvider#schema
   */
  readonly schema: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ModelSpecProviderConfigRef
 */
export interface ModelSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ModelSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema ModelSpecProviderRef
 */
export interface ModelSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ModelSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ModelSpecWriteConnectionSecretToRef
 */
export interface ModelSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ModelSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ModelSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema ApiSpecDeletionPolicy
 */
export enum ApiSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * APIParameters defines the desired state of API
 *
 * @schema ApiSpecForProvider
 */
export interface ApiSpecForProvider {
  /**
   * @schema ApiSpecForProvider#apiKeySelectionExpression
   */
  readonly apiKeySelectionExpression?: string;

  /**
   * @schema ApiSpecForProvider#corsConfiguration
   */
  readonly corsConfiguration?: ApiSpecForProviderCorsConfiguration;

  /**
   * @schema ApiSpecForProvider#credentialsARN
   */
  readonly credentialsARN?: string;

  /**
   * @schema ApiSpecForProvider#description
   */
  readonly description?: string;

  /**
   * @schema ApiSpecForProvider#disableExecuteAPIEndpoint
   */
  readonly disableExecuteAPIEndpoint?: boolean;

  /**
   * @schema ApiSpecForProvider#disableSchemaValidation
   */
  readonly disableSchemaValidation?: boolean;

  /**
   * @schema ApiSpecForProvider#protocolType
   */
  readonly protocolType: string;

  /**
   * Region is which region the API will be created.
   *
   * @schema ApiSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema ApiSpecForProvider#routeKey
   */
  readonly routeKey?: string;

  /**
   * @schema ApiSpecForProvider#routeSelectionExpression
   */
  readonly routeSelectionExpression?: string;

  /**
   * @schema ApiSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

  /**
   * @schema ApiSpecForProvider#target
   */
  readonly target?: string;

  /**
   * @schema ApiSpecForProvider#version
   */
  readonly version?: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ApiSpecProviderConfigRef
 */
export interface ApiSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema ApiSpecProviderRef
 */
export interface ApiSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ApiSpecWriteConnectionSecretToRef
 */
export interface ApiSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ApiSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ApiSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema RouteResponseSpecDeletionPolicy
 */
export enum RouteResponseSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * RouteResponseParameters defines the desired state of RouteResponse
 *
 * @schema RouteResponseSpecForProvider
 */
export interface RouteResponseSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema RouteResponseSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema RouteResponseSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: RouteResponseSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema RouteResponseSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: RouteResponseSpecForProviderApiIdSelector;

  /**
   * @schema RouteResponseSpecForProvider#modelSelectionExpression
   */
  readonly modelSelectionExpression?: string;

  /**
   * Region is which region the RouteResponse will be created.
   *
   * @schema RouteResponseSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema RouteResponseSpecForProvider#responseModels
   */
  readonly responseModels?: { [key: string]: string };

  /**
   * @schema RouteResponseSpecForProvider#responseParameters
   */
  readonly responseParameters?: { [key: string]: RouteResponseSpecForProviderResponseParameters };

  /**
   * RouteID is the ID for the Route.
   *
   * @schema RouteResponseSpecForProvider#routeId
   */
  readonly routeId?: string;

  /**
   * RouteIDRef is a reference to an Route used to set the RouteID.
   *
   * @schema RouteResponseSpecForProvider#routeIdRef
   */
  readonly routeIdRef?: RouteResponseSpecForProviderRouteIdRef;

  /**
   * RouteIDSelector selects references to Route used to set the RouteID.
   *
   * @schema RouteResponseSpecForProvider#routeIdSelector
   */
  readonly routeIdSelector?: RouteResponseSpecForProviderRouteIdSelector;

  /**
   * @schema RouteResponseSpecForProvider#routeResponseKey
   */
  readonly routeResponseKey: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RouteResponseSpecProviderConfigRef
 */
export interface RouteResponseSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteResponseSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema RouteResponseSpecProviderRef
 */
export interface RouteResponseSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteResponseSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RouteResponseSpecWriteConnectionSecretToRef
 */
export interface RouteResponseSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RouteResponseSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RouteResponseSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema DomainNameSpecDeletionPolicy
 */
export enum DomainNameSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * DomainNameParameters defines the desired state of DomainName
 *
 * @schema DomainNameSpecForProvider
 */
export interface DomainNameSpecForProvider {
  /**
   * @schema DomainNameSpecForProvider#domainNameConfigurations
   */
  readonly domainNameConfigurations?: DomainNameSpecForProviderDomainNameConfigurations[];

  /**
   * @schema DomainNameSpecForProvider#mutualTLSAuthentication
   */
  readonly mutualTLSAuthentication?: DomainNameSpecForProviderMutualTlsAuthentication;

  /**
   * Region is which region the DomainName will be created.
   *
   * @schema DomainNameSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema DomainNameSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema DomainNameSpecProviderConfigRef
 */
export interface DomainNameSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DomainNameSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema DomainNameSpecProviderRef
 */
export interface DomainNameSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DomainNameSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DomainNameSpecWriteConnectionSecretToRef
 */
export interface DomainNameSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DomainNameSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DomainNameSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema RouteSpecDeletionPolicy
 */
export enum RouteSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * RouteParameters defines the desired state of Route
 *
 * @schema RouteSpecForProvider
 */
export interface RouteSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema RouteSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema RouteSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: RouteSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema RouteSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: RouteSpecForProviderApiIdSelector;

  /**
   * @schema RouteSpecForProvider#apiKeyRequired
   */
  readonly apiKeyRequired?: boolean;

  /**
   * @schema RouteSpecForProvider#authorizationScopes
   */
  readonly authorizationScopes?: string[];

  /**
   * @schema RouteSpecForProvider#authorizationType
   */
  readonly authorizationType?: string;

  /**
   * @schema RouteSpecForProvider#authorizerID
   */
  readonly authorizerID?: string;

  /**
   * AuthorizerIDRef is a reference to an Authorizer used to set the AuthorizerID.
   *
   * @schema RouteSpecForProvider#authorizerIDRef
   */
  readonly authorizerIDRef?: RouteSpecForProviderAuthorizerIdRef;

  /**
   * AuthorizerIDSelector selects references to Authorizer used to set the AuthorizerID.
   *
   * @schema RouteSpecForProvider#authorizerIDSelector
   */
  readonly authorizerIDSelector?: RouteSpecForProviderAuthorizerIdSelector;

  /**
   * @schema RouteSpecForProvider#modelSelectionExpression
   */
  readonly modelSelectionExpression?: string;

  /**
   * @schema RouteSpecForProvider#operationName
   */
  readonly operationName?: string;

  /**
   * Region is which region the Route will be created.
   *
   * @schema RouteSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema RouteSpecForProvider#requestModels
   */
  readonly requestModels?: { [key: string]: string };

  /**
   * @schema RouteSpecForProvider#requestParameters
   */
  readonly requestParameters?: { [key: string]: RouteSpecForProviderRequestParameters };

  /**
   * @schema RouteSpecForProvider#routeKey
   */
  readonly routeKey: string;

  /**
   * @schema RouteSpecForProvider#routeResponseSelectionExpression
   */
  readonly routeResponseSelectionExpression?: string;

  /**
   * @schema RouteSpecForProvider#target
   */
  readonly target?: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RouteSpecProviderConfigRef
 */
export interface RouteSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema RouteSpecProviderRef
 */
export interface RouteSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RouteSpecWriteConnectionSecretToRef
 */
export interface RouteSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RouteSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RouteSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema AuthorizerSpecDeletionPolicy
 */
export enum AuthorizerSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * AuthorizerParameters defines the desired state of Authorizer
 *
 * @schema AuthorizerSpecForProvider
 */
export interface AuthorizerSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema AuthorizerSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema AuthorizerSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: AuthorizerSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema AuthorizerSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: AuthorizerSpecForProviderApiIdSelector;

  /**
   * @schema AuthorizerSpecForProvider#authorizerCredentialsARN
   */
  readonly authorizerCredentialsARN?: string;

  /**
   * @schema AuthorizerSpecForProvider#authorizerPayloadFormatVersion
   */
  readonly authorizerPayloadFormatVersion?: string;

  /**
   * @schema AuthorizerSpecForProvider#authorizerResultTtlInSeconds
   */
  readonly authorizerResultTtlInSeconds?: number;

  /**
   * @schema AuthorizerSpecForProvider#authorizerType
   */
  readonly authorizerType: string;

  /**
   * @schema AuthorizerSpecForProvider#authorizerURI
   */
  readonly authorizerURI?: string;

  /**
   * @schema AuthorizerSpecForProvider#enableSimpleResponses
   */
  readonly enableSimpleResponses?: boolean;

  /**
   * @schema AuthorizerSpecForProvider#identitySource
   */
  readonly identitySource: string[];

  /**
   * @schema AuthorizerSpecForProvider#identityValidationExpression
   */
  readonly identityValidationExpression?: string;

  /**
   * @schema AuthorizerSpecForProvider#jwtConfiguration
   */
  readonly jwtConfiguration?: AuthorizerSpecForProviderJwtConfiguration;

  /**
   * Region is which region the Authorizer will be created.
   *
   * @schema AuthorizerSpecForProvider#region
   */
  readonly region: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema AuthorizerSpecProviderConfigRef
 */
export interface AuthorizerSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema AuthorizerSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema AuthorizerSpecProviderRef
 */
export interface AuthorizerSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema AuthorizerSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema AuthorizerSpecWriteConnectionSecretToRef
 */
export interface AuthorizerSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema AuthorizerSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema AuthorizerSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema VpcLinkSpecDeletionPolicy
 */
export enum VpcLinkSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * VPCLinkParameters defines the desired state of VPCLink
 *
 * @schema VpcLinkSpecForProvider
 */
export interface VpcLinkSpecForProvider {
  /**
   * Region is which region the VPCLink will be created.
   *
   * @schema VpcLinkSpecForProvider#region
   */
  readonly region: string;

  /**
   * SecurityGroupIDRefs is a list of references to SecurityGroups used to set the SecurityGroupIDs.
   *
   * @schema VpcLinkSpecForProvider#securityGroupIdRefs
   */
  readonly securityGroupIdRefs?: VpcLinkSpecForProviderSecurityGroupIdRefs[];

  /**
   * SecurityGroupIDsSelector selects references to SecurityGroupID used to set the SecurityGroupIDs.
   *
   * @schema VpcLinkSpecForProvider#securityGroupIdSelector
   */
  readonly securityGroupIdSelector?: VpcLinkSpecForProviderSecurityGroupIdSelector;

  /**
   * SecurityGroupIDs is the list of IDs for the SecurityGroups.
   *
   * @schema VpcLinkSpecForProvider#securityGroupIds
   */
  readonly securityGroupIds?: string[];

  /**
   * SubnetIDRefs is a list of references to Subnets used to set the SubnetIDs.
   *
   * @schema VpcLinkSpecForProvider#subnetIdRefs
   */
  readonly subnetIdRefs?: VpcLinkSpecForProviderSubnetIdRefs[];

  /**
   * SubnetIDsSelector selects references to Subnets used to set the SubnetIDs.
   *
   * @schema VpcLinkSpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: VpcLinkSpecForProviderSubnetIdSelector;

  /**
   * SecurityGroupIDs is the list of IDs for the SecurityGroups.
   *
   * @schema VpcLinkSpecForProvider#subnetIds
   */
  readonly subnetIds?: string[];

  /**
   * @schema VpcLinkSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VpcLinkSpecProviderConfigRef
 */
export interface VpcLinkSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VpcLinkSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VpcLinkSpecProviderRef
 */
export interface VpcLinkSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VpcLinkSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VpcLinkSpecWriteConnectionSecretToRef
 */
export interface VpcLinkSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VpcLinkSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VpcLinkSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema IntegrationResponseSpecDeletionPolicy
 */
export enum IntegrationResponseSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * IntegrationResponseParameters defines the desired state of IntegrationResponse
 *
 * @schema IntegrationResponseSpecForProvider
 */
export interface IntegrationResponseSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema IntegrationResponseSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema IntegrationResponseSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: IntegrationResponseSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema IntegrationResponseSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: IntegrationResponseSpecForProviderApiIdSelector;

  /**
   * @schema IntegrationResponseSpecForProvider#contentHandlingStrategy
   */
  readonly contentHandlingStrategy?: string;

  /**
   * IntegrationID is the ID for the Integration.
   *
   * @schema IntegrationResponseSpecForProvider#integrationId
   */
  readonly integrationId?: string;

  /**
   * IntegrationIDRef is a reference to an Integration used to set the IntegrationID.
   *
   * @schema IntegrationResponseSpecForProvider#integrationIdRef
   */
  readonly integrationIdRef?: IntegrationResponseSpecForProviderIntegrationIdRef;

  /**
   * IntegrationIDSelector selects references to Integration used to set the IntegrationID.
   *
   * @schema IntegrationResponseSpecForProvider#integrationIdSelector
   */
  readonly integrationIdSelector?: IntegrationResponseSpecForProviderIntegrationIdSelector;

  /**
   * @schema IntegrationResponseSpecForProvider#integrationResponseKey
   */
  readonly integrationResponseKey: string;

  /**
   * Region is which region the IntegrationResponse will be created.
   *
   * @schema IntegrationResponseSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema IntegrationResponseSpecForProvider#responseParameters
   */
  readonly responseParameters?: { [key: string]: string };

  /**
   * @schema IntegrationResponseSpecForProvider#responseTemplates
   */
  readonly responseTemplates?: { [key: string]: string };

  /**
   * @schema IntegrationResponseSpecForProvider#templateSelectionExpression
   */
  readonly templateSelectionExpression?: string;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema IntegrationResponseSpecProviderConfigRef
 */
export interface IntegrationResponseSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationResponseSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema IntegrationResponseSpecProviderRef
 */
export interface IntegrationResponseSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationResponseSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema IntegrationResponseSpecWriteConnectionSecretToRef
 */
export interface IntegrationResponseSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema IntegrationResponseSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema IntegrationResponseSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema StageSpecDeletionPolicy
 */
export enum StageSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * StageParameters defines the desired state of Stage
 *
 * @schema StageSpecForProvider
 */
export interface StageSpecForProvider {
  /**
   * @schema StageSpecForProvider#accessLogSettings
   */
  readonly accessLogSettings?: StageSpecForProviderAccessLogSettings;

  /**
   * APIID is the ID for the API.
   *
   * @schema StageSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema StageSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: StageSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema StageSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: StageSpecForProviderApiIdSelector;

  /**
   * @schema StageSpecForProvider#autoDeploy
   */
  readonly autoDeploy?: boolean;

  /**
   * @schema StageSpecForProvider#clientCertificateID
   */
  readonly clientCertificateID?: string;

  /**
   * @schema StageSpecForProvider#defaultRouteSettings
   */
  readonly defaultRouteSettings?: StageSpecForProviderDefaultRouteSettings;

  /**
   * @schema StageSpecForProvider#deploymentID
   */
  readonly deploymentID?: string;

  /**
   * @schema StageSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Region is which region the Stage will be created.
   *
   * @schema StageSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema StageSpecForProvider#routeSettings
   */
  readonly routeSettings?: { [key: string]: StageSpecForProviderRouteSettings };

  /**
   * @schema StageSpecForProvider#stageVariables
   */
  readonly stageVariables?: { [key: string]: string };

  /**
   * @schema StageSpecForProvider#tags
   */
  readonly tags?: { [key: string]: string };

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema StageSpecProviderConfigRef
 */
export interface StageSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema StageSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema StageSpecProviderRef
 */
export interface StageSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema StageSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema StageSpecWriteConnectionSecretToRef
 */
export interface StageSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema StageSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema StageSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema DeploymentSpecDeletionPolicy
 */
export enum DeploymentSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * DeploymentParameters defines the desired state of Deployment
 *
 * @schema DeploymentSpecForProvider
 */
export interface DeploymentSpecForProvider {
  /**
   * APIID is the ID for the API.
   *
   * @schema DeploymentSpecForProvider#apiId
   */
  readonly apiId?: string;

  /**
   * APIIDRef is a reference to an API used to set the APIID.
   *
   * @schema DeploymentSpecForProvider#apiIdRef
   */
  readonly apiIdRef?: DeploymentSpecForProviderApiIdRef;

  /**
   * APIIDSelector selects references to API used to set the APIID.
   *
   * @schema DeploymentSpecForProvider#apiIdSelector
   */
  readonly apiIdSelector?: DeploymentSpecForProviderApiIdSelector;

  /**
   * @schema DeploymentSpecForProvider#description
   */
  readonly description?: string;

  /**
   * Region is which region the Deployment will be created.
   *
   * @schema DeploymentSpecForProvider#region
   */
  readonly region: string;

  /**
   * @schema DeploymentSpecForProvider#stageName
   */
  readonly stageName?: string;

  /**
   * StageNameRef is a reference to an Stage used to set the StageName.
   *
   * @schema DeploymentSpecForProvider#stageNameRef
   */
  readonly stageNameRef?: DeploymentSpecForProviderStageNameRef;

  /**
   * StageNameSelector selects references to Stage used to set the StageName.
   *
   * @schema DeploymentSpecForProvider#stageNameSelector
   */
  readonly stageNameSelector?: DeploymentSpecForProviderStageNameSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema DeploymentSpecProviderConfigRef
 */
export interface DeploymentSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeploymentSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema DeploymentSpecProviderRef
 */
export interface DeploymentSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeploymentSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DeploymentSpecWriteConnectionSecretToRef
 */
export interface DeploymentSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DeploymentSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DeploymentSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema ApiMappingSpecForProviderApiIdRef
 */
export interface ApiMappingSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiMappingSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema ApiMappingSpecForProviderApiIdSelector
 */
export interface ApiMappingSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ApiMappingSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ApiMappingSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * DomainNameRef is a reference to a DomainName used to set the DomainName.
 *
 * @schema ApiMappingSpecForProviderDomainNameRef
 */
export interface ApiMappingSpecForProviderDomainNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiMappingSpecForProviderDomainNameRef#name
   */
  readonly name: string;

}

/**
 * DomainNameSelector selects references to DomainName used to set the DomainName.
 *
 * @schema ApiMappingSpecForProviderDomainNameSelector
 */
export interface ApiMappingSpecForProviderDomainNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ApiMappingSpecForProviderDomainNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ApiMappingSpecForProviderDomainNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * StageDRef is a reference to an Stage used to set the Stage.
 *
 * @schema ApiMappingSpecForProviderStageRef
 */
export interface ApiMappingSpecForProviderStageRef {
  /**
   * Name of the referenced object.
   *
   * @schema ApiMappingSpecForProviderStageRef#name
   */
  readonly name: string;

}

/**
 * StageSelector selects references to Stage used to set the Stage.
 *
 * @schema ApiMappingSpecForProviderStageSelector
 */
export interface ApiMappingSpecForProviderStageSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ApiMappingSpecForProviderStageSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ApiMappingSpecForProviderStageSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema IntegrationSpecForProviderApiIdRef
 */
export interface IntegrationSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema IntegrationSpecForProviderApiIdSelector
 */
export interface IntegrationSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IntegrationSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IntegrationSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema IntegrationSpecForProviderTlsConfig
 */
export interface IntegrationSpecForProviderTlsConfig {
  /**
   * A string with a length between [1-512].
   *
   * @schema IntegrationSpecForProviderTlsConfig#serverNameToVerify
   */
  readonly serverNameToVerify?: string;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema ModelSpecForProviderApiIdRef
 */
export interface ModelSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema ModelSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema ModelSpecForProviderApiIdSelector
 */
export interface ModelSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema ModelSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema ModelSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema ApiSpecForProviderCorsConfiguration
 */
export interface ApiSpecForProviderCorsConfiguration {
  /**
   * @schema ApiSpecForProviderCorsConfiguration#allowCredentials
   */
  readonly allowCredentials?: boolean;

  /**
   * Represents a collection of allowed headers. Supported only for HTTP APIs.
   *
   * @schema ApiSpecForProviderCorsConfiguration#allowHeaders
   */
  readonly allowHeaders?: string[];

  /**
   * Represents a collection of methods. Supported only for HTTP APIs.
   *
   * @schema ApiSpecForProviderCorsConfiguration#allowMethods
   */
  readonly allowMethods?: string[];

  /**
   * Represents a collection of origins. Supported only for HTTP APIs.
   *
   * @schema ApiSpecForProviderCorsConfiguration#allowOrigins
   */
  readonly allowOrigins?: string[];

  /**
   * Represents a collection of allowed headers. Supported only for HTTP APIs.
   *
   * @schema ApiSpecForProviderCorsConfiguration#exposeHeaders
   */
  readonly exposeHeaders?: string[];

  /**
   * An integer with a value between -1 and 86400. Supported only for HTTP APIs.
   *
   * @schema ApiSpecForProviderCorsConfiguration#maxAge
   */
  readonly maxAge?: number;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema RouteResponseSpecForProviderApiIdRef
 */
export interface RouteResponseSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteResponseSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema RouteResponseSpecForProviderApiIdSelector
 */
export interface RouteResponseSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteResponseSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteResponseSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema RouteResponseSpecForProviderResponseParameters
 */
export interface RouteResponseSpecForProviderResponseParameters {
  /**
   * @schema RouteResponseSpecForProviderResponseParameters#required
   */
  readonly required?: boolean;

}

/**
 * RouteIDRef is a reference to an Route used to set the RouteID.
 *
 * @schema RouteResponseSpecForProviderRouteIdRef
 */
export interface RouteResponseSpecForProviderRouteIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteResponseSpecForProviderRouteIdRef#name
   */
  readonly name: string;

}

/**
 * RouteIDSelector selects references to Route used to set the RouteID.
 *
 * @schema RouteResponseSpecForProviderRouteIdSelector
 */
export interface RouteResponseSpecForProviderRouteIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteResponseSpecForProviderRouteIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteResponseSpecForProviderRouteIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema DomainNameSpecForProviderDomainNameConfigurations
 */
export interface DomainNameSpecForProviderDomainNameConfigurations {
  /**
   * @schema DomainNameSpecForProviderDomainNameConfigurations#apiGatewayDomainName
   */
  readonly apiGatewayDomainName?: string;

  /**
   * Represents an Amazon Resource Name (ARN).
   *
   * @schema DomainNameSpecForProviderDomainNameConfigurations#certificateARN
   */
  readonly certificateARN?: string;

  /**
   * A string with a length between [1-128].
   *
   * @schema DomainNameSpecForProviderDomainNameConfigurations#certificateName
   */
  readonly certificateName?: string;

  /**
   * @schema DomainNameSpecForProviderDomainNameConfigurations#certificateUploadDate
   */
  readonly certificateUploadDate?: Date;

  /**
   * The status of the domain name migration. The valid values are AVAILABLE and UPDATING. If the status is UPDATING, the domain cannot be modified further until the existing operation is complete. If it is AVAILABLE, the domain can be updated.
   *
   * @schema DomainNameSpecForProviderDomainNameConfigurations#domainNameStatus
   */
  readonly domainNameStatus?: string;

  /**
   * @schema DomainNameSpecForProviderDomainNameConfigurations#domainNameStatusMessage
   */
  readonly domainNameStatusMessage?: string;

  /**
   * Represents an endpoint type.
   *
   * @schema DomainNameSpecForProviderDomainNameConfigurations#endpointType
   */
  readonly endpointType?: string;

  /**
   * @schema DomainNameSpecForProviderDomainNameConfigurations#hostedZoneID
   */
  readonly hostedZoneID?: string;

  /**
   * The Transport Layer Security (TLS) version of the security policy for this domain name. The valid values are TLS_1_0 and TLS_1_2.
   *
   * @schema DomainNameSpecForProviderDomainNameConfigurations#securityPolicy
   */
  readonly securityPolicy?: string;

}

/**
 * @schema DomainNameSpecForProviderMutualTlsAuthentication
 */
export interface DomainNameSpecForProviderMutualTlsAuthentication {
  /**
   * A string representation of a URI with a length between [1-2048].
   *
   * @schema DomainNameSpecForProviderMutualTlsAuthentication#truststoreURI
   */
  readonly truststoreURI?: string;

  /**
   * A string with a length between [1-64].
   *
   * @schema DomainNameSpecForProviderMutualTlsAuthentication#truststoreVersion
   */
  readonly truststoreVersion?: string;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema RouteSpecForProviderApiIdRef
 */
export interface RouteSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema RouteSpecForProviderApiIdSelector
 */
export interface RouteSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * AuthorizerIDRef is a reference to an Authorizer used to set the AuthorizerID.
 *
 * @schema RouteSpecForProviderAuthorizerIdRef
 */
export interface RouteSpecForProviderAuthorizerIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteSpecForProviderAuthorizerIdRef#name
   */
  readonly name: string;

}

/**
 * AuthorizerIDSelector selects references to Authorizer used to set the AuthorizerID.
 *
 * @schema RouteSpecForProviderAuthorizerIdSelector
 */
export interface RouteSpecForProviderAuthorizerIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteSpecForProviderAuthorizerIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteSpecForProviderAuthorizerIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema RouteSpecForProviderRequestParameters
 */
export interface RouteSpecForProviderRequestParameters {
  /**
   * @schema RouteSpecForProviderRequestParameters#required
   */
  readonly required?: boolean;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema AuthorizerSpecForProviderApiIdRef
 */
export interface AuthorizerSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema AuthorizerSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema AuthorizerSpecForProviderApiIdSelector
 */
export interface AuthorizerSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema AuthorizerSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema AuthorizerSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema AuthorizerSpecForProviderJwtConfiguration
 */
export interface AuthorizerSpecForProviderJwtConfiguration {
  /**
   * @schema AuthorizerSpecForProviderJwtConfiguration#audience
   */
  readonly audience?: string[];

  /**
   * A string representation of a URI with a length between [1-2048].
   *
   * @schema AuthorizerSpecForProviderJwtConfiguration#issuer
   */
  readonly issuer?: string;

}

/**
 * A Reference to a named object.
 *
 * @schema VpcLinkSpecForProviderSecurityGroupIdRefs
 */
export interface VpcLinkSpecForProviderSecurityGroupIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema VpcLinkSpecForProviderSecurityGroupIdRefs#name
   */
  readonly name: string;

}

/**
 * SecurityGroupIDsSelector selects references to SecurityGroupID used to set the SecurityGroupIDs.
 *
 * @schema VpcLinkSpecForProviderSecurityGroupIdSelector
 */
export interface VpcLinkSpecForProviderSecurityGroupIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VpcLinkSpecForProviderSecurityGroupIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VpcLinkSpecForProviderSecurityGroupIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A Reference to a named object.
 *
 * @schema VpcLinkSpecForProviderSubnetIdRefs
 */
export interface VpcLinkSpecForProviderSubnetIdRefs {
  /**
   * Name of the referenced object.
   *
   * @schema VpcLinkSpecForProviderSubnetIdRefs#name
   */
  readonly name: string;

}

/**
 * SubnetIDsSelector selects references to Subnets used to set the SubnetIDs.
 *
 * @schema VpcLinkSpecForProviderSubnetIdSelector
 */
export interface VpcLinkSpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema VpcLinkSpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema VpcLinkSpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema IntegrationResponseSpecForProviderApiIdRef
 */
export interface IntegrationResponseSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationResponseSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema IntegrationResponseSpecForProviderApiIdSelector
 */
export interface IntegrationResponseSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IntegrationResponseSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IntegrationResponseSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * IntegrationIDRef is a reference to an Integration used to set the IntegrationID.
 *
 * @schema IntegrationResponseSpecForProviderIntegrationIdRef
 */
export interface IntegrationResponseSpecForProviderIntegrationIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema IntegrationResponseSpecForProviderIntegrationIdRef#name
   */
  readonly name: string;

}

/**
 * IntegrationIDSelector selects references to Integration used to set the IntegrationID.
 *
 * @schema IntegrationResponseSpecForProviderIntegrationIdSelector
 */
export interface IntegrationResponseSpecForProviderIntegrationIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema IntegrationResponseSpecForProviderIntegrationIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema IntegrationResponseSpecForProviderIntegrationIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema StageSpecForProviderAccessLogSettings
 */
export interface StageSpecForProviderAccessLogSettings {
  /**
   * Represents an Amazon Resource Name (ARN).
   *
   * @schema StageSpecForProviderAccessLogSettings#destinationARN
   */
  readonly destinationARN?: string;

  /**
   * A string with a length between [1-1024].
   *
   * @schema StageSpecForProviderAccessLogSettings#format
   */
  readonly format?: string;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema StageSpecForProviderApiIdRef
 */
export interface StageSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema StageSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema StageSpecForProviderApiIdSelector
 */
export interface StageSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema StageSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema StageSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * @schema StageSpecForProviderDefaultRouteSettings
 */
export interface StageSpecForProviderDefaultRouteSettings {
  /**
   * @schema StageSpecForProviderDefaultRouteSettings#dataTraceEnabled
   */
  readonly dataTraceEnabled?: boolean;

  /**
   * @schema StageSpecForProviderDefaultRouteSettings#detailedMetricsEnabled
   */
  readonly detailedMetricsEnabled?: boolean;

  /**
   * The logging level.
   *
   * @schema StageSpecForProviderDefaultRouteSettings#loggingLevel
   */
  readonly loggingLevel?: string;

  /**
   * @schema StageSpecForProviderDefaultRouteSettings#throttlingBurstLimit
   */
  readonly throttlingBurstLimit?: number;

  /**
   * @schema StageSpecForProviderDefaultRouteSettings#throttlingRateLimit
   */
  readonly throttlingRateLimit?: number;

}

/**
 * @schema StageSpecForProviderRouteSettings
 */
export interface StageSpecForProviderRouteSettings {
  /**
   * @schema StageSpecForProviderRouteSettings#dataTraceEnabled
   */
  readonly dataTraceEnabled?: boolean;

  /**
   * @schema StageSpecForProviderRouteSettings#detailedMetricsEnabled
   */
  readonly detailedMetricsEnabled?: boolean;

  /**
   * The logging level.
   *
   * @schema StageSpecForProviderRouteSettings#loggingLevel
   */
  readonly loggingLevel?: string;

  /**
   * @schema StageSpecForProviderRouteSettings#throttlingBurstLimit
   */
  readonly throttlingBurstLimit?: number;

  /**
   * @schema StageSpecForProviderRouteSettings#throttlingRateLimit
   */
  readonly throttlingRateLimit?: number;

}

/**
 * APIIDRef is a reference to an API used to set the APIID.
 *
 * @schema DeploymentSpecForProviderApiIdRef
 */
export interface DeploymentSpecForProviderApiIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeploymentSpecForProviderApiIdRef#name
   */
  readonly name: string;

}

/**
 * APIIDSelector selects references to API used to set the APIID.
 *
 * @schema DeploymentSpecForProviderApiIdSelector
 */
export interface DeploymentSpecForProviderApiIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema DeploymentSpecForProviderApiIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema DeploymentSpecForProviderApiIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * StageNameRef is a reference to an Stage used to set the StageName.
 *
 * @schema DeploymentSpecForProviderStageNameRef
 */
export interface DeploymentSpecForProviderStageNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema DeploymentSpecForProviderStageNameRef#name
   */
  readonly name: string;

}

/**
 * StageNameSelector selects references to Stage used to set the StageName.
 *
 * @schema DeploymentSpecForProviderStageNameSelector
 */
export interface DeploymentSpecForProviderStageNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema DeploymentSpecForProviderStageNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema DeploymentSpecForProviderStageNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

