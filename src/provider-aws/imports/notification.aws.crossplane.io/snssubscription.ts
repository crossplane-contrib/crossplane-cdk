// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * SNSSubscription defines a managed resource that represents state of a AWS SNS Subscription
 *
 * @schema SNSSubscription
 */
export class SnsSubscription extends ApiObject {
  /**
   * Defines a "SNSSubscription" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: SnsSubscriptionOptions) {
    super(scope, name, {
      ...options,
      kind: 'SNSSubscription',
      apiVersion: 'notification.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * SNSSubscription defines a managed resource that represents state of a AWS SNS Subscription
 *
 * @schema SNSSubscription
 */
export interface SnsSubscriptionOptions {
  /**
   * @schema SNSSubscription#metadata
   */
  readonly metadata?: any;

  /**
   * SNSSubscriptionSpec defined the desired state of a AWS SNS Topic
   *
   * @schema SNSSubscription#spec
   */
  readonly spec: SnsSubscriptionSpec;

}

/**
 * SNSSubscriptionSpec defined the desired state of a AWS SNS Topic
 *
 * @schema SnsSubscriptionSpec
 */
export interface SnsSubscriptionSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema SnsSubscriptionSpec#deletionPolicy
   */
  readonly deletionPolicy?: SnsSubscriptionSpecDeletionPolicy;

  /**
   * SNSSubscriptionParameters define the desired state of a AWS SNS Topic
   *
   * @schema SnsSubscriptionSpec#forProvider
   */
  readonly forProvider: SnsSubscriptionSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema SnsSubscriptionSpec#providerConfigRef
   */
  readonly providerConfigRef?: SnsSubscriptionSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema SnsSubscriptionSpec#providerRef
   */
  readonly providerRef?: SnsSubscriptionSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema SnsSubscriptionSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: SnsSubscriptionSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema SnsSubscriptionSpecDeletionPolicy
 */
export enum SnsSubscriptionSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = 'Orphan',
  /** Delete */
  DELETE = 'Delete',
}

/**
 * SNSSubscriptionParameters define the desired state of a AWS SNS Topic
 *
 * @schema SnsSubscriptionSpecForProvider
 */
export interface SnsSubscriptionSpecForProvider {
  /**
   *  DeliveryPolicy defines how Amazon SNS retries failed  deliveries to HTTP/S endpoints.
   *
   * @schema SnsSubscriptionSpecForProvider#deliveryPolicy
   */
  readonly deliveryPolicy?: string;

  /**
   * The subscription's endpoint
   *
   * @schema SnsSubscriptionSpecForProvider#endpoint
   */
  readonly endpoint: string;

  /**
   *  The simple JSON object that lets your subscriber receive  only a subset of messages, rather than receiving every message published  to the topic.
   *
   * @schema SnsSubscriptionSpecForProvider#filterPolicy
   */
  readonly filterPolicy?: string;

  /**
   * The subscription's protocol.
   *
   * @schema SnsSubscriptionSpecForProvider#protocol
   */
  readonly protocol: string;

  /**
   *  When set to true, enables raw message delivery  to Amazon SQS or HTTP/S endpoints. This eliminates the need for the endpoints  to process JSON formatting, which is otherwise created for Amazon SNS  metadata.
   *
   * @schema SnsSubscriptionSpecForProvider#rawMessageDelivery
   */
  readonly rawMessageDelivery?: string;

  /**
   *  When specified, sends undeliverable messages to the  specified Amazon SQS dead-letter queue. Messages that can't be delivered  due to client errors (for example, when the subscribed endpoint is unreachable)  or server errors (for example, when the service that powers the subscribed  endpoint becomes unavailable) are held in the dead-letter queue for further  analysis or reprocessing.
   *
   * @schema SnsSubscriptionSpecForProvider#redrivePolicy
   */
  readonly redrivePolicy?: string;

  /**
   * Region is the region you'd like your SNSSubscription to be in.
   *
   * @schema SnsSubscriptionSpecForProvider#region
   */
  readonly region: string;

  /**
   * TopicArn is the Arn of the SNS Topic
   *
   * @schema SnsSubscriptionSpecForProvider#topicArn
   */
  readonly topicArn?: string;

  /**
   * TopicArnRef references a SNS Topic and retrieves its TopicArn
   *
   * @schema SnsSubscriptionSpecForProvider#topicArnRef
   */
  readonly topicArnRef?: SnsSubscriptionSpecForProviderTopicArnRef;

  /**
   * TopicArnSelector selects a reference to a SNS Topic and retrieves its TopicArn
   *
   * @schema SnsSubscriptionSpecForProvider#topicArnSelector
   */
  readonly topicArnSelector?: SnsSubscriptionSpecForProviderTopicArnSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema SnsSubscriptionSpecProviderConfigRef
 */
export interface SnsSubscriptionSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SnsSubscriptionSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema SnsSubscriptionSpecProviderRef
 */
export interface SnsSubscriptionSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema SnsSubscriptionSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema SnsSubscriptionSpecWriteConnectionSecretToRef
 */
export interface SnsSubscriptionSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema SnsSubscriptionSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema SnsSubscriptionSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * TopicArnRef references a SNS Topic and retrieves its TopicArn
 *
 * @schema SnsSubscriptionSpecForProviderTopicArnRef
 */
export interface SnsSubscriptionSpecForProviderTopicArnRef {
  /**
   * Name of the referenced object.
   *
   * @schema SnsSubscriptionSpecForProviderTopicArnRef#name
   */
  readonly name: string;

}

/**
 * TopicArnSelector selects a reference to a SNS Topic and retrieves its TopicArn
 *
 * @schema SnsSubscriptionSpecForProviderTopicArnSelector
 */
export interface SnsSubscriptionSpecForProviderTopicArnSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema SnsSubscriptionSpecForProviderTopicArnSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema SnsSubscriptionSpecForProviderTopicArnSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

