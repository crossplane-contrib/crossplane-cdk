// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A DynamoTable is a managed resource that represents an AWS DynamoDB Table
 *
 * @schema DynamoTable
 */
export class DynamoTable extends ApiObject {
  /**
   * Defines a "DynamoTable" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: DynamoTableOptions) {
    super(scope, name, {
      ...options,
      kind: 'DynamoTable',
      apiVersion: 'database.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * A DynamoTable is a managed resource that represents an AWS DynamoDB Table
 *
 * @schema DynamoTable
 */
export interface DynamoTableOptions {
  /**
   * @schema DynamoTable#metadata
   */
  readonly metadata?: any;

  /**
   * A DynamoTableSpec defines the desired state of a DynamoDB Table.
   *
   * @schema DynamoTable#spec
   */
  readonly spec: DynamoTableSpec;

}

/**
 * A DynamoTableSpec defines the desired state of a DynamoDB Table.
 *
 * @schema DynamoTableSpec
 */
export interface DynamoTableSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema DynamoTableSpec#deletionPolicy
   */
  readonly deletionPolicy?: DynamoTableSpecDeletionPolicy;

  /**
   * DynamoTableParameters define the desired state of an AWS DynomoDBTable
   *
   * @schema DynamoTableSpec#forProvider
   */
  readonly forProvider: DynamoTableSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema DynamoTableSpec#providerConfigRef
   */
  readonly providerConfigRef?: DynamoTableSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema DynamoTableSpec#providerRef
   */
  readonly providerRef?: DynamoTableSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema DynamoTableSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: DynamoTableSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema DynamoTableSpecDeletionPolicy
 */
export enum DynamoTableSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = 'Orphan',
  /** Delete */
  DELETE = 'Delete',
}

/**
 * DynamoTableParameters define the desired state of an AWS DynomoDBTable
 *
 * @schema DynamoTableSpecForProvider
 */
export interface DynamoTableSpecForProvider {
  /**
   * An array of attributes that describe the key schema for the table and indexes.
   *
   * @schema DynamoTableSpecForProvider#attributeDefinitions
   */
  readonly attributeDefinitions: DynamoTableSpecForProviderAttributeDefinitions[];

  /**
   * One or more global secondary indexes (the maximum is 20) to be created on the table.
   *
   * @schema DynamoTableSpecForProvider#globalSecondaryIndexes
   */
  readonly globalSecondaryIndexes?: DynamoTableSpecForProviderGlobalSecondaryIndexes[];

  /**
   * KeySchema specifies the attributes that make up the primary key for a table or an index.
   *
   * @schema DynamoTableSpecForProvider#keySchema
   */
  readonly keySchema: DynamoTableSpecForProviderKeySchema[];

  /**
   * One or more local secondary indexes (the maximum is 5) to be created on the table.
   *
   * @schema DynamoTableSpecForProvider#localSecondaryIndexes
   */
  readonly localSecondaryIndexes?: DynamoTableSpecForProviderLocalSecondaryIndexes[];

  /**
   * Represents the provisioned throughput settings for a specified table or index.
   *
   * @schema DynamoTableSpecForProvider#provisionedThroughput
   */
  readonly provisionedThroughput?: DynamoTableSpecForProviderProvisionedThroughput;

  /**
   * Region is the region you'd like your DynamoTable to be created in.
   *
   * @schema DynamoTableSpecForProvider#region
   */
  readonly region: string;

  /**
   * Represents the settings used to enable server-side encryption.
   *
   * @schema DynamoTableSpecForProvider#sseSpecification
   */
  readonly sseSpecification?: DynamoTableSpecForProviderSseSpecification;

  /**
   * The stream settings for DynamoDB Streams on the table. These settings consist of:
   *
   * @schema DynamoTableSpecForProvider#streamSpecification
   */
  readonly streamSpecification?: DynamoTableSpecForProviderStreamSpecification;

  /**
   * A list of key-value pairs to label the table.
   *
   * @schema DynamoTableSpecForProvider#tag
   */
  readonly tag?: DynamoTableSpecForProviderTag[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema DynamoTableSpecProviderConfigRef
 */
export interface DynamoTableSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema DynamoTableSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema DynamoTableSpecProviderRef
 */
export interface DynamoTableSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema DynamoTableSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema DynamoTableSpecWriteConnectionSecretToRef
 */
export interface DynamoTableSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema DynamoTableSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema DynamoTableSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * AttributeDefinition  represents an attribute for describing the key schema for the table and indexes.
 *
 * @schema DynamoTableSpecForProviderAttributeDefinitions
 */
export interface DynamoTableSpecForProviderAttributeDefinitions {
  /**
   * A name for the attribute.
   *
   * @schema DynamoTableSpecForProviderAttributeDefinitions#attributeName
   */
  readonly attributeName: string;

  /**
   * The data type for the attribute, where:
    * S - the attribute is of type String
    * N - the attribute is of type Number
    * B - the attribute is of type Binary
   *
   * @schema DynamoTableSpecForProviderAttributeDefinitions#attributeType
   */
  readonly attributeType: string;

}

/**
 * GlobalSecondaryIndex represents the properties of a global secondary index.
 *
 * @schema DynamoTableSpecForProviderGlobalSecondaryIndexes
 */
export interface DynamoTableSpecForProviderGlobalSecondaryIndexes {
  /**
   * The name of the global secondary index. The name must be unique among all
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexes#indexName
   */
  readonly indexName?: string;

  /**
   * The complete key schema for a global secondary index, which consists of one
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexes#keySchema
   */
  readonly keySchema?: DynamoTableSpecForProviderGlobalSecondaryIndexesKeySchema[];

  /**
   * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexes#projection
   */
  readonly projection?: DynamoTableSpecForProviderGlobalSecondaryIndexesProjection;

  /**
   * Represents the provisioned throughput settings for the specified global secondary index.
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexes#provisionedThroughput
   */
  readonly provisionedThroughput?: DynamoTableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput;

}

/**
 * KeySchemaElement represents a single element of a key schema which make up the primary key.
 *
 * @schema DynamoTableSpecForProviderKeySchema
 */
export interface DynamoTableSpecForProviderKeySchema {
  /**
   * The name of a key attribute.
   *
   * @schema DynamoTableSpecForProviderKeySchema#attributeName
   */
  readonly attributeName: string;

  /**
   * The role that this key attribute will assume:
   *
   * @schema DynamoTableSpecForProviderKeySchema#keyType
   */
  readonly keyType: string;

}

/**
 * LocalSecondaryIndex represents the properties of a local secondary index.
 *
 * @schema DynamoTableSpecForProviderLocalSecondaryIndexes
 */
export interface DynamoTableSpecForProviderLocalSecondaryIndexes {
  /**
   * The name of the local secondary index. The name must be unique among all other indexes on this table.
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexes#indexName
   */
  readonly indexName?: string;

  /**
   * The complete key schema for the local secondary index, consisting of one
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexes#keySchema
   */
  readonly keySchema?: DynamoTableSpecForProviderLocalSecondaryIndexesKeySchema[];

  /**
   * Represents attributes that are copied (projected) from the table into the local secondary index.
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexes#projection
   */
  readonly projection?: DynamoTableSpecForProviderLocalSecondaryIndexesProjection;

}

/**
 * Represents the provisioned throughput settings for a specified table or index.
 *
 * @schema DynamoTableSpecForProviderProvisionedThroughput
 */
export interface DynamoTableSpecForProviderProvisionedThroughput {
  /**
   * The maximum number of strongly consistent reads consumed per second before
   *
   * @schema DynamoTableSpecForProviderProvisionedThroughput#readCapacityUnits
   */
  readonly readCapacityUnits?: number;

  /**
   * The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
   *
   * @schema DynamoTableSpecForProviderProvisionedThroughput#writeCapacityUnits
   */
  readonly writeCapacityUnits?: number;

}

/**
 * Represents the settings used to enable server-side encryption.
 *
 * @schema DynamoTableSpecForProviderSseSpecification
 */
export interface DynamoTableSpecForProviderSseSpecification {
  /**
   * Server-side encryption type.
   *
   * @schema DynamoTableSpecForProviderSseSpecification#SSEType
   */
  readonly sseType?: string;

  /**
   * Indicates whether server-side encryption is done using an AWS managed CMK or an AWS owned CMK.
   *
   * @schema DynamoTableSpecForProviderSseSpecification#enabled
   */
  readonly enabled?: boolean;

  /**
   * The AWS KMS customer master key (CMK) that should be used for the AWS KMS encryption.
   *
   * @schema DynamoTableSpecForProviderSseSpecification#kmsMasterKeyId
   */
  readonly kmsMasterKeyId?: string;

}

/**
 * The stream settings for DynamoDB Streams on the table. These settings consist of:
 *
 * @schema DynamoTableSpecForProviderStreamSpecification
 */
export interface DynamoTableSpecForProviderStreamSpecification {
  /**
   * When an item in the table is modified, StreamViewType determines what information is written to the stream for this table.
   *
   * @schema DynamoTableSpecForProviderStreamSpecification#StreamViewType
   */
  readonly streamViewType?: string;

  /**
   * Indicates whether DynamoDB Streams is enabled (true) or disabled (false) on the table.
   *
   * @schema DynamoTableSpecForProviderStreamSpecification#streamEnabled
   */
  readonly streamEnabled?: boolean;

}

/**
 * Tag represetnt a key-pair metadata assigned to a DynamoDB Table
 *
 * @schema DynamoTableSpecForProviderTag
 */
export interface DynamoTableSpecForProviderTag {
  /**
   * The key of the tag.
   *
   * @schema DynamoTableSpecForProviderTag#tag
   */
  readonly tag: string;

  /**
   * The value of the tag.
   *
   * @schema DynamoTableSpecForProviderTag#value
   */
  readonly value: string;

}

/**
 * KeySchemaElement represents a single element of a key schema which make up the primary key.
 *
 * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesKeySchema
 */
export interface DynamoTableSpecForProviderGlobalSecondaryIndexesKeySchema {
  /**
   * The name of a key attribute.
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesKeySchema#attributeName
   */
  readonly attributeName: string;

  /**
   * The role that this key attribute will assume:
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesKeySchema#keyType
   */
  readonly keyType: string;

}

/**
 * Represents attributes that are copied (projected) from the table into the global secondary index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
 *
 * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesProjection
 */
export interface DynamoTableSpecForProviderGlobalSecondaryIndexesProjection {
  /**
   * Represents the non-key attribute names which will be projected into the index.
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesProjection#keyType
   */
  readonly keyType: string[];

  /**
   * The set of attributes that are projected into the index:
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesProjection#projectionType
   */
  readonly projectionType: string;

}

/**
 * Represents the provisioned throughput settings for the specified global secondary index.
 *
 * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput
 */
export interface DynamoTableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput {
  /**
   * The maximum number of strongly consistent reads consumed per second before
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput#readCapacityUnits
   */
  readonly readCapacityUnits?: number;

  /**
   * The maximum number of writes consumed per second before DynamoDB returns a ThrottlingException.
   *
   * @schema DynamoTableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput#writeCapacityUnits
   */
  readonly writeCapacityUnits?: number;

}

/**
 * KeySchemaElement represents a single element of a key schema which make up the primary key.
 *
 * @schema DynamoTableSpecForProviderLocalSecondaryIndexesKeySchema
 */
export interface DynamoTableSpecForProviderLocalSecondaryIndexesKeySchema {
  /**
   * The name of a key attribute.
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexesKeySchema#attributeName
   */
  readonly attributeName: string;

  /**
   * The role that this key attribute will assume:
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexesKeySchema#keyType
   */
  readonly keyType: string;

}

/**
 * Represents attributes that are copied (projected) from the table into the local secondary index.
 *
 * @schema DynamoTableSpecForProviderLocalSecondaryIndexesProjection
 */
export interface DynamoTableSpecForProviderLocalSecondaryIndexesProjection {
  /**
   * Represents the non-key attribute names which will be projected into the index.
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexesProjection#keyType
   */
  readonly keyType: string[];

  /**
   * The set of attributes that are projected into the index:
   *
   * @schema DynamoTableSpecForProviderLocalSecondaryIndexesProjection#projectionType
   */
  readonly projectionType: string;

}

