// generated by cdk8s
import { ApiObject } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A NATGateway is a managed resource that represents an AWS VPC NAT Gateway.
 *
 * @schema NATGateway
 */
export class NatGateway extends ApiObject {
  /**
   * Defines a "NATGateway" API object
   * @param scope the scope in which to define this object
   * @param name a scope-local name for the object
   * @param options configuration options
   */
  public constructor(scope: Construct, name: string, options: NatGatewayOptions) {
    super(scope, name, {
      ...options,
      kind: 'NATGateway',
      apiVersion: 'ec2.aws.crossplane.io/v1alpha1',
    });
  }
}

/**
 * A NATGateway is a managed resource that represents an AWS VPC NAT Gateway.
 *
 * @schema NATGateway
 */
export interface NatGatewayOptions {
  /**
   * @schema NATGateway#metadata
   */
  readonly metadata?: any;

  /**
   * NATGatewaySpec defines the desired state of a NAT Gateway
   *
   * @schema NATGateway#spec
   */
  readonly spec: NatGatewaySpec;

}

/**
 * NATGatewaySpec defines the desired state of a NAT Gateway
 *
 * @schema NatGatewaySpec
 */
export interface NatGatewaySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema NatGatewaySpec#deletionPolicy
   */
  readonly deletionPolicy?: NatGatewaySpecDeletionPolicy;

  /**
   * NATGatewayParameters defined the desired state of an AWS VPC NAT Gateway
   *
   * @schema NatGatewaySpec#forProvider
   */
  readonly forProvider: NatGatewaySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema NatGatewaySpec#providerConfigRef
   */
  readonly providerConfigRef?: NatGatewaySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema NatGatewaySpec#providerRef
   */
  readonly providerRef?: NatGatewaySpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema NatGatewaySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NatGatewaySpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema NatGatewaySpecDeletionPolicy
 */
export enum NatGatewaySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = 'Orphan',
  /** Delete */
  DELETE = 'Delete',
}

/**
 * NATGatewayParameters defined the desired state of an AWS VPC NAT Gateway
 *
 * @schema NatGatewaySpecForProvider
 */
export interface NatGatewaySpecForProvider {
  /**
   * AllocationID is the Elastic IP allocation ID
   *
   * @schema NatGatewaySpecForProvider#allocationId
   */
  readonly allocationId?: string;

  /**
   * AllocationIDRef references an EIP and retrieves it's allocation id
   *
   * @schema NatGatewaySpecForProvider#allocationIdRef
   */
  readonly allocationIdRef?: NatGatewaySpecForProviderAllocationIdRef;

  /**
   * AllocationIDSelector references an EIP by selector and retrieves it's allocation id
   *
   * @schema NatGatewaySpecForProvider#allocationIdSelector
   */
  readonly allocationIdSelector?: NatGatewaySpecForProviderAllocationIdSelector;

  /**
   * Region is the region you'd like your NATGateway to be created in.
   *
   * @schema NatGatewaySpecForProvider#region
   */
  readonly region: string;

  /**
   * SubnetID is the subnet the NAT gateways needs to be associated to
   *
   * @schema NatGatewaySpecForProvider#subnetId
   */
  readonly subnetId?: string;

  /**
   * SubnetIDRef references a subnet and retrives it's subnet id
   *
   * @schema NatGatewaySpecForProvider#subnetIdRef
   */
  readonly subnetIdRef?: NatGatewaySpecForProviderSubnetIdRef;

  /**
   * SubnetIDSelector references a subnet by selector and retrives it's subnet id
   *
   * @schema NatGatewaySpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: NatGatewaySpecForProviderSubnetIdSelector;

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema NatGatewaySpecForProvider#tags
   */
  readonly tags?: NatGatewaySpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema NatGatewaySpecProviderConfigRef
 */
export interface NatGatewaySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema NatGatewaySpecProviderRef
 */
export interface NatGatewaySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema NatGatewaySpecWriteConnectionSecretToRef
 */
export interface NatGatewaySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema NatGatewaySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema NatGatewaySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * AllocationIDRef references an EIP and retrieves it's allocation id
 *
 * @schema NatGatewaySpecForProviderAllocationIdRef
 */
export interface NatGatewaySpecForProviderAllocationIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecForProviderAllocationIdRef#name
   */
  readonly name: string;

}

/**
 * AllocationIDSelector references an EIP by selector and retrieves it's allocation id
 *
 * @schema NatGatewaySpecForProviderAllocationIdSelector
 */
export interface NatGatewaySpecForProviderAllocationIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NatGatewaySpecForProviderAllocationIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NatGatewaySpecForProviderAllocationIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * SubnetIDRef references a subnet and retrives it's subnet id
 *
 * @schema NatGatewaySpecForProviderSubnetIdRef
 */
export interface NatGatewaySpecForProviderSubnetIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecForProviderSubnetIdRef#name
   */
  readonly name: string;

}

/**
 * SubnetIDSelector references a subnet by selector and retrives it's subnet id
 *
 * @schema NatGatewaySpecForProviderSubnetIdSelector
 */
export interface NatGatewaySpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NatGatewaySpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NatGatewaySpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Tag defines a tag
 *
 * @schema NatGatewaySpecForProviderTags
 */
export interface NatGatewaySpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema NatGatewaySpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema NatGatewaySpecForProviderTags#value
   */
  readonly value: string;

}

