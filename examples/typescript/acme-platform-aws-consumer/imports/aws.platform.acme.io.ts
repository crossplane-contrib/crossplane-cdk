// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * 
 *
 * @schema Cluster
 */
export class Cluster extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Cluster"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'aws.platform.acme.io/v1alpha1',
    kind: 'Cluster',
  }

  /**
   * Renders a Kubernetes manifest for "Cluster".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ClusterProps): any {
    return {
      ...Cluster.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Cluster" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ClusterProps) {
    super(scope, id, Cluster.manifest(props));
  }
}

/**
 * @schema Cluster
 */
export interface ClusterProps {
  /**
   * @schema Cluster#metadata
   */
  readonly metadata?: any;

  /**
   * @schema Cluster#spec
   */
  readonly spec: ClusterSpec;

}

/**
 * @schema ClusterSpec
 */
export interface ClusterSpec {
  /**
   * @schema ClusterSpec#compositionRef
   */
  readonly compositionRef?: ClusterSpecCompositionRef;

  /**
   * @schema ClusterSpec#compositionSelector
   */
  readonly compositionSelector?: ClusterSpecCompositionSelector;

  /**
   * ID of this Cluster that other objects will use to refer to it.
   *
   * @schema ClusterSpec#id
   */
  readonly id: string;

  /**
   * Cluster configuration parameters.
   *
   * @schema ClusterSpec#parameters
   */
  readonly parameters: ClusterSpecParameters;

  /**
   * @schema ClusterSpec#resourceRef
   */
  readonly resourceRef?: ClusterSpecResourceRef;

  /**
   * @schema ClusterSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ClusterSpecWriteConnectionSecretToRef;

}

/**
 * @schema ClusterSpecCompositionRef
 */
export interface ClusterSpecCompositionRef {
  /**
   * @schema ClusterSpecCompositionRef#name
   */
  readonly name: string;

}

/**
 * @schema ClusterSpecCompositionSelector
 */
export interface ClusterSpecCompositionSelector {
  /**
   * @schema ClusterSpecCompositionSelector#matchLabels
   */
  readonly matchLabels: { [key: string]: string };

}

/**
 * Cluster configuration parameters.
 *
 * @schema ClusterSpecParameters
 */
export interface ClusterSpecParameters {
  /**
   * A reference to the Network object that this cluster should be connected to.
   *
   * @schema ClusterSpecParameters#networkRef
   */
  readonly networkRef: ClusterSpecParametersNetworkRef;

  /**
   * Cluster node configuration parameters.
   *
   * @schema ClusterSpecParameters#nodes
   */
  readonly nodes: ClusterSpecParametersNodes;

  /**
   * Services configuration parameters.
   *
   * @schema ClusterSpecParameters#services
   */
  readonly services?: ClusterSpecParametersServices;

}

/**
 * @schema ClusterSpecResourceRef
 */
export interface ClusterSpecResourceRef {
  /**
   * @schema ClusterSpecResourceRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema ClusterSpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema ClusterSpecResourceRef#name
   */
  readonly name: string;

}

/**
 * @schema ClusterSpecWriteConnectionSecretToRef
 */
export interface ClusterSpecWriteConnectionSecretToRef {
  /**
   * @schema ClusterSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

}

/**
 * A reference to the Network object that this cluster should be connected to.
 *
 * @schema ClusterSpecParametersNetworkRef
 */
export interface ClusterSpecParametersNetworkRef {
  /**
   * ID of the Network object this ref points to.
   *
   * @schema ClusterSpecParametersNetworkRef#id
   */
  readonly id: string;

}

/**
 * Cluster node configuration parameters.
 *
 * @schema ClusterSpecParametersNodes
 */
export interface ClusterSpecParametersNodes {
  /**
   * Desired node count, from 1 to 100.
   *
   * @schema ClusterSpecParametersNodes#count
   */
  readonly count: number;

  /**
   * Size of node.
   *
   * @schema ClusterSpecParametersNodes#size
   */
  readonly size: ClusterSpecParametersNodesSize;

}

/**
 * Services configuration parameters.
 *
 * @schema ClusterSpecParametersServices
 */
export interface ClusterSpecParametersServices {
  /**
   * Configuration for operators.
   *
   * @schema ClusterSpecParametersServices#operators
   */
  readonly operators?: ClusterSpecParametersServicesOperators;

}

/**
 * Size of node.
 *
 * @schema ClusterSpecParametersNodesSize
 */
export enum ClusterSpecParametersNodesSize {
  /** small */
  SMALL = "small",
  /** medium */
  MEDIUM = "medium",
  /** large */
  LARGE = "large",
}

/**
 * Configuration for operators.
 *
 * @schema ClusterSpecParametersServicesOperators
 */
export interface ClusterSpecParametersServicesOperators {
  /**
   * Configuration for the Prometheus operator.
   *
   * @schema ClusterSpecParametersServicesOperators#prometheus
   */
  readonly prometheus?: ClusterSpecParametersServicesOperatorsPrometheus;

}

/**
 * Configuration for the Prometheus operator.
 *
 * @schema ClusterSpecParametersServicesOperatorsPrometheus
 */
export interface ClusterSpecParametersServicesOperatorsPrometheus {
  /**
   * Prometheus operator version to run.
   *
   * @schema ClusterSpecParametersServicesOperatorsPrometheus#version
   */
  readonly version?: string;

}

/**
 * 
 *
 * @schema Network
 */
export class Network extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Network"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'aws.platform.acme.io/v1alpha1',
    kind: 'Network',
  }

  /**
   * Renders a Kubernetes manifest for "Network".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: NetworkProps): any {
    return {
      ...Network.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Network" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: NetworkProps) {
    super(scope, id, Network.manifest(props));
  }
}

/**
 * @schema Network
 */
export interface NetworkProps {
  /**
   * @schema Network#metadata
   */
  readonly metadata?: any;

  /**
   * @schema Network#spec
   */
  readonly spec: NetworkSpec;

}

/**
 * @schema NetworkSpec
 */
export interface NetworkSpec {
  /**
   * A reference to the Cluster object that this network will be used for.
   *
   * @schema NetworkSpec#clusterRef
   */
  readonly clusterRef: NetworkSpecClusterRef;

  /**
   * @schema NetworkSpec#compositionRef
   */
  readonly compositionRef?: NetworkSpecCompositionRef;

  /**
   * @schema NetworkSpec#compositionSelector
   */
  readonly compositionSelector?: NetworkSpecCompositionSelector;

  /**
   * ID of this Network that other objects will use to refer to it.
   *
   * @schema NetworkSpec#id
   */
  readonly id: string;

  /**
   * @schema NetworkSpec#resourceRef
   */
  readonly resourceRef?: NetworkSpecResourceRef;

  /**
   * @schema NetworkSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NetworkSpecWriteConnectionSecretToRef;

}

/**
 * A reference to the Cluster object that this network will be used for.
 *
 * @schema NetworkSpecClusterRef
 */
export interface NetworkSpecClusterRef {
  /**
   * ID of the Cluster object this ref points to.
   *
   * @schema NetworkSpecClusterRef#id
   */
  readonly id: string;

}

/**
 * @schema NetworkSpecCompositionRef
 */
export interface NetworkSpecCompositionRef {
  /**
   * @schema NetworkSpecCompositionRef#name
   */
  readonly name: string;

}

/**
 * @schema NetworkSpecCompositionSelector
 */
export interface NetworkSpecCompositionSelector {
  /**
   * @schema NetworkSpecCompositionSelector#matchLabels
   */
  readonly matchLabels: { [key: string]: string };

}

/**
 * @schema NetworkSpecResourceRef
 */
export interface NetworkSpecResourceRef {
  /**
   * @schema NetworkSpecResourceRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema NetworkSpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema NetworkSpecResourceRef#name
   */
  readonly name: string;

}

/**
 * @schema NetworkSpecWriteConnectionSecretToRef
 */
export interface NetworkSpecWriteConnectionSecretToRef {
  /**
   * @schema NetworkSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

}

/**
 * 
 *
 * @schema PostgreSQLInstance
 */
export class PostgreSqlInstance extends ApiObject {
  /**
   * Returns the apiVersion and kind for "PostgreSQLInstance"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'aws.platform.acme.io/v1alpha1',
    kind: 'PostgreSQLInstance',
  }

  /**
   * Renders a Kubernetes manifest for "PostgreSQLInstance".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: PostgreSqlInstanceProps): any {
    return {
      ...PostgreSqlInstance.GVK,
      ...props,
    };
  }

  /**
   * Defines a "PostgreSQLInstance" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: PostgreSqlInstanceProps) {
    super(scope, id, PostgreSqlInstance.manifest(props));
  }
}

/**
 * @schema PostgreSQLInstance
 */
export interface PostgreSqlInstanceProps {
  /**
   * @schema PostgreSQLInstance#metadata
   */
  readonly metadata?: any;

  /**
   * @schema PostgreSQLInstance#spec
   */
  readonly spec: PostgreSqlInstanceSpec;

}

/**
 * @schema PostgreSqlInstanceSpec
 */
export interface PostgreSqlInstanceSpec {
  /**
   * @schema PostgreSqlInstanceSpec#compositionRef
   */
  readonly compositionRef?: PostgreSqlInstanceSpecCompositionRef;

  /**
   * @schema PostgreSqlInstanceSpec#compositionSelector
   */
  readonly compositionSelector?: PostgreSqlInstanceSpecCompositionSelector;

  /**
   * @schema PostgreSqlInstanceSpec#parameters
   */
  readonly parameters: PostgreSqlInstanceSpecParameters;

  /**
   * @schema PostgreSqlInstanceSpec#resourceRef
   */
  readonly resourceRef?: PostgreSqlInstanceSpecResourceRef;

  /**
   * @schema PostgreSqlInstanceSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: PostgreSqlInstanceSpecWriteConnectionSecretToRef;

}

/**
 * @schema PostgreSqlInstanceSpecCompositionRef
 */
export interface PostgreSqlInstanceSpecCompositionRef {
  /**
   * @schema PostgreSqlInstanceSpecCompositionRef#name
   */
  readonly name: string;

}

/**
 * @schema PostgreSqlInstanceSpecCompositionSelector
 */
export interface PostgreSqlInstanceSpecCompositionSelector {
  /**
   * @schema PostgreSqlInstanceSpecCompositionSelector#matchLabels
   */
  readonly matchLabels: { [key: string]: string };

}

/**
 * @schema PostgreSqlInstanceSpecParameters
 */
export interface PostgreSqlInstanceSpecParameters {
  /**
   * A reference to the Network object that this postgres should be connected to.
   *
   * @schema PostgreSqlInstanceSpecParameters#networkRef
   */
  readonly networkRef: PostgreSqlInstanceSpecParametersNetworkRef;

  /**
   * GB of storage for your database
   *
   * @schema PostgreSqlInstanceSpecParameters#storageGB
   */
  readonly storageGB: number;

}

/**
 * @schema PostgreSqlInstanceSpecResourceRef
 */
export interface PostgreSqlInstanceSpecResourceRef {
  /**
   * @schema PostgreSqlInstanceSpecResourceRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * @schema PostgreSqlInstanceSpecResourceRef#kind
   */
  readonly kind: string;

  /**
   * @schema PostgreSqlInstanceSpecResourceRef#name
   */
  readonly name: string;

}

/**
 * @schema PostgreSqlInstanceSpecWriteConnectionSecretToRef
 */
export interface PostgreSqlInstanceSpecWriteConnectionSecretToRef {
  /**
   * @schema PostgreSqlInstanceSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

}

/**
 * A reference to the Network object that this postgres should be connected to.
 *
 * @schema PostgreSqlInstanceSpecParametersNetworkRef
 */
export interface PostgreSqlInstanceSpecParametersNetworkRef {
  /**
   * ID of the Network object this ref points to.
   *
   * @schema PostgreSqlInstanceSpecParametersNetworkRef#id
   */
  readonly id: string;

}

