// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A ElasticIP is a managed resource that represents an AWS VPC Security Group.
 *
 * @schema ElasticIP
 */
export class ElasticIp extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ElasticIP"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1alpha1',
    kind: 'ElasticIP',
  }

  /**
   * Adds "ElasticIP" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: ElasticIpProps): any {
    return {
      ...props,
      kind: 'ElasticIP',
      apiVersion: 'ec2.aws.crossplane.io/v1alpha1',
    };
  }

  /**
   * Defines a "ElasticIP" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ElasticIpProps) {
    super(scope, id, ElasticIp.propsWithGVK(props));
  }
}

/**
 * A ElasticIP is a managed resource that represents an AWS VPC Security Group.
 *
 * @schema ElasticIP
 */
export interface ElasticIpProps {
  /**
   * @schema ElasticIP#metadata
   */
  readonly metadata?: any;

  /**
   * A ElasticIPSpec defines the desired state of a ElasticIP.
   *
   * @schema ElasticIP#spec
   */
  readonly spec: ElasticIpSpec;

}

/**
 * A ElasticIPSpec defines the desired state of a ElasticIP.
 *
 * @schema ElasticIpSpec
 */
export interface ElasticIpSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema ElasticIpSpec#deletionPolicy
   */
  readonly deletionPolicy?: ElasticIpSpecDeletionPolicy;

  /**
   * ElasticIPParameters define the desired state of an AWS Elastic IP
   *
   * @schema ElasticIpSpec#forProvider
   */
  readonly forProvider: ElasticIpSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema ElasticIpSpec#providerConfigRef
   */
  readonly providerConfigRef?: ElasticIpSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema ElasticIpSpec#providerRef
   */
  readonly providerRef?: ElasticIpSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema ElasticIpSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: ElasticIpSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema ElasticIpSpecDeletionPolicy
 */
export enum ElasticIpSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * ElasticIPParameters define the desired state of an AWS Elastic IP
 *
 * @schema ElasticIpSpecForProvider
 */
export interface ElasticIpSpecForProvider {
  /**
   * [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
   *
   * @schema ElasticIpSpecForProvider#address
   */
  readonly address?: string;

  /**
   * The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool
   *
   * @schema ElasticIpSpecForProvider#customerOwnedIPv4Pool
   */
  readonly customerOwnedIPv4Pool?: string;

  /**
   * Set to vpc to allocate the address for use with instances in a VPC. Default: The address is for use with instances in EC2-Classic.
   *
   * @schema ElasticIpSpecForProvider#domain
   */
  readonly domain?: ElasticIpSpecForProviderDomain;

  /**
   * The location from which the IP address is advertised. Use this parameter to limit the address to this location. 
 A network border group is a unique set of Availability Zones or Local Zones from where AWS advertises IP addresses and limits the addresses to the group. IP addresses cannot move between network border groups. 
 Use DescribeAvailabilityZones (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeAvailabilityZones.html) to view the network border groups. 
 You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an InvalidParameterCombination error. For more information, see Error Codes (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html).
   *
   * @schema ElasticIpSpecForProvider#networkBorderGroup
   */
  readonly networkBorderGroup?: string;

  /**
   * The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the Address parameter instead.
   *
   * @schema ElasticIpSpecForProvider#publicIpv4Pool
   */
  readonly publicIpv4Pool?: string;

  /**
   * Region is the region you'd like your VPC to be created in.
   *
   * @schema ElasticIpSpecForProvider#region
   */
  readonly region: string;

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema ElasticIpSpecForProvider#tags
   */
  readonly tags?: ElasticIpSpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema ElasticIpSpecProviderConfigRef
 */
export interface ElasticIpSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ElasticIpSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema ElasticIpSpecProviderRef
 */
export interface ElasticIpSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema ElasticIpSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema ElasticIpSpecWriteConnectionSecretToRef
 */
export interface ElasticIpSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema ElasticIpSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ElasticIpSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Set to vpc to allocate the address for use with instances in a VPC. Default: The address is for use with instances in EC2-Classic.
 *
 * @schema ElasticIpSpecForProviderDomain
 */
export enum ElasticIpSpecForProviderDomain {
  /** vpc */
  VPC = "vpc",
  /** standard */
  STANDARD = "standard",
}

/**
 * Tag defines a tag
 *
 * @schema ElasticIpSpecForProviderTags
 */
export interface ElasticIpSpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema ElasticIpSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema ElasticIpSpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * An InternetGateway is a managed resource that represents an AWS VPC Internet Gateway.
 *
 * @schema InternetGateway
 */
export class InternetGateway extends ApiObject {
  /**
   * Returns the apiVersion and kind for "InternetGateway"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    kind: 'InternetGateway',
  }

  /**
   * Adds "InternetGateway" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: InternetGatewayProps): any {
    return {
      ...props,
      kind: 'InternetGateway',
      apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    };
  }

  /**
   * Defines a "InternetGateway" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: InternetGatewayProps) {
    super(scope, id, InternetGateway.propsWithGVK(props));
  }
}

/**
 * An InternetGateway is a managed resource that represents an AWS VPC Internet Gateway.
 *
 * @schema InternetGateway
 */
export interface InternetGatewayProps {
  /**
   * @schema InternetGateway#metadata
   */
  readonly metadata?: any;

  /**
   * An InternetGatewaySpec defines the desired state of an InternetGateway.
   *
   * @schema InternetGateway#spec
   */
  readonly spec: InternetGatewaySpec;

}

/**
 * An InternetGatewaySpec defines the desired state of an InternetGateway.
 *
 * @schema InternetGatewaySpec
 */
export interface InternetGatewaySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema InternetGatewaySpec#deletionPolicy
   */
  readonly deletionPolicy?: InternetGatewaySpecDeletionPolicy;

  /**
   * InternetGatewayParameters define the desired state of an AWS VPC Internet Gateway.
   *
   * @schema InternetGatewaySpec#forProvider
   */
  readonly forProvider: InternetGatewaySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema InternetGatewaySpec#providerConfigRef
   */
  readonly providerConfigRef?: InternetGatewaySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema InternetGatewaySpec#providerRef
   */
  readonly providerRef?: InternetGatewaySpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema InternetGatewaySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: InternetGatewaySpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema InternetGatewaySpecDeletionPolicy
 */
export enum InternetGatewaySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * InternetGatewayParameters define the desired state of an AWS VPC Internet Gateway.
 *
 * @schema InternetGatewaySpecForProvider
 */
export interface InternetGatewaySpecForProvider {
  /**
   * Region is the region you'd like your VPC to be created in.
   *
   * @schema InternetGatewaySpecForProvider#region
   */
  readonly region?: string;

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema InternetGatewaySpecForProvider#tags
   */
  readonly tags?: InternetGatewaySpecForProviderTags[];

  /**
   * VPCID is the ID of the VPC.
   *
   * @schema InternetGatewaySpecForProvider#vpcId
   */
  readonly vpcId?: string;

  /**
   * VPCIDRef references a VPC to and retrieves its vpcId
   *
   * @schema InternetGatewaySpecForProvider#vpcIdRef
   */
  readonly vpcIdRef?: InternetGatewaySpecForProviderVpcIdRef;

  /**
   * VPCIDSelector selects a reference to a VPC to and retrieves its vpcId
   *
   * @schema InternetGatewaySpecForProvider#vpcIdSelector
   */
  readonly vpcIdSelector?: InternetGatewaySpecForProviderVpcIdSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema InternetGatewaySpecProviderConfigRef
 */
export interface InternetGatewaySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema InternetGatewaySpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema InternetGatewaySpecProviderRef
 */
export interface InternetGatewaySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema InternetGatewaySpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema InternetGatewaySpecWriteConnectionSecretToRef
 */
export interface InternetGatewaySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema InternetGatewaySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema InternetGatewaySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Tag defines a tag
 *
 * @schema InternetGatewaySpecForProviderTags
 */
export interface InternetGatewaySpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema InternetGatewaySpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema InternetGatewaySpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * VPCIDRef references a VPC to and retrieves its vpcId
 *
 * @schema InternetGatewaySpecForProviderVpcIdRef
 */
export interface InternetGatewaySpecForProviderVpcIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema InternetGatewaySpecForProviderVpcIdRef#name
   */
  readonly name: string;

}

/**
 * VPCIDSelector selects a reference to a VPC to and retrieves its vpcId
 *
 * @schema InternetGatewaySpecForProviderVpcIdSelector
 */
export interface InternetGatewaySpecForProviderVpcIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema InternetGatewaySpecForProviderVpcIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema InternetGatewaySpecForProviderVpcIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A NATGateway is a managed resource that represents an AWS VPC NAT Gateway.
 *
 * @schema NATGateway
 */
export class NatGateway extends ApiObject {
  /**
   * Returns the apiVersion and kind for "NATGateway"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1alpha1',
    kind: 'NATGateway',
  }

  /**
   * Adds "NATGateway" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: NatGatewayProps): any {
    return {
      ...props,
      kind: 'NATGateway',
      apiVersion: 'ec2.aws.crossplane.io/v1alpha1',
    };
  }

  /**
   * Defines a "NATGateway" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: NatGatewayProps) {
    super(scope, id, NatGateway.propsWithGVK(props));
  }
}

/**
 * A NATGateway is a managed resource that represents an AWS VPC NAT Gateway.
 *
 * @schema NATGateway
 */
export interface NatGatewayProps {
  /**
   * @schema NATGateway#metadata
   */
  readonly metadata?: any;

  /**
   * NATGatewaySpec defines the desired state of a NAT Gateway
   *
   * @schema NATGateway#spec
   */
  readonly spec: NatGatewaySpec;

}

/**
 * NATGatewaySpec defines the desired state of a NAT Gateway
 *
 * @schema NatGatewaySpec
 */
export interface NatGatewaySpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema NatGatewaySpec#deletionPolicy
   */
  readonly deletionPolicy?: NatGatewaySpecDeletionPolicy;

  /**
   * NATGatewayParameters defined the desired state of an AWS VPC NAT Gateway
   *
   * @schema NatGatewaySpec#forProvider
   */
  readonly forProvider: NatGatewaySpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema NatGatewaySpec#providerConfigRef
   */
  readonly providerConfigRef?: NatGatewaySpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema NatGatewaySpec#providerRef
   */
  readonly providerRef?: NatGatewaySpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema NatGatewaySpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: NatGatewaySpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema NatGatewaySpecDeletionPolicy
 */
export enum NatGatewaySpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * NATGatewayParameters defined the desired state of an AWS VPC NAT Gateway
 *
 * @schema NatGatewaySpecForProvider
 */
export interface NatGatewaySpecForProvider {
  /**
   * AllocationID is the Elastic IP allocation ID
   *
   * @schema NatGatewaySpecForProvider#allocationId
   */
  readonly allocationId?: string;

  /**
   * AllocationIDRef references an EIP and retrieves it's allocation id
   *
   * @schema NatGatewaySpecForProvider#allocationIdRef
   */
  readonly allocationIdRef?: NatGatewaySpecForProviderAllocationIdRef;

  /**
   * AllocationIDSelector references an EIP by selector and retrieves it's allocation id
   *
   * @schema NatGatewaySpecForProvider#allocationIdSelector
   */
  readonly allocationIdSelector?: NatGatewaySpecForProviderAllocationIdSelector;

  /**
   * Region is the region you'd like your NATGateway to be created in.
   *
   * @schema NatGatewaySpecForProvider#region
   */
  readonly region: string;

  /**
   * SubnetID is the subnet the NAT gateways needs to be associated to
   *
   * @schema NatGatewaySpecForProvider#subnetId
   */
  readonly subnetId?: string;

  /**
   * SubnetIDRef references a subnet and retrives it's subnet id
   *
   * @schema NatGatewaySpecForProvider#subnetIdRef
   */
  readonly subnetIdRef?: NatGatewaySpecForProviderSubnetIdRef;

  /**
   * SubnetIDSelector references a subnet by selector and retrives it's subnet id
   *
   * @schema NatGatewaySpecForProvider#subnetIdSelector
   */
  readonly subnetIdSelector?: NatGatewaySpecForProviderSubnetIdSelector;

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema NatGatewaySpecForProvider#tags
   */
  readonly tags?: NatGatewaySpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema NatGatewaySpecProviderConfigRef
 */
export interface NatGatewaySpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema NatGatewaySpecProviderRef
 */
export interface NatGatewaySpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema NatGatewaySpecWriteConnectionSecretToRef
 */
export interface NatGatewaySpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema NatGatewaySpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema NatGatewaySpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * AllocationIDRef references an EIP and retrieves it's allocation id
 *
 * @schema NatGatewaySpecForProviderAllocationIdRef
 */
export interface NatGatewaySpecForProviderAllocationIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecForProviderAllocationIdRef#name
   */
  readonly name: string;

}

/**
 * AllocationIDSelector references an EIP by selector and retrieves it's allocation id
 *
 * @schema NatGatewaySpecForProviderAllocationIdSelector
 */
export interface NatGatewaySpecForProviderAllocationIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NatGatewaySpecForProviderAllocationIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NatGatewaySpecForProviderAllocationIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * SubnetIDRef references a subnet and retrives it's subnet id
 *
 * @schema NatGatewaySpecForProviderSubnetIdRef
 */
export interface NatGatewaySpecForProviderSubnetIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema NatGatewaySpecForProviderSubnetIdRef#name
   */
  readonly name: string;

}

/**
 * SubnetIDSelector references a subnet by selector and retrives it's subnet id
 *
 * @schema NatGatewaySpecForProviderSubnetIdSelector
 */
export interface NatGatewaySpecForProviderSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema NatGatewaySpecForProviderSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema NatGatewaySpecForProviderSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * Tag defines a tag
 *
 * @schema NatGatewaySpecForProviderTags
 */
export interface NatGatewaySpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema NatGatewaySpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema NatGatewaySpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * A RouteTable is a managed resource that represents an AWS VPC Route Table.
 *
 * @schema RouteTable
 */
export class RouteTable extends ApiObject {
  /**
   * Returns the apiVersion and kind for "RouteTable"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1alpha4',
    kind: 'RouteTable',
  }

  /**
   * Adds "RouteTable" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: RouteTableProps): any {
    return {
      ...props,
      kind: 'RouteTable',
      apiVersion: 'ec2.aws.crossplane.io/v1alpha4',
    };
  }

  /**
   * Defines a "RouteTable" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: RouteTableProps) {
    super(scope, id, RouteTable.propsWithGVK(props));
  }
}

/**
 * A RouteTable is a managed resource that represents an AWS VPC Route Table.
 *
 * @schema RouteTable
 */
export interface RouteTableProps {
  /**
   * @schema RouteTable#metadata
   */
  readonly metadata?: any;

  /**
   * A RouteTableSpec defines the desired state of a RouteTable.
   *
   * @schema RouteTable#spec
   */
  readonly spec: RouteTableSpec;

}

/**
 * A RouteTableSpec defines the desired state of a RouteTable.
 *
 * @schema RouteTableSpec
 */
export interface RouteTableSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema RouteTableSpec#deletionPolicy
   */
  readonly deletionPolicy?: RouteTableSpecDeletionPolicy;

  /**
   * RouteTableParameters define the desired state of an AWS VPC Route Table.
   *
   * @schema RouteTableSpec#forProvider
   */
  readonly forProvider: RouteTableSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema RouteTableSpec#providerConfigRef
   */
  readonly providerConfigRef?: RouteTableSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema RouteTableSpec#providerRef
   */
  readonly providerRef?: RouteTableSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema RouteTableSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: RouteTableSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema RouteTableSpecDeletionPolicy
 */
export enum RouteTableSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * RouteTableParameters define the desired state of an AWS VPC Route Table.
 *
 * @schema RouteTableSpecForProvider
 */
export interface RouteTableSpecForProvider {
  /**
   * The associations between the route table and one or more subnets.
   *
   * @schema RouteTableSpecForProvider#associations
   */
  readonly associations: RouteTableSpecForProviderAssociations[];

  /**
   * Region is the region you'd like your VPC to be created in.
   *
   * @schema RouteTableSpecForProvider#region
   */
  readonly region: string;

  /**
   * the routes in the route table
   *
   * @schema RouteTableSpecForProvider#routes
   */
  readonly routes: RouteTableSpecForProviderRoutes[];

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema RouteTableSpecForProvider#tags
   */
  readonly tags?: RouteTableSpecForProviderTags[];

  /**
   * VPCID is the ID of the VPC.
   *
   * @schema RouteTableSpecForProvider#vpcId
   */
  readonly vpcId?: string;

  /**
   * VPCIDRef references a VPC to retrieve its vpcId
   *
   * @schema RouteTableSpecForProvider#vpcIdRef
   */
  readonly vpcIdRef?: RouteTableSpecForProviderVpcIdRef;

  /**
   * VPCIDSelector selects a reference to a VPC to retrieve its vpcId
   *
   * @schema RouteTableSpecForProvider#vpcIdSelector
   */
  readonly vpcIdSelector?: RouteTableSpecForProviderVpcIdSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema RouteTableSpecProviderConfigRef
 */
export interface RouteTableSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteTableSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema RouteTableSpecProviderRef
 */
export interface RouteTableSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteTableSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema RouteTableSpecWriteConnectionSecretToRef
 */
export interface RouteTableSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema RouteTableSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema RouteTableSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Association describes an association between a route table and a subnet.
 *
 * @schema RouteTableSpecForProviderAssociations
 */
export interface RouteTableSpecForProviderAssociations {
  /**
   * The ID of the subnet. A subnet ID is not returned for an implicit association.
   *
   * @schema RouteTableSpecForProviderAssociations#subnetId
   */
  readonly subnetId?: string;

  /**
   * A referencer to retrieve the ID of a subnet
   *
   * @schema RouteTableSpecForProviderAssociations#subnetIdRef
   */
  readonly subnetIdRef?: RouteTableSpecForProviderAssociationsSubnetIdRef;

  /**
   * A selector to select a referencer to retrieve the ID of a subnet
   *
   * @schema RouteTableSpecForProviderAssociations#subnetIdSelector
   */
  readonly subnetIdSelector?: RouteTableSpecForProviderAssociationsSubnetIdSelector;

}

/**
 * Route describes a route in a route table.
 *
 * @schema RouteTableSpecForProviderRoutes
 */
export interface RouteTableSpecForProviderRoutes {
  /**
   * The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.
   *
   * @schema RouteTableSpecForProviderRoutes#destinationCidrBlock
   */
  readonly destinationCidrBlock?: string;

  /**
   * The ID of an internet gateway or virtual private gateway attached to your VPC.
   *
   * @schema RouteTableSpecForProviderRoutes#gatewayId
   */
  readonly gatewayId?: string;

  /**
   * A referencer to retrieve the ID of a gateway
   *
   * @schema RouteTableSpecForProviderRoutes#gatewayIdRef
   */
  readonly gatewayIdRef?: RouteTableSpecForProviderRoutesGatewayIdRef;

  /**
   * A selector to select a referencer to retrieve the ID of a gateway
   *
   * @schema RouteTableSpecForProviderRoutes#gatewayIdSelector
   */
  readonly gatewayIdSelector?: RouteTableSpecForProviderRoutesGatewayIdSelector;

}

/**
 * Tag defines a tag
 *
 * @schema RouteTableSpecForProviderTags
 */
export interface RouteTableSpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema RouteTableSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema RouteTableSpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * VPCIDRef references a VPC to retrieve its vpcId
 *
 * @schema RouteTableSpecForProviderVpcIdRef
 */
export interface RouteTableSpecForProviderVpcIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteTableSpecForProviderVpcIdRef#name
   */
  readonly name: string;

}

/**
 * VPCIDSelector selects a reference to a VPC to retrieve its vpcId
 *
 * @schema RouteTableSpecForProviderVpcIdSelector
 */
export interface RouteTableSpecForProviderVpcIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteTableSpecForProviderVpcIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteTableSpecForProviderVpcIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A referencer to retrieve the ID of a subnet
 *
 * @schema RouteTableSpecForProviderAssociationsSubnetIdRef
 */
export interface RouteTableSpecForProviderAssociationsSubnetIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteTableSpecForProviderAssociationsSubnetIdRef#name
   */
  readonly name: string;

}

/**
 * A selector to select a referencer to retrieve the ID of a subnet
 *
 * @schema RouteTableSpecForProviderAssociationsSubnetIdSelector
 */
export interface RouteTableSpecForProviderAssociationsSubnetIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteTableSpecForProviderAssociationsSubnetIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteTableSpecForProviderAssociationsSubnetIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A referencer to retrieve the ID of a gateway
 *
 * @schema RouteTableSpecForProviderRoutesGatewayIdRef
 */
export interface RouteTableSpecForProviderRoutesGatewayIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema RouteTableSpecForProviderRoutesGatewayIdRef#name
   */
  readonly name: string;

}

/**
 * A selector to select a referencer to retrieve the ID of a gateway
 *
 * @schema RouteTableSpecForProviderRoutesGatewayIdSelector
 */
export interface RouteTableSpecForProviderRoutesGatewayIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema RouteTableSpecForProviderRoutesGatewayIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema RouteTableSpecForProviderRoutesGatewayIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A SecurityGroup is a managed resource that represents an AWS VPC Security Group.
 *
 * @schema SecurityGroup
 */
export class SecurityGroup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "SecurityGroup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    kind: 'SecurityGroup',
  }

  /**
   * Adds "SecurityGroup" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: SecurityGroupProps): any {
    return {
      ...props,
      kind: 'SecurityGroup',
      apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    };
  }

  /**
   * Defines a "SecurityGroup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SecurityGroupProps) {
    super(scope, id, SecurityGroup.propsWithGVK(props));
  }
}

/**
 * A SecurityGroup is a managed resource that represents an AWS VPC Security Group.
 *
 * @schema SecurityGroup
 */
export interface SecurityGroupProps {
  /**
   * @schema SecurityGroup#metadata
   */
  readonly metadata?: any;

  /**
   * A SecurityGroupSpec defines the desired state of a SecurityGroup.
   *
   * @schema SecurityGroup#spec
   */
  readonly spec: SecurityGroupSpec;

}

/**
 * A SecurityGroupSpec defines the desired state of a SecurityGroup.
 *
 * @schema SecurityGroupSpec
 */
export interface SecurityGroupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema SecurityGroupSpec#deletionPolicy
   */
  readonly deletionPolicy?: SecurityGroupSpecDeletionPolicy;

  /**
   * SecurityGroupParameters define the desired state of an AWS VPC Security Group.
   *
   * @schema SecurityGroupSpec#forProvider
   */
  readonly forProvider: SecurityGroupSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema SecurityGroupSpec#providerConfigRef
   */
  readonly providerConfigRef?: SecurityGroupSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema SecurityGroupSpec#providerRef
   */
  readonly providerRef?: SecurityGroupSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema SecurityGroupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: SecurityGroupSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema SecurityGroupSpecDeletionPolicy
 */
export enum SecurityGroupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * SecurityGroupParameters define the desired state of an AWS VPC Security Group.
 *
 * @schema SecurityGroupSpecForProvider
 */
export interface SecurityGroupSpecForProvider {
  /**
   * A description of the security group.
   *
   * @schema SecurityGroupSpecForProvider#description
   */
  readonly description: string;

  /**
   * [EC2-VPC] One or more outbound rules associated with the security group.
   *
   * @schema SecurityGroupSpecForProvider#egress
   */
  readonly egress?: SecurityGroupSpecForProviderEgress[];

  /**
   * The name of the security group.
   *
   * @schema SecurityGroupSpecForProvider#groupName
   */
  readonly groupName: string;

  /**
   * One or more inbound rules associated with the security group.
   *
   * @schema SecurityGroupSpecForProvider#ingress
   */
  readonly ingress?: SecurityGroupSpecForProviderIngress[];

  /**
   * Region is the region you'd like your SecurityGroup to be created in.
   *
   * @schema SecurityGroupSpecForProvider#region
   */
  readonly region?: string;

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema SecurityGroupSpecForProvider#tags
   */
  readonly tags?: SecurityGroupSpecForProviderTags[];

  /**
   * VPCID is the ID of the VPC.
   *
   * @schema SecurityGroupSpecForProvider#vpcId
   */
  readonly vpcId?: string;

  /**
   * VPCIDRef references a VPC to and retrieves its vpcId
   *
   * @schema SecurityGroupSpecForProvider#vpcIdRef
   */
  readonly vpcIdRef?: SecurityGroupSpecForProviderVpcIdRef;

  /**
   * VPCIDSelector selects a reference to a VPC to and retrieves its vpcId
   *
   * @schema SecurityGroupSpecForProvider#vpcIdSelector
   */
  readonly vpcIdSelector?: SecurityGroupSpecForProviderVpcIdSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema SecurityGroupSpecProviderConfigRef
 */
export interface SecurityGroupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SecurityGroupSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema SecurityGroupSpecProviderRef
 */
export interface SecurityGroupSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema SecurityGroupSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema SecurityGroupSpecWriteConnectionSecretToRef
 */
export interface SecurityGroupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema SecurityGroupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema SecurityGroupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * IPPermission Describes a set of permissions for a security group rule.
 *
 * @schema SecurityGroupSpecForProviderEgress
 */
export interface SecurityGroupSpecForProviderEgress {
  /**
   * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
   *
   * @schema SecurityGroupSpecForProviderEgress#fromPort
   */
  readonly fromPort?: number;

  /**
   * The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)). 
 [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
   *
   * @schema SecurityGroupSpecForProviderEgress#ipProtocol
   */
  readonly ipProtocol: string;

  /**
   * The IPv4 ranges.
   *
   * @schema SecurityGroupSpecForProviderEgress#ipRanges
   */
  readonly ipRanges?: SecurityGroupSpecForProviderEgressIpRanges[];

  /**
   * The IPv6 ranges. 
 [VPC only]
   *
   * @schema SecurityGroupSpecForProviderEgress#ipv6Ranges
   */
  readonly ipv6Ranges?: SecurityGroupSpecForProviderEgressIpv6Ranges[];

  /**
   * PrefixListIDs for an AWS service. With outbound rules, this is the AWS service to access through a VPC endpoint from instances associated with the security group. 
 [VPC only]
   *
   * @schema SecurityGroupSpecForProviderEgress#prefixListIds
   */
  readonly prefixListIds?: SecurityGroupSpecForProviderEgressPrefixListIds[];

  /**
   * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
   *
   * @schema SecurityGroupSpecForProviderEgress#toPort
   */
  readonly toPort?: number;

  /**
   * UserIDGroupPairs are the source security group and AWS account ID pairs. It contains one or more accounts and security groups to allow flows from security groups of other accounts.
   *
   * @schema SecurityGroupSpecForProviderEgress#userIdGroupPairs
   */
  readonly userIdGroupPairs?: SecurityGroupSpecForProviderEgressUserIdGroupPairs[];

}

/**
 * IPPermission Describes a set of permissions for a security group rule.
 *
 * @schema SecurityGroupSpecForProviderIngress
 */
export interface SecurityGroupSpecForProviderIngress {
  /**
   * The start of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you must specify all codes.
   *
   * @schema SecurityGroupSpecForProviderIngress#fromPort
   */
  readonly fromPort?: number;

  /**
   * The IP protocol name (tcp, udp, icmp, icmpv6) or number (see Protocol Numbers (http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml)). 
 [VPC only] Use -1 to specify all protocols. When authorizing security group rules, specifying -1 or a protocol number other than tcp, udp, icmp, or icmpv6 allows traffic on all ports, regardless of any port range you specify. For tcp, udp, and icmp, you must specify a port range. For icmpv6, the port range is optional; if you omit the port range, traffic for all types and codes is allowed.
   *
   * @schema SecurityGroupSpecForProviderIngress#ipProtocol
   */
  readonly ipProtocol: string;

  /**
   * The IPv4 ranges.
   *
   * @schema SecurityGroupSpecForProviderIngress#ipRanges
   */
  readonly ipRanges?: SecurityGroupSpecForProviderIngressIpRanges[];

  /**
   * The IPv6 ranges. 
 [VPC only]
   *
   * @schema SecurityGroupSpecForProviderIngress#ipv6Ranges
   */
  readonly ipv6Ranges?: SecurityGroupSpecForProviderIngressIpv6Ranges[];

  /**
   * PrefixListIDs for an AWS service. With outbound rules, this is the AWS service to access through a VPC endpoint from instances associated with the security group. 
 [VPC only]
   *
   * @schema SecurityGroupSpecForProviderIngress#prefixListIds
   */
  readonly prefixListIds?: SecurityGroupSpecForProviderIngressPrefixListIds[];

  /**
   * The end of port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you must specify all codes.
   *
   * @schema SecurityGroupSpecForProviderIngress#toPort
   */
  readonly toPort?: number;

  /**
   * UserIDGroupPairs are the source security group and AWS account ID pairs. It contains one or more accounts and security groups to allow flows from security groups of other accounts.
   *
   * @schema SecurityGroupSpecForProviderIngress#userIdGroupPairs
   */
  readonly userIdGroupPairs?: SecurityGroupSpecForProviderIngressUserIdGroupPairs[];

}

/**
 * Tag defines a tag
 *
 * @schema SecurityGroupSpecForProviderTags
 */
export interface SecurityGroupSpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema SecurityGroupSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema SecurityGroupSpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * VPCIDRef references a VPC to and retrieves its vpcId
 *
 * @schema SecurityGroupSpecForProviderVpcIdRef
 */
export interface SecurityGroupSpecForProviderVpcIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema SecurityGroupSpecForProviderVpcIdRef#name
   */
  readonly name: string;

}

/**
 * VPCIDSelector selects a reference to a VPC to and retrieves its vpcId
 *
 * @schema SecurityGroupSpecForProviderVpcIdSelector
 */
export interface SecurityGroupSpecForProviderVpcIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema SecurityGroupSpecForProviderVpcIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema SecurityGroupSpecForProviderVpcIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * IPRange describes an IPv4 range.
 *
 * @schema SecurityGroupSpecForProviderEgressIpRanges
 */
export interface SecurityGroupSpecForProviderEgressIpRanges {
  /**
   * The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
   *
   * @schema SecurityGroupSpecForProviderEgressIpRanges#cidrIp
   */
  readonly cidrIp: string;

  /**
   * A description for the security group rule that references this IPv4 address range. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
   *
   * @schema SecurityGroupSpecForProviderEgressIpRanges#description
   */
  readonly description?: string;

}

/**
 * IPv6Range describes an IPv6 range.
 *
 * @schema SecurityGroupSpecForProviderEgressIpv6Ranges
 */
export interface SecurityGroupSpecForProviderEgressIpv6Ranges {
  /**
   * The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
   *
   * @schema SecurityGroupSpecForProviderEgressIpv6Ranges#cidrIPv6
   */
  readonly cidrIPv6: string;

  /**
   * A description for the security group rule that references this IPv6 address range. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
   *
   * @schema SecurityGroupSpecForProviderEgressIpv6Ranges#description
   */
  readonly description?: string;

}

/**
 * PrefixListID describes a prefix list ID.
 *
 * @schema SecurityGroupSpecForProviderEgressPrefixListIds
 */
export interface SecurityGroupSpecForProviderEgressPrefixListIds {
  /**
   * A description for the security group rule that references this prefix list ID. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
   *
   * @schema SecurityGroupSpecForProviderEgressPrefixListIds#description
   */
  readonly description?: string;

  /**
   * The ID of the prefix.
   *
   * @schema SecurityGroupSpecForProviderEgressPrefixListIds#prefixListId
   */
  readonly prefixListId: string;

}

/**
 * UserIDGroupPair describes a security group and AWS account ID pair.
 *
 * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs
 */
export interface SecurityGroupSpecForProviderEgressUserIdGroupPairs {
  /**
   * A description for the security group rule that references this user ID group pair. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
   *
   * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs#description
   */
  readonly description?: string;

  /**
   * The ID of the security group.
   *
   * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs#groupId
   */
  readonly groupId?: string;

  /**
   * The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID. 
 For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
   *
   * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs#groupName
   */
  readonly groupName?: string;

  /**
   * The ID of an AWS account. 
 For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. 
 [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
   *
   * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs#userId
   */
  readonly userId?: string;

  /**
   * The ID of the VPC for the referenced security group, if applicable.
   *
   * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs#vpcId
   */
  readonly vpcId?: string;

  /**
   * The ID of the VPC peering connection, if applicable.
   *
   * @schema SecurityGroupSpecForProviderEgressUserIdGroupPairs#vpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * IPRange describes an IPv4 range.
 *
 * @schema SecurityGroupSpecForProviderIngressIpRanges
 */
export interface SecurityGroupSpecForProviderIngressIpRanges {
  /**
   * The IPv4 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv4 address, use the /32 prefix length.
   *
   * @schema SecurityGroupSpecForProviderIngressIpRanges#cidrIp
   */
  readonly cidrIp: string;

  /**
   * A description for the security group rule that references this IPv4 address range. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
   *
   * @schema SecurityGroupSpecForProviderIngressIpRanges#description
   */
  readonly description?: string;

}

/**
 * IPv6Range describes an IPv6 range.
 *
 * @schema SecurityGroupSpecForProviderIngressIpv6Ranges
 */
export interface SecurityGroupSpecForProviderIngressIpv6Ranges {
  /**
   * The IPv6 CIDR range. You can either specify a CIDR range or a source security group, not both. To specify a single IPv6 address, use the /128 prefix length.
   *
   * @schema SecurityGroupSpecForProviderIngressIpv6Ranges#cidrIPv6
   */
  readonly cidrIPv6: string;

  /**
   * A description for the security group rule that references this IPv6 address range. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&;{}!$*
   *
   * @schema SecurityGroupSpecForProviderIngressIpv6Ranges#description
   */
  readonly description?: string;

}

/**
 * PrefixListID describes a prefix list ID.
 *
 * @schema SecurityGroupSpecForProviderIngressPrefixListIds
 */
export interface SecurityGroupSpecForProviderIngressPrefixListIds {
  /**
   * A description for the security group rule that references this prefix list ID. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
   *
   * @schema SecurityGroupSpecForProviderIngressPrefixListIds#description
   */
  readonly description?: string;

  /**
   * The ID of the prefix.
   *
   * @schema SecurityGroupSpecForProviderIngressPrefixListIds#prefixListId
   */
  readonly prefixListId: string;

}

/**
 * UserIDGroupPair describes a security group and AWS account ID pair.
 *
 * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs
 */
export interface SecurityGroupSpecForProviderIngressUserIdGroupPairs {
  /**
   * A description for the security group rule that references this user ID group pair. 
 Constraints: Up to 255 characters in length. Allowed characters are a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=;{}!$*
   *
   * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs#description
   */
  readonly description?: string;

  /**
   * The ID of the security group.
   *
   * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs#groupId
   */
  readonly groupId?: string;

  /**
   * The name of the security group. In a request, use this parameter for a security group in EC2-Classic or a default VPC only. For a security group in a nondefault VPC, use the security group ID. 
 For a referenced security group in another VPC, this value is not returned if the referenced security group is deleted.
   *
   * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs#groupName
   */
  readonly groupName?: string;

  /**
   * The ID of an AWS account. 
 For a referenced security group in another VPC, the account ID of the referenced security group is returned in the response. If the referenced security group is deleted, this value is not returned. 
 [EC2-Classic] Required when adding or removing rules that reference a security group in another AWS account.
   *
   * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs#userId
   */
  readonly userId?: string;

  /**
   * The ID of the VPC for the referenced security group, if applicable.
   *
   * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs#vpcId
   */
  readonly vpcId?: string;

  /**
   * The ID of the VPC peering connection, if applicable.
   *
   * @schema SecurityGroupSpecForProviderIngressUserIdGroupPairs#vpcPeeringConnectionId
   */
  readonly vpcPeeringConnectionId?: string;

}

/**
 * A Subnet is a managed resource that represents an AWS VPC Subnet.
 *
 * @schema Subnet
 */
export class Subnet extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Subnet"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    kind: 'Subnet',
  }

  /**
   * Adds "Subnet" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: SubnetProps): any {
    return {
      ...props,
      kind: 'Subnet',
      apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    };
  }

  /**
   * Defines a "Subnet" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: SubnetProps) {
    super(scope, id, Subnet.propsWithGVK(props));
  }
}

/**
 * A Subnet is a managed resource that represents an AWS VPC Subnet.
 *
 * @schema Subnet
 */
export interface SubnetProps {
  /**
   * @schema Subnet#metadata
   */
  readonly metadata?: any;

  /**
   * A SubnetSpec defines the desired state of a Subnet.
   *
   * @schema Subnet#spec
   */
  readonly spec: SubnetSpec;

}

/**
 * A SubnetSpec defines the desired state of a Subnet.
 *
 * @schema SubnetSpec
 */
export interface SubnetSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema SubnetSpec#deletionPolicy
   */
  readonly deletionPolicy?: SubnetSpecDeletionPolicy;

  /**
   * SubnetParameters define the desired state of an AWS VPC Subnet.
   *
   * @schema SubnetSpec#forProvider
   */
  readonly forProvider: SubnetSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema SubnetSpec#providerConfigRef
   */
  readonly providerConfigRef?: SubnetSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema SubnetSpec#providerRef
   */
  readonly providerRef?: SubnetSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema SubnetSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: SubnetSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema SubnetSpecDeletionPolicy
 */
export enum SubnetSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * SubnetParameters define the desired state of an AWS VPC Subnet.
 *
 * @schema SubnetSpecForProvider
 */
export interface SubnetSpecForProvider {
  /**
   * Indicates whether a network interface created in this subnet (including a network interface created by RunInstances) receives an IPv6 address.
   *
   * @schema SubnetSpecForProvider#assignIpv6AddressOnCreation
   */
  readonly assignIpv6AddressOnCreation?: boolean;

  /**
   * The Availability Zone for the subnet. Default: AWS selects one for you. If you create more than one subnet in your VPC, we may not necessarily select a different zone for each subnet.
   *
   * @schema SubnetSpecForProvider#availabilityZone
   */
  readonly availabilityZone?: string;

  /**
   * The AZ ID or the Local Zone ID of the subnet.
   *
   * @schema SubnetSpecForProvider#availabilityZoneId
   */
  readonly availabilityZoneId?: string;

  /**
   * CIDRBlock is the IPv4 network range for the Subnet, in CIDR notation. For example, 10.0.0.0/18.
   *
   * @schema SubnetSpecForProvider#cidrBlock
   */
  readonly cidrBlock: string;

  /**
   * The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
   *
   * @schema SubnetSpecForProvider#ipv6CIDRBlock
   */
  readonly ipv6CIDRBlock?: string;

  /**
   * Indicates whether instances launched in this subnet receive a public IPv4 address.
   *
   * @schema SubnetSpecForProvider#mapPublicIPOnLaunch
   */
  readonly mapPublicIPOnLaunch?: boolean;

  /**
   * Region is the region you'd like your Subnet to be created in.
   *
   * @schema SubnetSpecForProvider#region
   */
  readonly region?: string;

  /**
   * Tags represents to current ec2 tags.
   *
   * @schema SubnetSpecForProvider#tags
   */
  readonly tags?: SubnetSpecForProviderTags[];

  /**
   * VPCID is the ID of the VPC.
   *
   * @schema SubnetSpecForProvider#vpcId
   */
  readonly vpcId?: string;

  /**
   * VPCIDRef reference a VPC to retrieve its vpcId
   *
   * @schema SubnetSpecForProvider#vpcIdRef
   */
  readonly vpcIdRef?: SubnetSpecForProviderVpcIdRef;

  /**
   * VPCIDSelector selects reference to a VPC to retrieve its vpcId
   *
   * @schema SubnetSpecForProvider#vpcIdSelector
   */
  readonly vpcIdSelector?: SubnetSpecForProviderVpcIdSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema SubnetSpecProviderConfigRef
 */
export interface SubnetSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema SubnetSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema SubnetSpecProviderRef
 */
export interface SubnetSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema SubnetSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema SubnetSpecWriteConnectionSecretToRef
 */
export interface SubnetSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema SubnetSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema SubnetSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Tag defines a tag
 *
 * @schema SubnetSpecForProviderTags
 */
export interface SubnetSpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema SubnetSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema SubnetSpecForProviderTags#value
   */
  readonly value: string;

}

/**
 * VPCIDRef reference a VPC to retrieve its vpcId
 *
 * @schema SubnetSpecForProviderVpcIdRef
 */
export interface SubnetSpecForProviderVpcIdRef {
  /**
   * Name of the referenced object.
   *
   * @schema SubnetSpecForProviderVpcIdRef#name
   */
  readonly name: string;

}

/**
 * VPCIDSelector selects reference to a VPC to retrieve its vpcId
 *
 * @schema SubnetSpecForProviderVpcIdSelector
 */
export interface SubnetSpecForProviderVpcIdSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema SubnetSpecForProviderVpcIdSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema SubnetSpecForProviderVpcIdSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * A VPC is a managed resource that represents an AWS Virtual Private Cloud.
 *
 * @schema VPC
 */
export class Vpc extends ApiObject {
  /**
   * Returns the apiVersion and kind for "VPC"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    kind: 'VPC',
  }

  /**
   * Adds "VPC" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: VpcProps): any {
    return {
      ...props,
      kind: 'VPC',
      apiVersion: 'ec2.aws.crossplane.io/v1beta1',
    };
  }

  /**
   * Defines a "VPC" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: VpcProps) {
    super(scope, id, Vpc.propsWithGVK(props));
  }
}

/**
 * A VPC is a managed resource that represents an AWS Virtual Private Cloud.
 *
 * @schema VPC
 */
export interface VpcProps {
  /**
   * @schema VPC#metadata
   */
  readonly metadata?: any;

  /**
   * A VPCSpec defines the desired state of a VPC.
   *
   * @schema VPC#spec
   */
  readonly spec: VpcSpec;

}

/**
 * A VPCSpec defines the desired state of a VPC.
 *
 * @schema VpcSpec
 */
export interface VpcSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema VpcSpec#deletionPolicy
   */
  readonly deletionPolicy?: VpcSpecDeletionPolicy;

  /**
   * VPCParameters define the desired state of an AWS Virtual Private Cloud.
   *
   * @schema VpcSpec#forProvider
   */
  readonly forProvider: VpcSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema VpcSpec#providerConfigRef
   */
  readonly providerConfigRef?: VpcSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema VpcSpec#providerRef
   */
  readonly providerRef?: VpcSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema VpcSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: VpcSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema VpcSpecDeletionPolicy
 */
export enum VpcSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * VPCParameters define the desired state of an AWS Virtual Private Cloud.
 *
 * @schema VpcSpecForProvider
 */
export interface VpcSpecForProvider {
  /**
   * CIDRBlock is the IPv4 network range for the VPC, in CIDR notation. For example, 10.0.0.0/16.
   *
   * @schema VpcSpecForProvider#cidrBlock
   */
  readonly cidrBlock: string;

  /**
   * Indicates whether the instances launched in the VPC get DNS hostnames.
   *
   * @schema VpcSpecForProvider#enableDnsHostNames
   */
  readonly enableDnsHostNames?: boolean;

  /**
   * A boolean flag to enable/disable DNS support in the VPC
   *
   * @schema VpcSpecForProvider#enableDnsSupport
   */
  readonly enableDnsSupport?: boolean;

  /**
   * The allowed tenancy of instances launched into the VPC.
   *
   * @schema VpcSpecForProvider#instanceTenancy
   */
  readonly instanceTenancy?: string;

  /**
   * Region is the region you'd like your VPC to be created in.
   *
   * @schema VpcSpecForProvider#region
   */
  readonly region?: string;

  /**
   * Tags are used as identification helpers between AWS resources.
   *
   * @schema VpcSpecForProvider#tags
   */
  readonly tags?: VpcSpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema VpcSpecProviderConfigRef
 */
export interface VpcSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema VpcSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema VpcSpecProviderRef
 */
export interface VpcSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema VpcSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema VpcSpecWriteConnectionSecretToRef
 */
export interface VpcSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema VpcSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema VpcSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * Tag defines a tag
 *
 * @schema VpcSpecForProviderTags
 */
export interface VpcSpecForProviderTags {
  /**
   * Key is the name of the tag.
   *
   * @schema VpcSpecForProviderTags#key
   */
  readonly key: string;

  /**
   * Value is the value of the tag.
   *
   * @schema VpcSpecForProviderTags#value
   */
  readonly value: string;

}

