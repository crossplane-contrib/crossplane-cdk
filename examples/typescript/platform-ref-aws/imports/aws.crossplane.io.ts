// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A Provider configures an AWS 'provider', i.e. a connection to a particular AWS account using a particular AWS IAM role. Deprecated: Please migrate to ProviderConfig.
 *
 * @schema Provider
 */
export class Provider extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Provider"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'aws.crossplane.io/v1alpha3',
    kind: 'Provider',
  }

  /**
   * Adds "Provider" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: ProviderProps): any {
    return {
      ...props,
      kind: 'Provider',
      apiVersion: 'aws.crossplane.io/v1alpha3',
    };
  }

  /**
   * Defines a "Provider" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProviderProps) {
    super(scope, id, Provider.propsWithGVK(props));
  }
}

/**
 * A Provider configures an AWS 'provider', i.e. a connection to a particular AWS account using a particular AWS IAM role. Deprecated: Please migrate to ProviderConfig.
 *
 * @schema Provider
 */
export interface ProviderProps {
  /**
   * @schema Provider#metadata
   */
  readonly metadata?: any;

  /**
   * A ProviderSpec defines the desired state of a Provider.
   *
   * @schema Provider#spec
   */
  readonly spec: ProviderSpec;

}

/**
 * A ProviderSpec defines the desired state of a Provider.
 *
 * @schema ProviderSpec
 */
export interface ProviderSpec {
  /**
   * CredentialsSecretRef references a specific secret's key that contains the credentials that are used to connect to the provider.
   *
   * @schema ProviderSpec#credentialsSecretRef
   */
  readonly credentialsSecretRef?: ProviderSpecCredentialsSecretRef;

  /**
   * Region for managed resources created using this AWS provider.
   *
   * @schema ProviderSpec#region
   */
  readonly region: string;

  /**
   * UseServiceAccount indicates to use an IAM Role associated Kubernetes ServiceAccount for authentication instead of a credentials Secret. https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts.html 
 If set to true, credentialsSecretRef will be ignored.
   *
   * @schema ProviderSpec#useServiceAccount
   */
  readonly useServiceAccount?: boolean;

}

/**
 * CredentialsSecretRef references a specific secret's key that contains the credentials that are used to connect to the provider.
 *
 * @schema ProviderSpecCredentialsSecretRef
 */
export interface ProviderSpecCredentialsSecretRef {
  /**
   * The key to select.
   *
   * @schema ProviderSpecCredentialsSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema ProviderSpecCredentialsSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProviderSpecCredentialsSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * A ProviderConfig configures how AWS controllers will connect to AWS API.
 *
 * @schema ProviderConfig
 */
export class ProviderConfig extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProviderConfig"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'aws.crossplane.io/v1beta1',
    kind: 'ProviderConfig',
  }

  /**
   * Adds "ProviderConfig" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: ProviderConfigProps): any {
    return {
      ...props,
      kind: 'ProviderConfig',
      apiVersion: 'aws.crossplane.io/v1beta1',
    };
  }

  /**
   * Defines a "ProviderConfig" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProviderConfigProps) {
    super(scope, id, ProviderConfig.propsWithGVK(props));
  }
}

/**
 * A ProviderConfig configures how AWS controllers will connect to AWS API.
 *
 * @schema ProviderConfig
 */
export interface ProviderConfigProps {
  /**
   * @schema ProviderConfig#metadata
   */
  readonly metadata?: any;

  /**
   * A ProviderConfigSpec defines the desired state of a ProviderConfig.
   *
   * @schema ProviderConfig#spec
   */
  readonly spec: ProviderConfigSpec;

}

/**
 * A ProviderConfigSpec defines the desired state of a ProviderConfig.
 *
 * @schema ProviderConfigSpec
 */
export interface ProviderConfigSpec {
  /**
   * Credentials required to authenticate to this provider.
   *
   * @schema ProviderConfigSpec#credentials
   */
  readonly credentials: ProviderConfigSpecCredentials;

}

/**
 * Credentials required to authenticate to this provider.
 *
 * @schema ProviderConfigSpecCredentials
 */
export interface ProviderConfigSpecCredentials {
  /**
   * A CredentialsSecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
   *
   * @schema ProviderConfigSpecCredentials#secretRef
   */
  readonly secretRef?: ProviderConfigSpecCredentialsSecretRef;

  /**
   * Source of the provider credentials.
   *
   * @schema ProviderConfigSpecCredentials#source
   */
  readonly source: ProviderConfigSpecCredentialsSource;

}

/**
 * A CredentialsSecretRef is a reference to a secret key that contains the credentials that must be used to connect to the provider.
 *
 * @schema ProviderConfigSpecCredentialsSecretRef
 */
export interface ProviderConfigSpecCredentialsSecretRef {
  /**
   * The key to select.
   *
   * @schema ProviderConfigSpecCredentialsSecretRef#key
   */
  readonly key: string;

  /**
   * Name of the secret.
   *
   * @schema ProviderConfigSpecCredentialsSecretRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema ProviderConfigSpecCredentialsSecretRef#namespace
   */
  readonly namespace: string;

}

/**
 * Source of the provider credentials.
 *
 * @schema ProviderConfigSpecCredentialsSource
 */
export enum ProviderConfigSpecCredentialsSource {
  /** None */
  NONE = "None",
  /** Secret */
  SECRET = "Secret",
  /** InjectedIdentity */
  INJECTED_IDENTITY = "InjectedIdentity",
}

/**
 * A ProviderConfigUsage indicates that a resource is using a ProviderConfig.
 *
 * @schema ProviderConfigUsage
 */
export class ProviderConfigUsage extends ApiObject {
  /**
   * Returns the apiVersion and kind for "ProviderConfigUsage"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'aws.crossplane.io/v1beta1',
    kind: 'ProviderConfigUsage',
  }

  /**
   * Adds "ProviderConfigUsage" kind and apiVersion to props
   * @param props initialization props
   */
  public static propsWithGVK(props: ProviderConfigUsageProps): any {
    return {
      ...props,
      kind: 'ProviderConfigUsage',
      apiVersion: 'aws.crossplane.io/v1beta1',
    };
  }

  /**
   * Defines a "ProviderConfigUsage" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProviderConfigUsageProps) {
    super(scope, id, ProviderConfigUsage.propsWithGVK(props));
  }
}

/**
 * A ProviderConfigUsage indicates that a resource is using a ProviderConfig.
 *
 * @schema ProviderConfigUsage
 */
export interface ProviderConfigUsageProps {
  /**
   * @schema ProviderConfigUsage#metadata
   */
  readonly metadata?: any;

  /**
   * ProviderConfigReference to the provider config being used.
   *
   * @schema ProviderConfigUsage#providerConfigRef
   */
  readonly providerConfigRef: ProviderConfigUsageProviderConfigRef;

  /**
   * ResourceReference to the managed resource using the provider config.
   *
   * @schema ProviderConfigUsage#resourceRef
   */
  readonly resourceRef: ProviderConfigUsageResourceRef;

}

/**
 * ProviderConfigReference to the provider config being used.
 *
 * @schema ProviderConfigUsageProviderConfigRef
 */
export interface ProviderConfigUsageProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema ProviderConfigUsageProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ResourceReference to the managed resource using the provider config.
 *
 * @schema ProviderConfigUsageResourceRef
 */
export interface ProviderConfigUsageResourceRef {
  /**
   * APIVersion of the referenced object.
   *
   * @schema ProviderConfigUsageResourceRef#apiVersion
   */
  readonly apiVersion: string;

  /**
   * Kind of the referenced object.
   *
   * @schema ProviderConfigUsageResourceRef#kind
   */
  readonly kind: string;

  /**
   * Name of the referenced object.
   *
   * @schema ProviderConfigUsageResourceRef#name
   */
  readonly name: string;

  /**
   * UID of the referenced object.
   *
   * @schema ProviderConfigUsageResourceRef#uid
   */
  readonly uid?: string;

}

