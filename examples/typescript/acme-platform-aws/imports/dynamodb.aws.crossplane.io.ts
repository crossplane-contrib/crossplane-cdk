// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * Backup is the Schema for the Backups API
 *
 * @schema Backup
 */
export class Backup extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Backup"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'dynamodb.aws.crossplane.io/v1alpha1',
    kind: 'Backup',
  }

  /**
   * Renders a Kubernetes manifest for "Backup".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: BackupProps = {}): any {
    return {
      ...Backup.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Backup" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: BackupProps = {}) {
    super(scope, id, Backup.manifest(props));
  }
}

/**
 * Backup is the Schema for the Backups API
 *
 * @schema Backup
 */
export interface BackupProps {
  /**
   * @schema Backup#metadata
   */
  readonly metadata?: any;

  /**
   * BackupSpec defines the desired state of Backup
   *
   * @schema Backup#spec
   */
  readonly spec?: BackupSpec;

}

/**
 * BackupSpec defines the desired state of Backup
 *
 * @schema BackupSpec
 */
export interface BackupSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema BackupSpec#deletionPolicy
   */
  readonly deletionPolicy?: BackupSpecDeletionPolicy;

  /**
   * BackupParameters defines the desired state of Backup
   *
   * @schema BackupSpec#forProvider
   */
  readonly forProvider: BackupSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema BackupSpec#providerConfigRef
   */
  readonly providerConfigRef?: BackupSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema BackupSpec#providerRef
   */
  readonly providerRef?: BackupSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema BackupSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: BackupSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema BackupSpecDeletionPolicy
 */
export enum BackupSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * BackupParameters defines the desired state of Backup
 *
 * @schema BackupSpecForProvider
 */
export interface BackupSpecForProvider {
  /**
   * Specified name for the backup.
   *
   * @schema BackupSpecForProvider#backupName
   */
  readonly backupName: string;

  /**
   * Region is which region the Backup will be created.
   *
   * @schema BackupSpecForProvider#region
   */
  readonly region: string;

  /**
   * TableName is the name of the Table whose backup will be taken.
   *
   * @schema BackupSpecForProvider#tableName
   */
  readonly tableName?: string;

  /**
   * TableNameRef points to the Table resource whose Name will be used to fill TableName field.
   *
   * @schema BackupSpecForProvider#tableNameRef
   */
  readonly tableNameRef?: BackupSpecForProviderTableNameRef;

  /**
   * TableNameSelector selects a Table resource.
   *
   * @schema BackupSpecForProvider#tableNameSelector
   */
  readonly tableNameSelector?: BackupSpecForProviderTableNameSelector;

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema BackupSpecProviderConfigRef
 */
export interface BackupSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema BackupSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema BackupSpecProviderRef
 */
export interface BackupSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema BackupSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema BackupSpecWriteConnectionSecretToRef
 */
export interface BackupSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema BackupSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema BackupSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * TableNameRef points to the Table resource whose Name will be used to fill TableName field.
 *
 * @schema BackupSpecForProviderTableNameRef
 */
export interface BackupSpecForProviderTableNameRef {
  /**
   * Name of the referenced object.
   *
   * @schema BackupSpecForProviderTableNameRef#name
   */
  readonly name: string;

}

/**
 * TableNameSelector selects a Table resource.
 *
 * @schema BackupSpecForProviderTableNameSelector
 */
export interface BackupSpecForProviderTableNameSelector {
  /**
   * MatchControllerRef ensures an object with the same controller reference as the selecting object is selected.
   *
   * @schema BackupSpecForProviderTableNameSelector#matchControllerRef
   */
  readonly matchControllerRef?: boolean;

  /**
   * MatchLabels ensures an object with matching labels is selected.
   *
   * @schema BackupSpecForProviderTableNameSelector#matchLabels
   */
  readonly matchLabels?: { [key: string]: string };

}

/**
 * GlobalTable is the Schema for the GlobalTables API
 *
 * @schema GlobalTable
 */
export class GlobalTable extends ApiObject {
  /**
   * Returns the apiVersion and kind for "GlobalTable"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'dynamodb.aws.crossplane.io/v1alpha1',
    kind: 'GlobalTable',
  }

  /**
   * Renders a Kubernetes manifest for "GlobalTable".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: GlobalTableProps = {}): any {
    return {
      ...GlobalTable.GVK,
      ...props,
    };
  }

  /**
   * Defines a "GlobalTable" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: GlobalTableProps = {}) {
    super(scope, id, GlobalTable.manifest(props));
  }
}

/**
 * GlobalTable is the Schema for the GlobalTables API
 *
 * @schema GlobalTable
 */
export interface GlobalTableProps {
  /**
   * @schema GlobalTable#metadata
   */
  readonly metadata?: any;

  /**
   * GlobalTableSpec defines the desired state of GlobalTable
   *
   * @schema GlobalTable#spec
   */
  readonly spec?: GlobalTableSpec;

}

/**
 * GlobalTableSpec defines the desired state of GlobalTable
 *
 * @schema GlobalTableSpec
 */
export interface GlobalTableSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema GlobalTableSpec#deletionPolicy
   */
  readonly deletionPolicy?: GlobalTableSpecDeletionPolicy;

  /**
   * GlobalTableParameters defines the desired state of GlobalTable
   *
   * @schema GlobalTableSpec#forProvider
   */
  readonly forProvider: GlobalTableSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema GlobalTableSpec#providerConfigRef
   */
  readonly providerConfigRef?: GlobalTableSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema GlobalTableSpec#providerRef
   */
  readonly providerRef?: GlobalTableSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema GlobalTableSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: GlobalTableSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema GlobalTableSpecDeletionPolicy
 */
export enum GlobalTableSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * GlobalTableParameters defines the desired state of GlobalTable
 *
 * @schema GlobalTableSpecForProvider
 */
export interface GlobalTableSpecForProvider {
  /**
   * Region is which region the GlobalTable will be created.
   *
   * @schema GlobalTableSpecForProvider#region
   */
  readonly region: string;

  /**
   * The Regions where the global table needs to be created.
   *
   * @schema GlobalTableSpecForProvider#replicationGroup
   */
  readonly replicationGroup: GlobalTableSpecForProviderReplicationGroup[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema GlobalTableSpecProviderConfigRef
 */
export interface GlobalTableSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema GlobalTableSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema GlobalTableSpecProviderRef
 */
export interface GlobalTableSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema GlobalTableSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema GlobalTableSpecWriteConnectionSecretToRef
 */
export interface GlobalTableSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema GlobalTableSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema GlobalTableSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * @schema GlobalTableSpecForProviderReplicationGroup
 */
export interface GlobalTableSpecForProviderReplicationGroup {
  /**
   * @schema GlobalTableSpecForProviderReplicationGroup#regionName
   */
  readonly regionName?: string;

}

/**
 * Table is the Schema for the Tables API
 *
 * @schema Table
 */
export class Table extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Table"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'dynamodb.aws.crossplane.io/v1alpha1',
    kind: 'Table',
  }

  /**
   * Renders a Kubernetes manifest for "Table".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: TableProps = {}): any {
    return {
      ...Table.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Table" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: TableProps = {}) {
    super(scope, id, Table.manifest(props));
  }
}

/**
 * Table is the Schema for the Tables API
 *
 * @schema Table
 */
export interface TableProps {
  /**
   * @schema Table#metadata
   */
  readonly metadata?: any;

  /**
   * TableSpec defines the desired state of Table
   *
   * @schema Table#spec
   */
  readonly spec?: TableSpec;

}

/**
 * TableSpec defines the desired state of Table
 *
 * @schema TableSpec
 */
export interface TableSpec {
  /**
   * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
   *
   * @schema TableSpec#deletionPolicy
   */
  readonly deletionPolicy?: TableSpecDeletionPolicy;

  /**
   * TableParameters defines the desired state of Table
   *
   * @schema TableSpec#forProvider
   */
  readonly forProvider: TableSpecForProvider;

  /**
   * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
   *
   * @schema TableSpec#providerConfigRef
   */
  readonly providerConfigRef?: TableSpecProviderConfigRef;

  /**
   * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
   *
   * @schema TableSpec#providerRef
   */
  readonly providerRef?: TableSpecProviderRef;

  /**
   * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
   *
   * @schema TableSpec#writeConnectionSecretToRef
   */
  readonly writeConnectionSecretToRef?: TableSpecWriteConnectionSecretToRef;

}

/**
 * DeletionPolicy specifies what will happen to the underlying external when this managed resource is deleted - either "Delete" or "Orphan" the external resource. The "Delete" policy is the default when no policy is specified.
 *
 * @schema TableSpecDeletionPolicy
 */
export enum TableSpecDeletionPolicy {
  /** Orphan */
  ORPHAN = "Orphan",
  /** Delete */
  DELETE = "Delete",
}

/**
 * TableParameters defines the desired state of Table
 *
 * @schema TableSpecForProvider
 */
export interface TableSpecForProvider {
  /**
   * An array of attributes that describe the key schema for the table and indexes.
   *
   * @schema TableSpecForProvider#attributeDefinitions
   */
  readonly attributeDefinitions: TableSpecForProviderAttributeDefinitions[];

  /**
   * Controls how you are charged for read and write throughput and how you manage capacity. This setting can be changed later. 
    * PROVISIONED - We recommend using PROVISIONED for predictable workloads.    PROVISIONED sets the billing mode to Provisioned Mode (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.ProvisionedThroughput.Manual). 
    * PAY_PER_REQUEST - We recommend using PAY_PER_REQUEST for unpredictable    workloads. PAY_PER_REQUEST sets the billing mode to On-Demand Mode (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html#HowItWorks.OnDemand).
   *
   * @schema TableSpecForProvider#billingMode
   */
  readonly billingMode?: string;

  /**
   * One or more global secondary indexes (the maximum is 20) to be created on the table. Each global secondary index in the array includes the following: 
    * IndexName - The name of the global secondary index. Must be unique only    for this table. 
    * KeySchema - Specifies the key schema for the global secondary index. 
    * Projection - Specifies attributes that are copied (projected) from the    table into the index. These are in addition to the primary key attributes    and index key attributes, which are automatically projected. Each attribute    specification is composed of: ProjectionType - One of the following: KEYS_ONLY    - Only the index and primary keys are projected into the index. INCLUDE    - Only the specified table attributes are projected into the index. The    list of projected attributes is in NonKeyAttributes. ALL - All of the    table attributes are projected into the index. NonKeyAttributes - A list    of one or more non-key attribute names that are projected into the secondary    index. The total count of attributes provided in NonKeyAttributes, summed    across all of the secondary indexes, must not exceed 100. If you project    the same attribute into two different indexes, this counts as two distinct    attributes when determining the total. 
    * ProvisionedThroughput - The provisioned throughput settings for the    global secondary index, consisting of read and write capacity units.
   *
   * @schema TableSpecForProvider#globalSecondaryIndexes
   */
  readonly globalSecondaryIndexes?: TableSpecForProviderGlobalSecondaryIndexes[];

  /**
   * Specifies the attributes that make up the primary key for a table or an index. The attributes in KeySchema must also be defined in the AttributeDefinitions array. For more information, see Data Model (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html) in the Amazon DynamoDB Developer Guide. 
 Each KeySchemaElement in the array is composed of: 
    * AttributeName - The name of this key attribute. 
    * KeyType - The role that the key attribute will assume: HASH - partition    key RANGE - sort key 
 The partition key of an item is also known as its hash attribute. The term "hash attribute" derives from the DynamoDB usage of an internal hash function to evenly distribute data items across partitions, based on their partition key values. 
 The sort key of an item is also known as its range attribute. The term "range attribute" derives from the way DynamoDB stores items with the same partition key physically close together, in sorted order by the sort key value. 
 For a simple primary key (partition key), you must provide exactly one element with a KeyType of HASH. 
 For a composite primary key (partition key and sort key), you must provide exactly two elements, in this order: The first element must have a KeyType of HASH, and the second element must have a KeyType of RANGE. 
 For more information, see Working with Tables (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#WorkingWithTables.primary.key) in the Amazon DynamoDB Developer Guide.
   *
   * @schema TableSpecForProvider#keySchema
   */
  readonly keySchema: TableSpecForProviderKeySchema[];

  /**
   * One or more local secondary indexes (the maximum is 5) to be created on the table. Each index is scoped to a given partition key value. There is a 10 GB size limit per partition key value; otherwise, the size of a local secondary index is unconstrained. 
 Each local secondary index in the array includes the following: 
    * IndexName - The name of the local secondary index. Must be unique only    for this table. 
    * KeySchema - Specifies the key schema for the local secondary index.    The key schema must begin with the same partition key as the table. 
    * Projection - Specifies attributes that are copied (projected) from the    table into the index. These are in addition to the primary key attributes    and index key attributes, which are automatically projected. Each attribute    specification is composed of: ProjectionType - One of the following: KEYS_ONLY    - Only the index and primary keys are projected into the index. INCLUDE    - Only the specified table attributes are projected into the index. The    list of projected attributes is in NonKeyAttributes. ALL - All of the    table attributes are projected into the index. NonKeyAttributes - A list    of one or more non-key attribute names that are projected into the secondary    index. The total count of attributes provided in NonKeyAttributes, summed    across all of the secondary indexes, must not exceed 100. If you project    the same attribute into two different indexes, this counts as two distinct    attributes when determining the total.
   *
   * @schema TableSpecForProvider#localSecondaryIndexes
   */
  readonly localSecondaryIndexes?: TableSpecForProviderLocalSecondaryIndexes[];

  /**
   * Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. 
 If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property. 
 For current minimum and maximum provisioned throughput values, see Limits (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
   *
   * @schema TableSpecForProvider#provisionedThroughput
   */
  readonly provisionedThroughput?: TableSpecForProviderProvisionedThroughput;

  /**
   * Region is which region the Table will be created.
   *
   * @schema TableSpecForProvider#region
   */
  readonly region: string;

  /**
   * Represents the settings used to enable server-side encryption.
   *
   * @schema TableSpecForProvider#sseSpecification
   */
  readonly sseSpecification?: TableSpecForProviderSseSpecification;

  /**
   * The settings for DynamoDB Streams on the table. These settings consist of: 
    * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled    (true) or disabled (false). 
    * StreamViewType - When an item in the table is modified, StreamViewType    determines what information is written to the table's stream. Valid values    for StreamViewType are: KEYS_ONLY - Only the key attributes of the modified    item are written to the stream. NEW_IMAGE - The entire item, as it appears    after it was modified, is written to the stream. OLD_IMAGE - The entire    item, as it appeared before it was modified, is written to the stream.    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item    are written to the stream.
   *
   * @schema TableSpecForProvider#streamSpecification
   */
  readonly streamSpecification?: TableSpecForProviderStreamSpecification;

  /**
   * A list of key-value pairs to label the table. For more information, see Tagging for DynamoDB (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html).
   *
   * @schema TableSpecForProvider#tags
   */
  readonly tags?: TableSpecForProviderTags[];

}

/**
 * ProviderConfigReference specifies how the provider that will be used to create, observe, update, and delete this managed resource should be configured.
 *
 * @schema TableSpecProviderConfigRef
 */
export interface TableSpecProviderConfigRef {
  /**
   * Name of the referenced object.
   *
   * @schema TableSpecProviderConfigRef#name
   */
  readonly name: string;

}

/**
 * ProviderReference specifies the provider that will be used to create, observe, update, and delete this managed resource. Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`
 *
 * @schema TableSpecProviderRef
 */
export interface TableSpecProviderRef {
  /**
   * Name of the referenced object.
   *
   * @schema TableSpecProviderRef#name
   */
  readonly name: string;

}

/**
 * WriteConnectionSecretToReference specifies the namespace and name of a Secret to which any connection details for this managed resource should be written. Connection details frequently include the endpoint, username, and password required to connect to the managed resource.
 *
 * @schema TableSpecWriteConnectionSecretToRef
 */
export interface TableSpecWriteConnectionSecretToRef {
  /**
   * Name of the secret.
   *
   * @schema TableSpecWriteConnectionSecretToRef#name
   */
  readonly name: string;

  /**
   * Namespace of the secret.
   *
   * @schema TableSpecWriteConnectionSecretToRef#namespace
   */
  readonly namespace: string;

}

/**
 * @schema TableSpecForProviderAttributeDefinitions
 */
export interface TableSpecForProviderAttributeDefinitions {
  /**
   * @schema TableSpecForProviderAttributeDefinitions#attributeName
   */
  readonly attributeName?: string;

  /**
   * @schema TableSpecForProviderAttributeDefinitions#attributeType
   */
  readonly attributeType?: string;

}

/**
 * @schema TableSpecForProviderGlobalSecondaryIndexes
 */
export interface TableSpecForProviderGlobalSecondaryIndexes {
  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexes#indexName
   */
  readonly indexName?: string;

  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexes#keySchema
   */
  readonly keySchema?: TableSpecForProviderGlobalSecondaryIndexesKeySchema[];

  /**
   * Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
   *
   * @schema TableSpecForProviderGlobalSecondaryIndexes#projection
   */
  readonly projection?: TableSpecForProviderGlobalSecondaryIndexesProjection;

  /**
   * Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. 
 For current minimum and maximum provisioned throughput values, see Limits (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
   *
   * @schema TableSpecForProviderGlobalSecondaryIndexes#provisionedThroughput
   */
  readonly provisionedThroughput?: TableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput;

}

/**
 * @schema TableSpecForProviderKeySchema
 */
export interface TableSpecForProviderKeySchema {
  /**
   * @schema TableSpecForProviderKeySchema#attributeName
   */
  readonly attributeName?: string;

  /**
   * @schema TableSpecForProviderKeySchema#keyType
   */
  readonly keyType?: string;

}

/**
 * @schema TableSpecForProviderLocalSecondaryIndexes
 */
export interface TableSpecForProviderLocalSecondaryIndexes {
  /**
   * @schema TableSpecForProviderLocalSecondaryIndexes#indexName
   */
  readonly indexName?: string;

  /**
   * @schema TableSpecForProviderLocalSecondaryIndexes#keySchema
   */
  readonly keySchema?: TableSpecForProviderLocalSecondaryIndexesKeySchema[];

  /**
   * Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
   *
   * @schema TableSpecForProviderLocalSecondaryIndexes#projection
   */
  readonly projection?: TableSpecForProviderLocalSecondaryIndexesProjection;

}

/**
 * Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. 
 If you set BillingMode as PROVISIONED, you must specify this property. If you set BillingMode as PAY_PER_REQUEST, you cannot specify this property. 
 For current minimum and maximum provisioned throughput values, see Limits (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
 *
 * @schema TableSpecForProviderProvisionedThroughput
 */
export interface TableSpecForProviderProvisionedThroughput {
  /**
   * @schema TableSpecForProviderProvisionedThroughput#readCapacityUnits
   */
  readonly readCapacityUnits?: number;

  /**
   * @schema TableSpecForProviderProvisionedThroughput#writeCapacityUnits
   */
  readonly writeCapacityUnits?: number;

}

/**
 * Represents the settings used to enable server-side encryption.
 *
 * @schema TableSpecForProviderSseSpecification
 */
export interface TableSpecForProviderSseSpecification {
  /**
   * @schema TableSpecForProviderSseSpecification#enabled
   */
  readonly enabled?: boolean;

  /**
   * @schema TableSpecForProviderSseSpecification#kmsMasterKeyID
   */
  readonly kmsMasterKeyID?: string;

  /**
   * @schema TableSpecForProviderSseSpecification#sseType
   */
  readonly sseType?: string;

}

/**
 * The settings for DynamoDB Streams on the table. These settings consist of: 
    * StreamEnabled - Indicates whether DynamoDB Streams is to be enabled    (true) or disabled (false). 
    * StreamViewType - When an item in the table is modified, StreamViewType    determines what information is written to the table's stream. Valid values    for StreamViewType are: KEYS_ONLY - Only the key attributes of the modified    item are written to the stream. NEW_IMAGE - The entire item, as it appears    after it was modified, is written to the stream. OLD_IMAGE - The entire    item, as it appeared before it was modified, is written to the stream.    NEW_AND_OLD_IMAGES - Both the new and the old item images of the item    are written to the stream.
 *
 * @schema TableSpecForProviderStreamSpecification
 */
export interface TableSpecForProviderStreamSpecification {
  /**
   * @schema TableSpecForProviderStreamSpecification#streamEnabled
   */
  readonly streamEnabled?: boolean;

  /**
   * @schema TableSpecForProviderStreamSpecification#streamViewType
   */
  readonly streamViewType?: string;

}

/**
 * @schema TableSpecForProviderTags
 */
export interface TableSpecForProviderTags {
  /**
   * @schema TableSpecForProviderTags#key
   */
  readonly key?: string;

  /**
   * @schema TableSpecForProviderTags#value
   */
  readonly value?: string;

}

/**
 * @schema TableSpecForProviderGlobalSecondaryIndexesKeySchema
 */
export interface TableSpecForProviderGlobalSecondaryIndexesKeySchema {
  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexesKeySchema#attributeName
   */
  readonly attributeName?: string;

  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexesKeySchema#keyType
   */
  readonly keyType?: string;

}

/**
 * Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
 *
 * @schema TableSpecForProviderGlobalSecondaryIndexesProjection
 */
export interface TableSpecForProviderGlobalSecondaryIndexesProjection {
  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexesProjection#nonKeyAttributes
   */
  readonly nonKeyAttributes?: string[];

  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexesProjection#projectionType
   */
  readonly projectionType?: string;

}

/**
 * Represents the provisioned throughput settings for a specified table or index. The settings can be modified using the UpdateTable operation. 
 For current minimum and maximum provisioned throughput values, see Limits (https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html) in the Amazon DynamoDB Developer Guide.
 *
 * @schema TableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput
 */
export interface TableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput {
  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput#readCapacityUnits
   */
  readonly readCapacityUnits?: number;

  /**
   * @schema TableSpecForProviderGlobalSecondaryIndexesProvisionedThroughput#writeCapacityUnits
   */
  readonly writeCapacityUnits?: number;

}

/**
 * @schema TableSpecForProviderLocalSecondaryIndexesKeySchema
 */
export interface TableSpecForProviderLocalSecondaryIndexesKeySchema {
  /**
   * @schema TableSpecForProviderLocalSecondaryIndexesKeySchema#attributeName
   */
  readonly attributeName?: string;

  /**
   * @schema TableSpecForProviderLocalSecondaryIndexesKeySchema#keyType
   */
  readonly keyType?: string;

}

/**
 * Represents attributes that are copied (projected) from the table into an index. These are in addition to the primary key attributes and index key attributes, which are automatically projected.
 *
 * @schema TableSpecForProviderLocalSecondaryIndexesProjection
 */
export interface TableSpecForProviderLocalSecondaryIndexesProjection {
  /**
   * @schema TableSpecForProviderLocalSecondaryIndexesProjection#nonKeyAttributes
   */
  readonly nonKeyAttributes?: string[];

  /**
   * @schema TableSpecForProviderLocalSecondaryIndexesProjection#projectionType
   */
  readonly projectionType?: string;

}

