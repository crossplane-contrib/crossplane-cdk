// generated by cdk8s
import { ApiObject, GroupVersionKind } from 'cdk8s';
import { Construct } from 'constructs';

/**
 * A Configuration is the description of a Crossplane Configuration package.
 *
 * @schema Configuration
 */
export class Configuration extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Configuration"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'meta.pkg.crossplane.io/v1',
    kind: 'Configuration',
  }

  /**
   * Renders a Kubernetes manifest for "Configuration".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ConfigurationProps): any {
    return {
      ...Configuration.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Configuration" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ConfigurationProps) {
    super(scope, id, Configuration.manifest(props));
  }
}

/**
 * A Configuration is the description of a Crossplane Configuration package.
 *
 * @schema Configuration
 */
export interface ConfigurationProps {
  /**
   * @schema Configuration#metadata
   */
  readonly metadata?: any;

  /**
   * ConfigurationSpec specifies the configuration of a Configuration.
   *
   * @schema Configuration#spec
   */
  readonly spec: ConfigurationSpec;

}

/**
 * ConfigurationSpec specifies the configuration of a Configuration.
 *
 * @schema ConfigurationSpec
 */
export interface ConfigurationSpec {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ConfigurationSpec#crossplane
   */
  readonly crossplane?: ConfigurationSpecCrossplane;

  /**
   * Dependencies on other packages.
   *
   * @schema ConfigurationSpec#dependsOn
   */
  readonly dependsOn?: ConfigurationSpecDependsOn[];

}

/**
 * Semantic version constraints of Crossplane that package is compatible with.
 *
 * @schema ConfigurationSpecCrossplane
 */
export interface ConfigurationSpecCrossplane {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ConfigurationSpecCrossplane#version
   */
  readonly version: string;

}

/**
 * Dependency is a dependency on another package. One of Provider or Configuration may be supplied.
 *
 * @schema ConfigurationSpecDependsOn
 */
export interface ConfigurationSpecDependsOn {
  /**
   * Configuration is the name of a Configuration package image.
   *
   * @schema ConfigurationSpecDependsOn#configuration
   */
  readonly configuration?: string;

  /**
   * Provider is the name of a Provider package image.
   *
   * @schema ConfigurationSpecDependsOn#provider
   */
  readonly provider?: string;

  /**
   * Version is the semantic version constraints of the dependency image.
   *
   * @schema ConfigurationSpecDependsOn#version
   */
  readonly version: string;

}

/**
 * A Provider is the description of a Crossplane Provider package.
 *
 * @schema Provider
 */
export class Provider extends ApiObject {
  /**
   * Returns the apiVersion and kind for "Provider"
   */
  public static readonly GVK: GroupVersionKind = {
    apiVersion: 'meta.pkg.crossplane.io/v1',
    kind: 'Provider',
  }

  /**
   * Renders a Kubernetes manifest for "Provider".
   *
   * This can be used to inline resource manifests inside other objects (e.g. as templates).
   *
   * @param props initialization props
   */
  public static manifest(props: ProviderProps): any {
    return {
      ...Provider.GVK,
      ...props,
    };
  }

  /**
   * Defines a "Provider" API object
   * @param scope the scope in which to define this object
   * @param id a scope-local name for the object
   * @param props initialization props
   */
  public constructor(scope: Construct, id: string, props: ProviderProps) {
    super(scope, id, Provider.manifest(props));
  }
}

/**
 * A Provider is the description of a Crossplane Provider package.
 *
 * @schema Provider
 */
export interface ProviderProps {
  /**
   * @schema Provider#metadata
   */
  readonly metadata?: any;

  /**
   * ProviderSpec specifies the configuration of a Provider.
   *
   * @schema Provider#spec
   */
  readonly spec: ProviderSpec;

}

/**
 * ProviderSpec specifies the configuration of a Provider.
 *
 * @schema ProviderSpec
 */
export interface ProviderSpec {
  /**
   * Configuration for the packaged Provider's controller.
   *
   * @schema ProviderSpec#controller
   */
  readonly controller: ProviderSpecController;

  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ProviderSpec#crossplane
   */
  readonly crossplane?: ProviderSpecCrossplane;

  /**
   * Dependencies on other packages.
   *
   * @schema ProviderSpec#dependsOn
   */
  readonly dependsOn?: ProviderSpecDependsOn[];

}

/**
 * Configuration for the packaged Provider's controller.
 *
 * @schema ProviderSpecController
 */
export interface ProviderSpecController {
  /**
   * Image is the packaged Provider controller image.
   *
   * @schema ProviderSpecController#image
   */
  readonly image: string;

  /**
   * PermissionRequests for RBAC rules required for this provider's controller to function. The RBAC manager is responsible for assessing the requested permissions.
   *
   * @schema ProviderSpecController#permissionRequests
   */
  readonly permissionRequests?: ProviderSpecControllerPermissionRequests[];

}

/**
 * Semantic version constraints of Crossplane that package is compatible with.
 *
 * @schema ProviderSpecCrossplane
 */
export interface ProviderSpecCrossplane {
  /**
   * Semantic version constraints of Crossplane that package is compatible with.
   *
   * @schema ProviderSpecCrossplane#version
   */
  readonly version: string;

}

/**
 * Dependency is a dependency on another package. One of Provider or Configuration may be supplied.
 *
 * @schema ProviderSpecDependsOn
 */
export interface ProviderSpecDependsOn {
  /**
   * Configuration is the name of a Configuration package image.
   *
   * @schema ProviderSpecDependsOn#configuration
   */
  readonly configuration?: string;

  /**
   * Provider is the name of a Provider package image.
   *
   * @schema ProviderSpecDependsOn#provider
   */
  readonly provider?: string;

  /**
   * Version is the semantic version constraints of the dependency image.
   *
   * @schema ProviderSpecDependsOn#version
   */
  readonly version: string;

}

/**
 * PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
 *
 * @schema ProviderSpecControllerPermissionRequests
 */
export interface ProviderSpecControllerPermissionRequests {
  /**
   * APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
   *
   * @schema ProviderSpecControllerPermissionRequests#apiGroups
   */
  readonly apiGroups?: string[];

  /**
   * NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as "pods" or "secrets") or non-resource URL paths (such as "/api"),  but not both.
   *
   * @schema ProviderSpecControllerPermissionRequests#nonResourceURLs
   */
  readonly nonResourceURLs?: string[];

  /**
   * ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
   *
   * @schema ProviderSpecControllerPermissionRequests#resourceNames
   */
  readonly resourceNames?: string[];

  /**
   * Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
   *
   * @schema ProviderSpecControllerPermissionRequests#resources
   */
  readonly resources?: string[];

  /**
   * Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
   *
   * @schema ProviderSpecControllerPermissionRequests#verbs
   */
  readonly verbs: string[];

}

